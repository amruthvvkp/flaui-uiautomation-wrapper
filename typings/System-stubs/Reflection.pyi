from __future__ import annotations

# stdlib
from enum import Enum
from typing import Any, List, Type

# 3rd party
import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent

class MemberInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def ToString(self) -> str: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...

	def op_Equality(
			self,
			_: MemberInfo,
			__: MemberInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: MemberInfo,
			__: MemberInfo,
			) -> bool: ...

class MethodBase:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CallingConvention(self): ...

	@CallingConvention.setter
	def CallingConvention(self, value): ...

	@property
	def ContainsGenericParameters(self): ...

	@ContainsGenericParameters.setter
	def ContainsGenericParameters(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetCurrentMethod(self) -> MethodBase: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetGenericArguments(self) -> List[Type]: ...
	def GetHashCode(self) -> int: ...
	def GetMethodBody(self) -> MethodBody: ...

	def GetMethodFromHandle(
			self,
			_: System.RuntimeMethodHandle,
			__: System.RuntimeTypeHandle,
			) -> MethodBase: ...

	def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
	def GetParameters(self) -> List[ParameterInfo]: ...
	def GetType(self) -> Type: ...

	def Invoke(
			self,
			_: object,
			__: BindingFlags,
			___: Binder,
			____: List[object],
			_____: System.Globalization.CultureInfo,
			) -> object: ...

	@property
	def IsAbstract(self): ...

	@IsAbstract.setter
	def IsAbstract(self, value): ...

	@property
	def IsAssembly(self): ...

	@IsAssembly.setter
	def IsAssembly(self, value): ...

	@property
	def IsConstructor(self): ...

	@IsConstructor.setter
	def IsConstructor(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsFamily(self): ...

	@IsFamily.setter
	def IsFamily(self, value): ...

	@property
	def IsFamilyAndAssembly(self): ...

	@IsFamilyAndAssembly.setter
	def IsFamilyAndAssembly(self, value): ...

	@property
	def IsFamilyOrAssembly(self): ...

	@IsFamilyOrAssembly.setter
	def IsFamilyOrAssembly(self, value): ...

	@property
	def IsFinal(self): ...

	@IsFinal.setter
	def IsFinal(self, value): ...

	@property
	def IsGenericMethod(self): ...

	@IsGenericMethod.setter
	def IsGenericMethod(self, value): ...

	@property
	def IsGenericMethodDefinition(self): ...

	@IsGenericMethodDefinition.setter
	def IsGenericMethodDefinition(self, value): ...

	@property
	def IsHideBySig(self): ...

	@IsHideBySig.setter
	def IsHideBySig(self, value): ...

	@property
	def IsPrivate(self): ...

	@IsPrivate.setter
	def IsPrivate(self, value): ...

	@property
	def IsPublic(self): ...

	@IsPublic.setter
	def IsPublic(self, value): ...

	@property
	def IsSecurityCritical(self): ...

	@IsSecurityCritical.setter
	def IsSecurityCritical(self, value): ...

	@property
	def IsSecuritySafeCritical(self): ...

	@IsSecuritySafeCritical.setter
	def IsSecuritySafeCritical(self, value): ...

	@property
	def IsSecurityTransparent(self): ...

	@IsSecurityTransparent.setter
	def IsSecurityTransparent(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def IsStatic(self): ...

	@IsStatic.setter
	def IsStatic(self, value): ...

	@property
	def IsVirtual(self): ...

	@IsVirtual.setter
	def IsVirtual(self, value): ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def MethodHandle(self): ...

	@MethodHandle.setter
	def MethodHandle(self, value): ...

	@property
	def MethodImplementationFlags(self): ...

	@MethodImplementationFlags.setter
	def MethodImplementationFlags(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def ToString(self) -> str: ...
	def get_Attributes(self) -> MethodAttributes: ...
	def get_CallingConvention(self) -> CallingConventions: ...
	def get_ContainsGenericParameters(self) -> bool: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_IsAbstract(self) -> bool: ...
	def get_IsAssembly(self) -> bool: ...
	def get_IsConstructor(self) -> bool: ...
	def get_IsFamily(self) -> bool: ...
	def get_IsFamilyAndAssembly(self) -> bool: ...
	def get_IsFamilyOrAssembly(self) -> bool: ...
	def get_IsFinal(self) -> bool: ...
	def get_IsGenericMethod(self) -> bool: ...
	def get_IsGenericMethodDefinition(self) -> bool: ...
	def get_IsHideBySig(self) -> bool: ...
	def get_IsPrivate(self) -> bool: ...
	def get_IsPublic(self) -> bool: ...
	def get_IsSecurityCritical(self) -> bool: ...
	def get_IsSecuritySafeCritical(self) -> bool: ...
	def get_IsSecurityTransparent(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_IsStatic(self) -> bool: ...
	def get_IsVirtual(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_MethodHandle(self) -> System.RuntimeMethodHandle: ...
	def get_MethodImplementationFlags(self) -> MethodImplAttributes: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...

	def op_Equality(
			self,
			_: MethodBase,
			__: MethodBase,
			) -> bool: ...

	def op_Inequality(
			self,
			_: MethodBase,
			__: MethodBase,
			) -> bool: ...

class MethodInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CallingConvention(self): ...

	@CallingConvention.setter
	def CallingConvention(self, value): ...

	@property
	def ContainsGenericParameters(self): ...

	@ContainsGenericParameters.setter
	def ContainsGenericParameters(self, value): ...

	def CreateDelegate(self, _: Type, __: object) -> Any: ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetBaseDefinition(self) -> MethodInfo: ...
	def GetCurrentMethod(self) -> MethodBase: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetGenericArguments(self) -> List[Type]: ...
	def GetGenericMethodDefinition(self) -> MethodInfo: ...
	def GetHashCode(self) -> int: ...
	def GetMethodBody(self) -> MethodBody: ...

	def GetMethodFromHandle(
			self,
			_: System.RuntimeMethodHandle,
			__: System.RuntimeTypeHandle,
			) -> MethodBase: ...

	def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
	def GetParameters(self) -> List[ParameterInfo]: ...
	def GetType(self) -> Type: ...

	def Invoke(
			self,
			_: object,
			__: BindingFlags,
			___: Binder,
			____: List[object],
			_____: System.Globalization.CultureInfo,
			) -> object: ...

	@property
	def IsAbstract(self): ...

	@IsAbstract.setter
	def IsAbstract(self, value): ...

	@property
	def IsAssembly(self): ...

	@IsAssembly.setter
	def IsAssembly(self, value): ...

	@property
	def IsConstructor(self): ...

	@IsConstructor.setter
	def IsConstructor(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsFamily(self): ...

	@IsFamily.setter
	def IsFamily(self, value): ...

	@property
	def IsFamilyAndAssembly(self): ...

	@IsFamilyAndAssembly.setter
	def IsFamilyAndAssembly(self, value): ...

	@property
	def IsFamilyOrAssembly(self): ...

	@IsFamilyOrAssembly.setter
	def IsFamilyOrAssembly(self, value): ...

	@property
	def IsFinal(self): ...

	@IsFinal.setter
	def IsFinal(self, value): ...

	@property
	def IsGenericMethod(self): ...

	@IsGenericMethod.setter
	def IsGenericMethod(self, value): ...

	@property
	def IsGenericMethodDefinition(self): ...

	@IsGenericMethodDefinition.setter
	def IsGenericMethodDefinition(self, value): ...

	@property
	def IsHideBySig(self): ...

	@IsHideBySig.setter
	def IsHideBySig(self, value): ...

	@property
	def IsPrivate(self): ...

	@IsPrivate.setter
	def IsPrivate(self, value): ...

	@property
	def IsPublic(self): ...

	@IsPublic.setter
	def IsPublic(self, value): ...

	@property
	def IsSecurityCritical(self): ...

	@IsSecurityCritical.setter
	def IsSecurityCritical(self, value): ...

	@property
	def IsSecuritySafeCritical(self): ...

	@IsSecuritySafeCritical.setter
	def IsSecuritySafeCritical(self, value): ...

	@property
	def IsSecurityTransparent(self): ...

	@IsSecurityTransparent.setter
	def IsSecurityTransparent(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def IsStatic(self): ...

	@IsStatic.setter
	def IsStatic(self, value): ...

	@property
	def IsVirtual(self): ...

	@IsVirtual.setter
	def IsVirtual(self, value): ...

	def MakeGenericMethod(self, _: List[Type]) -> MethodInfo: ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def MethodHandle(self): ...

	@MethodHandle.setter
	def MethodHandle(self, value): ...

	@property
	def MethodImplementationFlags(self): ...

	@MethodImplementationFlags.setter
	def MethodImplementationFlags(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	@property
	def ReturnParameter(self): ...

	@ReturnParameter.setter
	def ReturnParameter(self, value): ...

	@property
	def ReturnType(self): ...

	@ReturnType.setter
	def ReturnType(self, value): ...

	@property
	def ReturnTypeCustomAttributes(self): ...

	@ReturnTypeCustomAttributes.setter
	def ReturnTypeCustomAttributes(self, value): ...

	def ToString(self) -> str: ...
	def get_Attributes(self) -> MethodAttributes: ...
	def get_CallingConvention(self) -> CallingConventions: ...
	def get_ContainsGenericParameters(self) -> bool: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_IsAbstract(self) -> bool: ...
	def get_IsAssembly(self) -> bool: ...
	def get_IsConstructor(self) -> bool: ...
	def get_IsFamily(self) -> bool: ...
	def get_IsFamilyAndAssembly(self) -> bool: ...
	def get_IsFamilyOrAssembly(self) -> bool: ...
	def get_IsFinal(self) -> bool: ...
	def get_IsGenericMethod(self) -> bool: ...
	def get_IsGenericMethodDefinition(self) -> bool: ...
	def get_IsHideBySig(self) -> bool: ...
	def get_IsPrivate(self) -> bool: ...
	def get_IsPublic(self) -> bool: ...
	def get_IsSecurityCritical(self) -> bool: ...
	def get_IsSecuritySafeCritical(self) -> bool: ...
	def get_IsSecurityTransparent(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_IsStatic(self) -> bool: ...
	def get_IsVirtual(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_MethodHandle(self) -> System.RuntimeMethodHandle: ...
	def get_MethodImplementationFlags(self) -> MethodImplAttributes: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...
	def get_ReturnParameter(self) -> ParameterInfo: ...
	def get_ReturnType(self) -> Type: ...
	def get_ReturnTypeCustomAttributes(self) -> ICustomAttributeProvider: ...

	def op_Equality(
			self,
			_: MethodInfo,
			__: MethodInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: MethodInfo,
			__: MethodInfo,
			) -> bool: ...

class Module:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Assembly(self): ...

	@Assembly.setter
	def Assembly(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def FilterTypeName(self, *args, **kwargs) -> Any: ...
	def FilterTypeNameIgnoreCase(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def FindTypes(self, _: TypeFilter, __: object) -> List[Type]: ...

	@property
	def FullyQualifiedName(self): ...

	@FullyQualifiedName.setter
	def FullyQualifiedName(self, value): ...

	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...

	def GetField(
			self,
			_: str,
			__: BindingFlags,
			) -> FieldInfo: ...

	def GetFields(
			self,
			_: BindingFlags,
			) -> List[FieldInfo]: ...

	def GetHashCode(self) -> int: ...

	def GetMethod(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: CallingConventions,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> MethodInfo: ...

	def GetMethodImpl(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: CallingConventions,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> MethodInfo: ...

	def GetMethods(
			self,
			_: BindingFlags,
			) -> List[MethodInfo]: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetPEKind(
			self,
			_: PortableExecutableKinds,
			__: ImageFileMachine,
			) -> None: ...

	def GetSignerCertificate(self) -> System.Security.Cryptography.X509Certificates.X509Certificate: ...
	def GetType(self) -> Type: ...
	def GetTypes(self) -> List[Type]: ...
	def IsDefined(self, _: Type, __: bool) -> bool: ...
	def IsResource(self) -> bool: ...

	@property
	def MDStreamVersion(self): ...

	@MDStreamVersion.setter
	def MDStreamVersion(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def ModuleHandle(self): ...

	@ModuleHandle.setter
	def ModuleHandle(self, value): ...

	@property
	def ModuleVersionId(self): ...

	@ModuleVersionId.setter
	def ModuleVersionId(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	def ResolveField(
			self,
			_: int,
			__: List[Type],
			___: List[Type],
			) -> FieldInfo: ...

	def ResolveMember(
			self,
			_: int,
			__: List[Type],
			___: List[Type],
			) -> MemberInfo: ...

	def ResolveMethod(
			self,
			_: int,
			__: List[Type],
			___: List[Type],
			) -> MethodBase: ...

	def ResolveSignature(self, _: int) -> List[bytes]: ...
	def ResolveString(self, _: int) -> str: ...
	def ResolveType(self, _: int, __: List[Type], ___: List[Type]) -> Type: ...

	@property
	def ScopeName(self): ...

	@ScopeName.setter
	def ScopeName(self, value): ...

	def ToString(self) -> str: ...
	def get_Assembly(self) -> Assembly: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_FullyQualifiedName(self) -> str: ...
	def get_MDStreamVersion(self) -> int: ...
	def get_MetadataToken(self) -> int: ...
	def get_ModuleHandle(self) -> System.ModuleHandle: ...
	def get_ModuleVersionId(self) -> System.Guid: ...
	def get_Name(self) -> str: ...
	def get_ScopeName(self) -> str: ...

	def op_Equality(
			self,
			_: Module,
			__: Module,
			) -> bool: ...

	def op_Inequality(
			self,
			_: Module,
			__: Module,
			) -> bool: ...

class TypeInfo:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AsType(self) -> Type: ...

	@property
	def Assembly(self): ...

	@Assembly.setter
	def Assembly(self, value): ...

	@property
	def AssemblyQualifiedName(self): ...

	@AssemblyQualifiedName.setter
	def AssemblyQualifiedName(self, value): ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseType(self): ...

	@BaseType.setter
	def BaseType(self, value): ...

	@property
	def ContainsGenericParameters(self): ...

	@ContainsGenericParameters.setter
	def ContainsGenericParameters(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaredConstructors(self): ...

	@DeclaredConstructors.setter
	def DeclaredConstructors(self, value): ...

	@property
	def DeclaredEvents(self): ...

	@DeclaredEvents.setter
	def DeclaredEvents(self, value): ...

	@property
	def DeclaredFields(self): ...

	@DeclaredFields.setter
	def DeclaredFields(self, value): ...

	@property
	def DeclaredMembers(self): ...

	@DeclaredMembers.setter
	def DeclaredMembers(self, value): ...

	@property
	def DeclaredMethods(self): ...

	@DeclaredMethods.setter
	def DeclaredMethods(self, value): ...

	@property
	def DeclaredNestedTypes(self): ...

	@DeclaredNestedTypes.setter
	def DeclaredNestedTypes(self, value): ...

	@property
	def DeclaredProperties(self): ...

	@DeclaredProperties.setter
	def DeclaredProperties(self, value): ...

	@property
	def DeclaringMethod(self): ...

	@DeclaringMethod.setter
	def DeclaringMethod(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def DefaultBinder(self, *args, **kwargs) -> Any: ...
	def Delimiter(self, *args, **kwargs) -> Any: ...
	def EmptyTypes(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def FilterAttribute(self, *args, **kwargs) -> Any: ...
	def FilterName(self, *args, **kwargs) -> Any: ...
	def FilterNameIgnoreCase(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def FindInterfaces(self, _: TypeFilter, __: object) -> List[Type]: ...

	def FindMembers(
			self,
			_: MemberTypes,
			__: BindingFlags,
			___: MemberFilter,
			____: object,
			) -> List[MemberInfo]: ...

	@property
	def FullName(self): ...

	@FullName.setter
	def FullName(self, value): ...

	@property
	def GUID(self): ...

	@GUID.setter
	def GUID(self, value): ...

	@property
	def GenericParameterAttributes(self): ...

	@GenericParameterAttributes.setter
	def GenericParameterAttributes(self, value): ...

	@property
	def GenericParameterPosition(self): ...

	@GenericParameterPosition.setter
	def GenericParameterPosition(self, value): ...

	@property
	def GenericTypeArguments(self): ...

	@GenericTypeArguments.setter
	def GenericTypeArguments(self, value): ...

	@property
	def GenericTypeParameters(self): ...

	@GenericTypeParameters.setter
	def GenericTypeParameters(self, value): ...

	def GetArrayRank(self) -> int: ...
	def GetAttributeFlagsImpl(self) -> TypeAttributes: ...

	def GetConstructor(
			self,
			_: BindingFlags,
			__: Binder,
			___: CallingConventions,
			____: List[Type],
			_____: List[ParameterModifier],
			) -> ConstructorInfo: ...

	def GetConstructorImpl(
			self,
			_: BindingFlags,
			__: Binder,
			___: CallingConventions,
			____: List[Type],
			_____: List[ParameterModifier],
			) -> ConstructorInfo: ...

	def GetConstructors(
			self,
			_: BindingFlags,
			) -> List[ConstructorInfo]: ...

	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetDeclaredEvent(self, _: str) -> EventInfo: ...
	def GetDeclaredField(self, _: str) -> FieldInfo: ...
	def GetDeclaredMethod(self, _: str) -> MethodInfo: ...
	def GetDeclaredMethods(self, _: str) -> List[MethodInfo]: ...
	def GetDeclaredNestedType(self, _: str) -> TypeInfo: ...
	def GetDeclaredProperty(self, _: str) -> PropertyInfo: ...
	def GetDefaultMembers(self) -> List[MemberInfo]: ...
	def GetElementType(self) -> Type: ...
	def GetEnumName(self, _: object) -> str: ...
	def GetEnumNames(self) -> List[str]: ...
	def GetEnumUnderlyingType(self) -> Type: ...
	def GetEnumValues(self) -> List: ...

	def GetEvent(
			self,
			_: str,
			__: BindingFlags,
			) -> EventInfo: ...

	def GetEvents(
			self,
			_: BindingFlags,
			) -> List[EventInfo]: ...

	def GetField(
			self,
			_: str,
			__: BindingFlags,
			) -> FieldInfo: ...

	def GetFields(
			self,
			_: BindingFlags,
			) -> List[FieldInfo]: ...

	def GetGenericArguments(self) -> List[Type]: ...
	def GetGenericParameterConstraints(self) -> List[Type]: ...
	def GetGenericTypeDefinition(self) -> Type: ...
	def GetHashCode(self) -> int: ...
	def GetInterface(self, _: str, __: bool) -> Type: ...
	def GetInterfaceMap(self, _: Type) -> InterfaceMapping: ...
	def GetInterfaces(self) -> List[Type]: ...

	def GetMember(
			self,
			_: str,
			__: MemberTypes,
			___: BindingFlags,
			) -> List[MemberInfo]: ...

	def GetMembers(
			self,
			_: BindingFlags,
			) -> List[MemberInfo]: ...

	def GetMethod(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: CallingConventions,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> MethodInfo: ...

	def GetMethodImpl(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: CallingConventions,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> MethodInfo: ...

	def GetMethods(
			self,
			_: BindingFlags,
			) -> List[MethodInfo]: ...

	def GetNestedType(self, _: str, __: BindingFlags) -> Type: ...
	def GetNestedTypes(self, _: BindingFlags) -> List[Type]: ...

	def GetProperties(
			self,
			_: BindingFlags,
			) -> List[PropertyInfo]: ...

	def GetProperty(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: Type,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> PropertyInfo: ...

	def GetPropertyImpl(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: Type,
			_____: List[Type],
			______: List[ParameterModifier],
			) -> PropertyInfo: ...

	def GetType(self) -> Type: ...
	def GetTypeArray(self, _: List[object]) -> List[Type]: ...
	def GetTypeCode(self, _: Type) -> Any: ...
	def GetTypeCodeImpl(self) -> Any: ...
	def GetTypeFromCLSID(self, _: System.Guid, __: str, ___: bool) -> Type: ...
	def GetTypeFromHandle(self, _: System.RuntimeTypeHandle) -> Type: ...
	def GetTypeFromProgID(self, _: str, __: str, ___: bool) -> Type: ...
	def GetTypeHandle(self, _: object) -> System.RuntimeTypeHandle: ...

	@property
	def HasElementType(self): ...

	@HasElementType.setter
	def HasElementType(self, value): ...

	def HasElementTypeImpl(self) -> bool: ...

	@property
	def ImplementedInterfaces(self): ...

	@ImplementedInterfaces.setter
	def ImplementedInterfaces(self, value): ...

	def InvokeMember(
			self,
			_: str,
			__: BindingFlags,
			___: Binder,
			____: object,
			_____: List[object],
			______: List[ParameterModifier],
			_______: System.Globalization.CultureInfo,
			________: List[str],
			) -> object: ...

	@property
	def IsAbstract(self): ...

	@IsAbstract.setter
	def IsAbstract(self, value): ...

	@property
	def IsAnsiClass(self): ...

	@IsAnsiClass.setter
	def IsAnsiClass(self, value): ...

	@property
	def IsArray(self): ...

	@IsArray.setter
	def IsArray(self, value): ...

	def IsArrayImpl(self) -> bool: ...
	def IsAssignableFrom(self, _: Type) -> bool: ...

	@property
	def IsAutoClass(self): ...

	@IsAutoClass.setter
	def IsAutoClass(self, value): ...

	@property
	def IsAutoLayout(self): ...

	@IsAutoLayout.setter
	def IsAutoLayout(self, value): ...

	@property
	def IsByRef(self): ...

	@IsByRef.setter
	def IsByRef(self, value): ...

	def IsByRefImpl(self) -> bool: ...

	@property
	def IsCOMObject(self): ...

	@IsCOMObject.setter
	def IsCOMObject(self, value): ...

	def IsCOMObjectImpl(self) -> bool: ...

	@property
	def IsClass(self): ...

	@IsClass.setter
	def IsClass(self, value): ...

	@property
	def IsConstructedGenericType(self): ...

	@IsConstructedGenericType.setter
	def IsConstructedGenericType(self, value): ...

	@property
	def IsContextful(self): ...

	@IsContextful.setter
	def IsContextful(self, value): ...

	def IsContextfulImpl(self) -> bool: ...
	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsEnum(self): ...

	@IsEnum.setter
	def IsEnum(self, value): ...

	def IsEnumDefined(self, _: object) -> bool: ...
	def IsEquivalentTo(self, _: Type) -> bool: ...

	@property
	def IsExplicitLayout(self): ...

	@IsExplicitLayout.setter
	def IsExplicitLayout(self, value): ...

	@property
	def IsGenericParameter(self): ...

	@IsGenericParameter.setter
	def IsGenericParameter(self, value): ...

	@property
	def IsGenericType(self): ...

	@IsGenericType.setter
	def IsGenericType(self, value): ...

	@property
	def IsGenericTypeDefinition(self): ...

	@IsGenericTypeDefinition.setter
	def IsGenericTypeDefinition(self, value): ...

	@property
	def IsImport(self): ...

	@IsImport.setter
	def IsImport(self, value): ...

	def IsInstanceOfType(self, _: object) -> bool: ...

	@property
	def IsInterface(self): ...

	@IsInterface.setter
	def IsInterface(self, value): ...

	@property
	def IsLayoutSequential(self): ...

	@IsLayoutSequential.setter
	def IsLayoutSequential(self, value): ...

	@property
	def IsMarshalByRef(self): ...

	@IsMarshalByRef.setter
	def IsMarshalByRef(self, value): ...

	def IsMarshalByRefImpl(self) -> bool: ...

	@property
	def IsNested(self): ...

	@IsNested.setter
	def IsNested(self, value): ...

	@property
	def IsNestedAssembly(self): ...

	@IsNestedAssembly.setter
	def IsNestedAssembly(self, value): ...

	@property
	def IsNestedFamANDAssem(self): ...

	@IsNestedFamANDAssem.setter
	def IsNestedFamANDAssem(self, value): ...

	@property
	def IsNestedFamORAssem(self): ...

	@IsNestedFamORAssem.setter
	def IsNestedFamORAssem(self, value): ...

	@property
	def IsNestedFamily(self): ...

	@IsNestedFamily.setter
	def IsNestedFamily(self, value): ...

	@property
	def IsNestedPrivate(self): ...

	@IsNestedPrivate.setter
	def IsNestedPrivate(self, value): ...

	@property
	def IsNestedPublic(self): ...

	@IsNestedPublic.setter
	def IsNestedPublic(self, value): ...

	@property
	def IsNotPublic(self): ...

	@IsNotPublic.setter
	def IsNotPublic(self, value): ...

	@property
	def IsPointer(self): ...

	@IsPointer.setter
	def IsPointer(self, value): ...

	def IsPointerImpl(self) -> bool: ...

	@property
	def IsPrimitive(self): ...

	@IsPrimitive.setter
	def IsPrimitive(self, value): ...

	def IsPrimitiveImpl(self) -> bool: ...

	@property
	def IsPublic(self): ...

	@IsPublic.setter
	def IsPublic(self, value): ...

	@property
	def IsSealed(self): ...

	@IsSealed.setter
	def IsSealed(self, value): ...

	@property
	def IsSecurityCritical(self): ...

	@IsSecurityCritical.setter
	def IsSecurityCritical(self, value): ...

	@property
	def IsSecuritySafeCritical(self): ...

	@IsSecuritySafeCritical.setter
	def IsSecuritySafeCritical(self, value): ...

	@property
	def IsSecurityTransparent(self): ...

	@IsSecurityTransparent.setter
	def IsSecurityTransparent(self, value): ...

	@property
	def IsSerializable(self): ...

	@IsSerializable.setter
	def IsSerializable(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	def IsSubclassOf(self, _: Type) -> bool: ...

	@property
	def IsUnicodeClass(self): ...

	@IsUnicodeClass.setter
	def IsUnicodeClass(self, value): ...

	@property
	def IsValueType(self): ...

	@IsValueType.setter
	def IsValueType(self, value): ...

	def IsValueTypeImpl(self) -> bool: ...

	@property
	def IsVisible(self): ...

	@IsVisible.setter
	def IsVisible(self, value): ...

	def MakeArrayType(self, _: int) -> Type: ...
	def MakeByRefType(self) -> Type: ...
	def MakeGenericType(self, _: List[Type]) -> Type: ...
	def MakePointerType(self) -> Type: ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	def Missing(self, *args, **kwargs) -> Any: ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def Namespace(self): ...

	@Namespace.setter
	def Namespace(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def ReflectionOnlyGetType(self, _: str, __: bool, ___: bool) -> Type: ...

	@property
	def StructLayoutAttribute(self): ...

	@StructLayoutAttribute.setter
	def StructLayoutAttribute(self, value): ...

	def ToString(self) -> str: ...

	@property
	def TypeHandle(self): ...

	@TypeHandle.setter
	def TypeHandle(self, value): ...

	@property
	def TypeInitializer(self): ...

	@TypeInitializer.setter
	def TypeInitializer(self, value): ...

	@property
	def UnderlyingSystemType(self): ...

	@UnderlyingSystemType.setter
	def UnderlyingSystemType(self, value): ...

	def get_Assembly(self) -> Assembly: ...
	def get_AssemblyQualifiedName(self) -> str: ...
	def get_Attributes(self) -> TypeAttributes: ...
	def get_BaseType(self) -> Type: ...
	def get_ContainsGenericParameters(self) -> bool: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaredConstructors(self) -> List[ConstructorInfo]: ...
	def get_DeclaredEvents(self) -> List[EventInfo]: ...
	def get_DeclaredFields(self) -> List[FieldInfo]: ...
	def get_DeclaredMembers(self) -> List[MemberInfo]: ...
	def get_DeclaredMethods(self) -> List[MethodInfo]: ...
	def get_DeclaredNestedTypes(self) -> List[TypeInfo]: ...
	def get_DeclaredProperties(self) -> List[PropertyInfo]: ...
	def get_DeclaringMethod(self) -> MethodBase: ...
	def get_DeclaringType(self) -> Type: ...
	def get_DefaultBinder(self) -> Binder: ...
	def get_FullName(self) -> str: ...
	def get_GUID(self) -> System.Guid: ...
	def get_GenericParameterAttributes(self) -> GenericParameterAttributes: ...
	def get_GenericParameterPosition(self) -> int: ...
	def get_GenericTypeArguments(self) -> List[Type]: ...
	def get_GenericTypeParameters(self) -> List[Type]: ...
	def get_HasElementType(self) -> bool: ...
	def get_ImplementedInterfaces(self) -> List[Type]: ...
	def get_IsAbstract(self) -> bool: ...
	def get_IsAnsiClass(self) -> bool: ...
	def get_IsArray(self) -> bool: ...
	def get_IsAutoClass(self) -> bool: ...
	def get_IsAutoLayout(self) -> bool: ...
	def get_IsByRef(self) -> bool: ...
	def get_IsCOMObject(self) -> bool: ...
	def get_IsClass(self) -> bool: ...
	def get_IsConstructedGenericType(self) -> bool: ...
	def get_IsContextful(self) -> bool: ...
	def get_IsEnum(self) -> bool: ...
	def get_IsExplicitLayout(self) -> bool: ...
	def get_IsGenericParameter(self) -> bool: ...
	def get_IsGenericType(self) -> bool: ...
	def get_IsGenericTypeDefinition(self) -> bool: ...
	def get_IsImport(self) -> bool: ...
	def get_IsInterface(self) -> bool: ...
	def get_IsLayoutSequential(self) -> bool: ...
	def get_IsMarshalByRef(self) -> bool: ...
	def get_IsNested(self) -> bool: ...
	def get_IsNestedAssembly(self) -> bool: ...
	def get_IsNestedFamANDAssem(self) -> bool: ...
	def get_IsNestedFamORAssem(self) -> bool: ...
	def get_IsNestedFamily(self) -> bool: ...
	def get_IsNestedPrivate(self) -> bool: ...
	def get_IsNestedPublic(self) -> bool: ...
	def get_IsNotPublic(self) -> bool: ...
	def get_IsPointer(self) -> bool: ...
	def get_IsPrimitive(self) -> bool: ...
	def get_IsPublic(self) -> bool: ...
	def get_IsSealed(self) -> bool: ...
	def get_IsSecurityCritical(self) -> bool: ...
	def get_IsSecuritySafeCritical(self) -> bool: ...
	def get_IsSecurityTransparent(self) -> bool: ...
	def get_IsSerializable(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_IsUnicodeClass(self) -> bool: ...
	def get_IsValueType(self) -> bool: ...
	def get_IsVisible(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_Namespace(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...
	def get_StructLayoutAttribute(self) -> System.Runtime.InteropServices.StructLayoutAttribute: ...
	def get_TypeHandle(self) -> System.RuntimeTypeHandle: ...
	def get_TypeInitializer(self) -> ConstructorInfo: ...
	def get_UnderlyingSystemType(self) -> Type: ...
	def op_Equality(self, _: Type, __: Type) -> bool: ...
	def op_Inequality(self, _: Type, __: Type) -> bool: ...

class TypeFilter:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Type, __: object, ___: Any, ____: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> bool: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class Assembly:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def CodeBase(self): ...

	@CodeBase.setter
	def CodeBase(self, value): ...

	def CreateInstance(
			self,
			_: str,
			__: bool,
			___: BindingFlags,
			____: Binder,
			_____: List[object],
			______: System.Globalization.CultureInfo,
			_______: List[object],
			) -> object: ...

	def CreateQualifiedName(self, _: str, __: str) -> str: ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DefinedTypes(self): ...

	@DefinedTypes.setter
	def DefinedTypes(self, value): ...

	@property
	def EntryPoint(self): ...

	@EntryPoint.setter
	def EntryPoint(self, value): ...

	def Equals(self, _: object) -> bool: ...

	@property
	def EscapedCodeBase(self): ...

	@EscapedCodeBase.setter
	def EscapedCodeBase(self, value): ...

	@property
	def Evidence(self): ...

	@Evidence.setter
	def Evidence(self, value): ...

	@property
	def ExportedTypes(self): ...

	@ExportedTypes.setter
	def ExportedTypes(self, value): ...

	def Finalize(self) -> None: ...

	@property
	def FullName(self): ...

	@FullName.setter
	def FullName(self, value): ...

	def GetAssembly(self, _: Type) -> Assembly: ...
	def GetCallingAssembly(self) -> Assembly: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetEntryAssembly(self) -> Assembly: ...
	def GetExecutingAssembly(self) -> Assembly: ...
	def GetExportedTypes(self) -> List[Type]: ...
	def GetFile(self, _: str) -> System.IO.FileStream: ...
	def GetFiles(self, _: bool) -> List[System.IO.FileStream]: ...
	def GetHashCode(self) -> int: ...
	def GetLoadedModules(self, _: bool) -> List[Module]: ...
	def GetManifestResourceInfo(self, _: str) -> ManifestResourceInfo: ...
	def GetManifestResourceNames(self) -> List[str]: ...
	def GetManifestResourceStream(self, _: Type, __: str) -> System.IO.Stream: ...
	def GetModule(self, _: str) -> Module: ...
	def GetModules(self, _: bool) -> List[Module]: ...
	def GetName(self, _: bool) -> AssemblyName: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetReferencedAssemblies(self) -> List[AssemblyName]: ...

	def GetSatelliteAssembly(
			self,
			_: System.Globalization.CultureInfo,
			__: System.Version,
			) -> Assembly: ...

	def GetType(self) -> Type: ...
	def GetTypes(self) -> List[Type]: ...

	@property
	def GlobalAssemblyCache(self): ...

	@GlobalAssemblyCache.setter
	def GlobalAssemblyCache(self, value): ...

	@property
	def HostContext(self): ...

	@HostContext.setter
	def HostContext(self, value): ...

	@property
	def ImageRuntimeVersion(self): ...

	@ImageRuntimeVersion.setter
	def ImageRuntimeVersion(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsDynamic(self): ...

	@IsDynamic.setter
	def IsDynamic(self, value): ...

	@property
	def IsFullyTrusted(self): ...

	@IsFullyTrusted.setter
	def IsFullyTrusted(self, value): ...

	def Load(
			self,
			_: str,
			__: System.Security.Policy.Evidence,
			) -> Assembly: ...

	def LoadFile(
			self,
			_: str,
			__: System.Security.Policy.Evidence,
			) -> Assembly: ...

	def LoadFrom(
			self,
			_: str,
			__: System.Security.Policy.Evidence,
			___: List[bytes],
			____: System.Configuration.Assemblies.AssemblyHashAlgorithm,
			) -> Assembly: ...

	def LoadModule(
			self,
			_: str,
			__: List[bytes],
			___: List[bytes],
			) -> Module: ...

	def LoadWithPartialName(
			self,
			_: str,
			__: System.Security.Policy.Evidence,
			) -> Assembly: ...

	@property
	def Location(self): ...

	@Location.setter
	def Location(self, value): ...

	@property
	def ManifestModule(self): ...

	@ManifestModule.setter
	def ManifestModule(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def ModuleResolve(self, *args, **kwargs) -> Any: ...

	@property
	def Modules(self): ...

	@Modules.setter
	def Modules(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def PermissionSet(self): ...

	@PermissionSet.setter
	def PermissionSet(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectionOnly(self): ...

	@ReflectionOnly.setter
	def ReflectionOnly(self, value): ...

	def ReflectionOnlyLoad(self, _: str) -> Assembly: ...
	def ReflectionOnlyLoadFrom(self, _: str) -> Assembly: ...

	@property
	def SecurityRuleSet(self): ...

	@SecurityRuleSet.setter
	def SecurityRuleSet(self, value): ...

	def ToString(self) -> str: ...
	def UnsafeLoadFrom(self, _: str) -> Assembly: ...
	def add_ModuleResolve(self, _: ModuleResolveEventHandler) -> None: ...
	def get_CodeBase(self) -> str: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DefinedTypes(self) -> List[TypeInfo]: ...
	def get_EntryPoint(self) -> MethodInfo: ...
	def get_EscapedCodeBase(self) -> str: ...
	def get_Evidence(self) -> System.Security.Policy.Evidence: ...
	def get_ExportedTypes(self) -> List[Type]: ...
	def get_FullName(self) -> str: ...
	def get_GlobalAssemblyCache(self) -> bool: ...
	def get_HostContext(self) -> int: ...
	def get_ImageRuntimeVersion(self) -> str: ...
	def get_IsDynamic(self) -> bool: ...
	def get_IsFullyTrusted(self) -> bool: ...
	def get_Location(self) -> str: ...
	def get_ManifestModule(self) -> Module: ...
	def get_Modules(self) -> List[Module]: ...
	def get_PermissionSet(self) -> System.Security.PermissionSet: ...
	def get_ReflectionOnly(self) -> bool: ...
	def get_SecurityRuleSet(self) -> System.Security.SecurityRuleSet: ...

	def op_Equality(
			self,
			_: Assembly,
			__: Assembly,
			) -> bool: ...

	def op_Inequality(
			self,
			_: Assembly,
			__: Assembly,
			) -> bool: ...

	def remove_ModuleResolve(
			self,
			_: ModuleResolveEventHandler,
			) -> None: ...

class EventAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def RTSpecialName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def SpecialName(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class AssemblyContentType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Default(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def WindowsRuntime(self, *args, **kwargs) -> Any: ...

class ExceptionHandlingClauseOptions:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Clause(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Fault(self, *args, **kwargs) -> Any: ...
	def Filter(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Finally(self, *args, **kwargs) -> Any: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class PropertyAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasDefault(self, *args, **kwargs) -> Any: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def RTSpecialName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def Reserved2(self, *args, **kwargs) -> Any: ...
	def Reserved3(self, *args, **kwargs) -> Any: ...
	def Reserved4(self, *args, **kwargs) -> Any: ...
	def SpecialName(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class PortableExecutableKinds:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def ILOnly(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def NotAPortableExecutableImage(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def PE32Plus(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Preferred32Bit(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Required32Bit(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unmanaged32Bit(self, *args, **kwargs) -> Any: ...

class ImageFileMachine:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AMD64(self, *args, **kwargs) -> Any: ...
	def ARM(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IA64(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def I386(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class CustomAttributeNamedArgument:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsField(self): ...

	@IsField.setter
	def IsField(self, value): ...

	@property
	def MemberInfo(self): ...

	@MemberInfo.setter
	def MemberInfo(self, value): ...

	@property
	def MemberName(self): ...

	@MemberName.setter
	def MemberName(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def TypedValue(self): ...

	@TypedValue.setter
	def TypedValue(self, value): ...

	def get_IsField(self) -> bool: ...
	def get_MemberInfo(self) -> MemberInfo: ...
	def get_MemberName(self) -> str: ...
	def get_TypedValue(self) -> CustomAttributeTypedArgument: ...

	def op_Equality(
			self,
			_: CustomAttributeNamedArgument,
			__: CustomAttributeNamedArgument,
			) -> bool: ...

	def op_Inequality(
			self,
			_: CustomAttributeNamedArgument,
			__: CustomAttributeNamedArgument,
			) -> bool: ...

class ConstructorInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CallingConvention(self): ...

	@CallingConvention.setter
	def CallingConvention(self, value): ...

	def ConstructorName(self, *args, **kwargs) -> Any: ...

	@property
	def ContainsGenericParameters(self): ...

	@ContainsGenericParameters.setter
	def ContainsGenericParameters(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetCurrentMethod(self) -> MethodBase: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetGenericArguments(self) -> List[Type]: ...
	def GetHashCode(self) -> int: ...
	def GetMethodBody(self) -> MethodBody: ...

	def GetMethodFromHandle(
			self,
			_: System.RuntimeMethodHandle,
			__: System.RuntimeTypeHandle,
			) -> MethodBase: ...

	def GetMethodImplementationFlags(self) -> MethodImplAttributes: ...
	def GetParameters(self) -> List[ParameterInfo]: ...
	def GetType(self) -> Type: ...

	def Invoke(
			self,
			_: object,
			__: BindingFlags,
			___: Binder,
			____: List[object],
			_____: System.Globalization.CultureInfo,
			) -> object: ...

	@property
	def IsAbstract(self): ...

	@IsAbstract.setter
	def IsAbstract(self, value): ...

	@property
	def IsAssembly(self): ...

	@IsAssembly.setter
	def IsAssembly(self, value): ...

	@property
	def IsConstructor(self): ...

	@IsConstructor.setter
	def IsConstructor(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsFamily(self): ...

	@IsFamily.setter
	def IsFamily(self, value): ...

	@property
	def IsFamilyAndAssembly(self): ...

	@IsFamilyAndAssembly.setter
	def IsFamilyAndAssembly(self, value): ...

	@property
	def IsFamilyOrAssembly(self): ...

	@IsFamilyOrAssembly.setter
	def IsFamilyOrAssembly(self, value): ...

	@property
	def IsFinal(self): ...

	@IsFinal.setter
	def IsFinal(self, value): ...

	@property
	def IsGenericMethod(self): ...

	@IsGenericMethod.setter
	def IsGenericMethod(self, value): ...

	@property
	def IsGenericMethodDefinition(self): ...

	@IsGenericMethodDefinition.setter
	def IsGenericMethodDefinition(self, value): ...

	@property
	def IsHideBySig(self): ...

	@IsHideBySig.setter
	def IsHideBySig(self, value): ...

	@property
	def IsPrivate(self): ...

	@IsPrivate.setter
	def IsPrivate(self, value): ...

	@property
	def IsPublic(self): ...

	@IsPublic.setter
	def IsPublic(self, value): ...

	@property
	def IsSecurityCritical(self): ...

	@IsSecurityCritical.setter
	def IsSecurityCritical(self, value): ...

	@property
	def IsSecuritySafeCritical(self): ...

	@IsSecuritySafeCritical.setter
	def IsSecuritySafeCritical(self, value): ...

	@property
	def IsSecurityTransparent(self): ...

	@IsSecurityTransparent.setter
	def IsSecurityTransparent(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def IsStatic(self): ...

	@IsStatic.setter
	def IsStatic(self, value): ...

	@property
	def IsVirtual(self): ...

	@IsVirtual.setter
	def IsVirtual(self, value): ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def MethodHandle(self): ...

	@MethodHandle.setter
	def MethodHandle(self, value): ...

	@property
	def MethodImplementationFlags(self): ...

	@MethodImplementationFlags.setter
	def MethodImplementationFlags(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def ToString(self) -> str: ...
	def TypeConstructorName(self, *args, **kwargs) -> Any: ...
	def get_Attributes(self) -> MethodAttributes: ...
	def get_CallingConvention(self) -> CallingConventions: ...
	def get_ContainsGenericParameters(self) -> bool: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_IsAbstract(self) -> bool: ...
	def get_IsAssembly(self) -> bool: ...
	def get_IsConstructor(self) -> bool: ...
	def get_IsFamily(self) -> bool: ...
	def get_IsFamilyAndAssembly(self) -> bool: ...
	def get_IsFamilyOrAssembly(self) -> bool: ...
	def get_IsFinal(self) -> bool: ...
	def get_IsGenericMethod(self) -> bool: ...
	def get_IsGenericMethodDefinition(self) -> bool: ...
	def get_IsHideBySig(self) -> bool: ...
	def get_IsPrivate(self) -> bool: ...
	def get_IsPublic(self) -> bool: ...
	def get_IsSecurityCritical(self) -> bool: ...
	def get_IsSecuritySafeCritical(self) -> bool: ...
	def get_IsSecurityTransparent(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_IsStatic(self) -> bool: ...
	def get_IsVirtual(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_MethodHandle(self) -> System.RuntimeMethodHandle: ...
	def get_MethodImplementationFlags(self) -> MethodImplAttributes: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...

	def op_Equality(
			self,
			_: ConstructorInfo,
			__: ConstructorInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: ConstructorInfo,
			__: ConstructorInfo,
			) -> bool: ...

class CustomAttributeTypedArgument:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def ArgumentType(self): ...

	@ArgumentType.setter
	def ArgumentType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def get_ArgumentType(self) -> Type: ...
	def get_Value(self) -> object: ...

	def op_Equality(
			self,
			_: CustomAttributeTypedArgument,
			__: CustomAttributeTypedArgument,
			) -> bool: ...

	def op_Inequality(
			self,
			_: CustomAttributeTypedArgument,
			__: CustomAttributeTypedArgument,
			) -> bool: ...

class ExceptionHandlingClause:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def CatchType(self): ...

	@CatchType.setter
	def CatchType(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def FilterOffset(self): ...

	@FilterOffset.setter
	def FilterOffset(self, value): ...

	def Finalize(self) -> None: ...

	@property
	def Flags(self): ...

	@Flags.setter
	def Flags(self, value): ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HandlerLength(self): ...

	@HandlerLength.setter
	def HandlerLength(self, value): ...

	@property
	def HandlerOffset(self): ...

	@HandlerOffset.setter
	def HandlerOffset(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def TryLength(self): ...

	@TryLength.setter
	def TryLength(self, value): ...

	@property
	def TryOffset(self): ...

	@TryOffset.setter
	def TryOffset(self, value): ...

	def get_CatchType(self) -> Type: ...
	def get_FilterOffset(self) -> int: ...
	def get_Flags(self) -> ExceptionHandlingClauseOptions: ...
	def get_HandlerLength(self) -> int: ...
	def get_HandlerOffset(self) -> int: ...
	def get_TryLength(self) -> int: ...
	def get_TryOffset(self) -> int: ...

class LocalVariableInfo:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsPinned(self): ...

	@IsPinned.setter
	def IsPinned(self, value): ...

	@property
	def LocalIndex(self): ...

	@LocalIndex.setter
	def LocalIndex(self, value): ...

	@property
	def LocalType(self): ...

	@LocalType.setter
	def LocalType(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_IsPinned(self) -> bool: ...
	def get_LocalIndex(self) -> int: ...
	def get_LocalType(self) -> Type: ...

class MethodAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Abstract(self, *args, **kwargs) -> Any: ...
	def Assembly(self, *args, **kwargs) -> Any: ...
	def CheckAccessOnOverride(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def FamANDAssem(self, *args, **kwargs) -> Any: ...
	def FamORAssem(self, *args, **kwargs) -> Any: ...
	def Family(self, *args, **kwargs) -> Any: ...
	def Final(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def HasSecurity(self, *args, **kwargs) -> Any: ...
	def HideBySig(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberAccessMask(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def NewSlot(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def PinvokeImpl(self, *args, **kwargs) -> Any: ...
	def Private(self, *args, **kwargs) -> Any: ...
	def PrivateScope(self, *args, **kwargs) -> Any: ...
	def Public(self, *args, **kwargs) -> Any: ...
	def RTSpecialName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RequireSecObject(self, *args, **kwargs) -> Any: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def ReuseSlot(self, *args, **kwargs) -> Any: ...
	def SpecialName(self, *args, **kwargs) -> Any: ...
	def Static(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def UnmanagedExport(self, *args, **kwargs) -> Any: ...
	def Virtual(self, *args, **kwargs) -> Any: ...
	def VtableLayoutMask(self, *args, **kwargs) -> Any: ...

class CallingConventions:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Any(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def ExplicitThis(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def HasThis(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Standard(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def VarArgs(self, *args, **kwargs) -> Any: ...

class CustomAttributeData:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def AttributeType(self): ...

	@AttributeType.setter
	def AttributeType(self, value): ...

	@property
	def Constructor(self): ...

	@Constructor.setter
	def Constructor(self, value): ...

	@property
	def ConstructorArguments(self): ...

	@ConstructorArguments.setter
	def ConstructorArguments(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...

	def GetCustomAttributes(
			self,
			_: Module,
			) -> List[CustomAttributeData]: ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def NamedArguments(self): ...

	@NamedArguments.setter
	def NamedArguments(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_AttributeType(self) -> Type: ...
	def get_Constructor(self) -> ConstructorInfo: ...
	def get_ConstructorArguments(self) -> List[CustomAttributeTypedArgument]: ...
	def get_NamedArguments(self) -> List[CustomAttributeNamedArgument]: ...

class MethodBody:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def ExceptionHandlingClauses(self): ...

	@ExceptionHandlingClauses.setter
	def ExceptionHandlingClauses(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetILAsByteArray(self) -> List[bytes]: ...
	def GetType(self) -> Type: ...

	@property
	def InitLocals(self): ...

	@InitLocals.setter
	def InitLocals(self, value): ...

	@property
	def LocalSignatureMetadataToken(self): ...

	@LocalSignatureMetadataToken.setter
	def LocalSignatureMetadataToken(self, value): ...

	@property
	def LocalVariables(self): ...

	@LocalVariables.setter
	def LocalVariables(self, value): ...

	@property
	def MaxStackSize(self): ...

	@MaxStackSize.setter
	def MaxStackSize(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_ExceptionHandlingClauses(self) -> List[ExceptionHandlingClause]: ...
	def get_InitLocals(self) -> bool: ...
	def get_LocalSignatureMetadataToken(self) -> int: ...
	def get_LocalVariables(self) -> List[LocalVariableInfo]: ...
	def get_MaxStackSize(self) -> int: ...

class ParameterInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DefaultValue(self): ...

	@DefaultValue.setter
	def DefaultValue(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetHashCode(self) -> int: ...
	def GetOptionalCustomModifiers(self) -> List[Type]: ...
	def GetRealObject(self, _: System.Runtime.Serialization.StreamingContext) -> object: ...
	def GetRequiredCustomModifiers(self) -> List[Type]: ...
	def GetType(self) -> Type: ...

	@property
	def HasDefaultValue(self): ...

	@HasDefaultValue.setter
	def HasDefaultValue(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsIn(self): ...

	@IsIn.setter
	def IsIn(self, value): ...

	@property
	def IsLcid(self): ...

	@IsLcid.setter
	def IsLcid(self, value): ...

	@property
	def IsOptional(self): ...

	@IsOptional.setter
	def IsOptional(self, value): ...

	@property
	def IsOut(self): ...

	@IsOut.setter
	def IsOut(self, value): ...

	@property
	def IsRetval(self): ...

	@IsRetval.setter
	def IsRetval(self, value): ...

	@property
	def Member(self): ...

	@Member.setter
	def Member(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ParameterType(self): ...

	@ParameterType.setter
	def ParameterType(self, value): ...

	@property
	def Position(self): ...

	@Position.setter
	def Position(self, value): ...

	@property
	def RawDefaultValue(self): ...

	@RawDefaultValue.setter
	def RawDefaultValue(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_Attributes(self) -> ParameterAttributes: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DefaultValue(self) -> object: ...
	def get_HasDefaultValue(self) -> bool: ...
	def get_IsIn(self) -> bool: ...
	def get_IsLcid(self) -> bool: ...
	def get_IsOptional(self) -> bool: ...
	def get_IsOut(self) -> bool: ...
	def get_IsRetval(self) -> bool: ...
	def get_Member(self) -> MemberInfo: ...
	def get_MetadataToken(self) -> int: ...
	def get_Name(self) -> str: ...
	def get_ParameterType(self) -> Type: ...
	def get_Position(self) -> int: ...
	def get_RawDefaultValue(self) -> object: ...

class MethodImplAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AggressiveInlining(self, *args, **kwargs) -> Any: ...
	def CodeTypeMask(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def ForwardRef(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IL(self, *args, **kwargs) -> Any: ...
	def InternalCall(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Managed(self, *args, **kwargs) -> Any: ...
	def ManagedMask(self, *args, **kwargs) -> Any: ...
	def MaxMethodImplVal(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Native(self, *args, **kwargs) -> Any: ...
	def NoInlining(self, *args, **kwargs) -> Any: ...
	def NoOptimization(self, *args, **kwargs) -> Any: ...
	def OPTIL(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def PreserveSig(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Runtime(self, *args, **kwargs) -> Any: ...
	def SecurityMitigations(self, *args, **kwargs) -> Any: ...
	def Synchronized(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unmanaged(self, *args, **kwargs) -> Any: ...

class BindingFlags:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def CreateInstance(self, *args, **kwargs) -> Any: ...
	def DeclaredOnly(self, *args, **kwargs) -> Any: ...
	def Default(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def ExactBinding(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def FlattenHierarchy(self, *args, **kwargs) -> Any: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetField(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetProperty(self, *args, **kwargs) -> Any: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IgnoreCase(self, *args, **kwargs) -> Any: ...
	def IgnoreReturn(self, *args, **kwargs) -> Any: ...
	def Instance(self, *args, **kwargs) -> Any: ...
	def InvokeMethod(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def NonPublic(self, *args, **kwargs) -> Any: ...
	def OptionalParamBinding(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Public(self, *args, **kwargs) -> Any: ...
	def PutDispProperty(self, *args, **kwargs) -> Any: ...
	def PutRefDispProperty(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetField(self, *args, **kwargs) -> Any: ...
	def SetProperty(self, *args, **kwargs) -> Any: ...
	def Static(self, *args, **kwargs) -> Any: ...
	def SuppressChangeType(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class Binder:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BindToField(
			self,
			_: BindingFlags,
			__: List[FieldInfo],
			___: object,
			____: System.Globalization.CultureInfo,
			) -> FieldInfo: ...

	def BindToMethod(
			self,
			_: BindingFlags,
			__: List[MethodBase],
			___: List[object],
			____: List[ParameterModifier],
			_____: System.Globalization.CultureInfo,
			______: List[str],
			_______: object,
			) -> MethodBase: ...

	def ChangeType(
			self,
			_: object,
			__: Type,
			___: System.Globalization.CultureInfo,
			) -> object: ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReorderArgumentArray(self, _: List[object], __: object) -> None: ...

	def SelectMethod(
			self,
			_: BindingFlags,
			__: List[MethodBase],
			___: List[Type],
			____: List[ParameterModifier],
			) -> MethodBase: ...

	def SelectProperty(
			self,
			_: BindingFlags,
			__: List[PropertyInfo],
			___: Type,
			____: List[Type],
			_____: List[ParameterModifier],
			) -> PropertyInfo: ...

	def ToString(self) -> str: ...

class FieldAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Assembly(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def FamANDAssem(self, *args, **kwargs) -> Any: ...
	def FamORAssem(self, *args, **kwargs) -> Any: ...
	def Family(self, *args, **kwargs) -> Any: ...
	def FieldAccessMask(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasDefault(self, *args, **kwargs) -> Any: ...
	def HasFieldMarshal(self, *args, **kwargs) -> Any: ...
	def HasFieldRVA(self, *args, **kwargs) -> Any: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def InitOnly(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Literal(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def NotSerialized(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def PinvokeImpl(self, *args, **kwargs) -> Any: ...
	def Private(self, *args, **kwargs) -> Any: ...
	def PrivateScope(self, *args, **kwargs) -> Any: ...
	def Public(self, *args, **kwargs) -> Any: ...
	def RTSpecialName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def SpecialName(self, *args, **kwargs) -> Any: ...
	def Static(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class ModuleResolveEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: System.ResolveEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> Module: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...

	def Invoke(
			self,
			_: object,
			__: System.ResolveEventArgs,
			) -> Module: ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class MemberTypes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def All(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Constructor(self, *args, **kwargs) -> Any: ...
	def Custom(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Event(self, *args, **kwargs) -> Any: ...
	def Field(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Method(self, *args, **kwargs) -> Any: ...
	def NestedType(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Property(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def TypeInfo(self, *args, **kwargs) -> Any: ...

class MemberFilter:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: MemberInfo,
			__: object,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> bool: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: MemberInfo, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class TypeAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Abstract(self, *args, **kwargs) -> Any: ...
	def AnsiClass(self, *args, **kwargs) -> Any: ...
	def AutoClass(self, *args, **kwargs) -> Any: ...
	def AutoLayout(self, *args, **kwargs) -> Any: ...
	def BeforeFieldInit(self, *args, **kwargs) -> Any: ...
	def Class(self, *args, **kwargs) -> Any: ...
	def ClassSemanticsMask(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def CustomFormatClass(self, *args, **kwargs) -> Any: ...
	def CustomFormatMask(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def ExplicitLayout(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def HasSecurity(self, *args, **kwargs) -> Any: ...
	def Import(self, *args, **kwargs) -> Any: ...
	def Interface(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def LayoutMask(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def NestedAssembly(self, *args, **kwargs) -> Any: ...
	def NestedFamANDAssem(self, *args, **kwargs) -> Any: ...
	def NestedFamORAssem(self, *args, **kwargs) -> Any: ...
	def NestedFamily(self, *args, **kwargs) -> Any: ...
	def NestedPrivate(self, *args, **kwargs) -> Any: ...
	def NestedPublic(self, *args, **kwargs) -> Any: ...
	def NotPublic(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Public(self, *args, **kwargs) -> Any: ...
	def RTSpecialName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def Sealed(self, *args, **kwargs) -> Any: ...
	def SequentialLayout(self, *args, **kwargs) -> Any: ...
	def Serializable(self, *args, **kwargs) -> Any: ...
	def SpecialName(self, *args, **kwargs) -> Any: ...
	def StringFormatMask(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def UnicodeClass(self, *args, **kwargs) -> Any: ...
	def VisibilityMask(self, *args, **kwargs) -> Any: ...
	def WindowsRuntime(self, *args, **kwargs) -> Any: ...

class EventInfo:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AddEventHandler(self, _: object, __: Any) -> None: ...

	@property
	def AddMethod(self): ...

	@AddMethod.setter
	def AddMethod(self, value): ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...

	@property
	def EventHandlerType(self): ...

	@EventHandlerType.setter
	def EventHandlerType(self, value): ...

	def Finalize(self) -> None: ...
	def GetAddMethod(self, _: bool) -> MethodInfo: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetHashCode(self) -> int: ...
	def GetOtherMethods(self, _: bool) -> List[MethodInfo]: ...
	def GetRaiseMethod(self, _: bool) -> MethodInfo: ...
	def GetRemoveMethod(self, _: bool) -> MethodInfo: ...
	def GetType(self) -> Type: ...
	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsMulticast(self): ...

	@IsMulticast.setter
	def IsMulticast(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def RaiseMethod(self): ...

	@RaiseMethod.setter
	def RaiseMethod(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def RemoveEventHandler(self, _: object, __: Any) -> None: ...

	@property
	def RemoveMethod(self): ...

	@RemoveMethod.setter
	def RemoveMethod(self, value): ...

	def ToString(self) -> str: ...
	def get_AddMethod(self) -> MethodInfo: ...
	def get_Attributes(self) -> EventAttributes: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_EventHandlerType(self) -> Type: ...
	def get_IsMulticast(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_RaiseMethod(self) -> MethodInfo: ...
	def get_ReflectedType(self) -> Type: ...
	def get_RemoveMethod(self) -> MethodInfo: ...

	def op_Equality(
			self,
			_: EventInfo,
			__: EventInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: EventInfo,
			__: EventInfo,
			) -> bool: ...

class InterfaceMapping:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class ICustomAttributeProvider:
	def __init__(self, *args, **kwargs) -> Any: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def IsDefined(self, _: Type, __: bool) -> bool: ...

class ParameterModifier:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_Item(self, _: int) -> bool: ...
	def set_Item(self, _: int, __: bool) -> None: ...

class PropertyInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CanRead(self): ...

	@CanRead.setter
	def CanRead(self, value): ...

	@property
	def CanWrite(self): ...

	@CanWrite.setter
	def CanWrite(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetAccessors(self, _: bool) -> List[MethodInfo]: ...
	def GetConstantValue(self) -> object: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...
	def GetGetMethod(self, _: bool) -> MethodInfo: ...
	def GetHashCode(self) -> int: ...
	def GetIndexParameters(self) -> List[ParameterInfo]: ...

	@property
	def GetMethod(self): ...

	@GetMethod.setter
	def GetMethod(self, value): ...

	def GetOptionalCustomModifiers(self) -> List[Type]: ...
	def GetRawConstantValue(self) -> object: ...
	def GetRequiredCustomModifiers(self) -> List[Type]: ...
	def GetSetMethod(self, _: bool) -> MethodInfo: ...
	def GetType(self) -> Type: ...

	def GetValue(
			self,
			_: object,
			__: BindingFlags,
			___: Binder,
			____: List[object],
			_____: System.Globalization.CultureInfo,
			) -> object: ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def PropertyType(self): ...

	@PropertyType.setter
	def PropertyType(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	@property
	def SetMethod(self): ...

	@SetMethod.setter
	def SetMethod(self, value): ...

	def SetValue(
			self,
			_: object,
			__: object,
			___: BindingFlags,
			____: Binder,
			_____: List[object],
			______: System.Globalization.CultureInfo,
			) -> None: ...

	def ToString(self) -> str: ...
	def get_Attributes(self) -> PropertyAttributes: ...
	def get_CanRead(self) -> bool: ...
	def get_CanWrite(self) -> bool: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_GetMethod(self) -> MethodInfo: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_PropertyType(self) -> Type: ...
	def get_ReflectedType(self) -> Type: ...
	def get_SetMethod(self) -> MethodInfo: ...

	def op_Equality(
			self,
			_: PropertyInfo,
			__: PropertyInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: PropertyInfo,
			__: PropertyInfo,
			) -> bool: ...

class ParameterAttributes:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasDefault(self, *args, **kwargs) -> Any: ...
	def HasFieldMarshal(self, *args, **kwargs) -> Any: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def In(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Lcid(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Optional(self, *args, **kwargs) -> Any: ...
	def Out(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ReservedMask(self, *args, **kwargs) -> Any: ...
	def Reserved3(self, *args, **kwargs) -> Any: ...
	def Reserved4(self, *args, **kwargs) -> Any: ...
	def Retval(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class FieldInfo:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def CustomAttributes(self): ...

	@CustomAttributes.setter
	def CustomAttributes(self, value): ...

	@property
	def DeclaringType(self): ...

	@DeclaringType.setter
	def DeclaringType(self, value): ...

	def Equals(self, _: object) -> bool: ...

	@property
	def FieldHandle(self): ...

	@FieldHandle.setter
	def FieldHandle(self, value): ...

	@property
	def FieldType(self): ...

	@FieldType.setter
	def FieldType(self, value): ...

	def Finalize(self) -> None: ...
	def GetCustomAttributes(self, _: Type, __: bool) -> List[object]: ...
	def GetCustomAttributesData(self) -> List[CustomAttributeData]: ...

	def GetFieldFromHandle(
			self,
			_: System.RuntimeFieldHandle,
			__: System.RuntimeTypeHandle,
			) -> FieldInfo: ...

	def GetHashCode(self) -> int: ...
	def GetOptionalCustomModifiers(self) -> List[Type]: ...
	def GetRawConstantValue(self) -> object: ...
	def GetRequiredCustomModifiers(self) -> List[Type]: ...
	def GetType(self) -> Type: ...
	def GetValue(self, _: object) -> object: ...
	def GetValueDirect(self, _: Any) -> object: ...

	@property
	def IsAssembly(self): ...

	@IsAssembly.setter
	def IsAssembly(self, value): ...

	def IsDefined(self, _: Type, __: bool) -> bool: ...

	@property
	def IsFamily(self): ...

	@IsFamily.setter
	def IsFamily(self, value): ...

	@property
	def IsFamilyAndAssembly(self): ...

	@IsFamilyAndAssembly.setter
	def IsFamilyAndAssembly(self, value): ...

	@property
	def IsFamilyOrAssembly(self): ...

	@IsFamilyOrAssembly.setter
	def IsFamilyOrAssembly(self, value): ...

	@property
	def IsInitOnly(self): ...

	@IsInitOnly.setter
	def IsInitOnly(self, value): ...

	@property
	def IsLiteral(self): ...

	@IsLiteral.setter
	def IsLiteral(self, value): ...

	@property
	def IsNotSerialized(self): ...

	@IsNotSerialized.setter
	def IsNotSerialized(self, value): ...

	@property
	def IsPinvokeImpl(self): ...

	@IsPinvokeImpl.setter
	def IsPinvokeImpl(self, value): ...

	@property
	def IsPrivate(self): ...

	@IsPrivate.setter
	def IsPrivate(self, value): ...

	@property
	def IsPublic(self): ...

	@IsPublic.setter
	def IsPublic(self, value): ...

	@property
	def IsSecurityCritical(self): ...

	@IsSecurityCritical.setter
	def IsSecurityCritical(self, value): ...

	@property
	def IsSecuritySafeCritical(self): ...

	@IsSecuritySafeCritical.setter
	def IsSecuritySafeCritical(self, value): ...

	@property
	def IsSecurityTransparent(self): ...

	@IsSecurityTransparent.setter
	def IsSecurityTransparent(self, value): ...

	@property
	def IsSpecialName(self): ...

	@IsSpecialName.setter
	def IsSpecialName(self, value): ...

	@property
	def IsStatic(self): ...

	@IsStatic.setter
	def IsStatic(self, value): ...

	@property
	def MemberType(self): ...

	@MemberType.setter
	def MemberType(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MetadataToken(self): ...

	@MetadataToken.setter
	def MetadataToken(self, value): ...

	@property
	def Module(self): ...

	@Module.setter
	def Module(self, value): ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReflectedType(self): ...

	@ReflectedType.setter
	def ReflectedType(self, value): ...

	def SetValue(
			self,
			_: object,
			__: object,
			___: BindingFlags,
			____: Binder,
			_____: System.Globalization.CultureInfo,
			) -> None: ...

	def SetValueDirect(self, _: Any, __: object) -> None: ...
	def ToString(self) -> str: ...
	def get_Attributes(self) -> FieldAttributes: ...
	def get_CustomAttributes(self) -> List[CustomAttributeData]: ...
	def get_DeclaringType(self) -> Type: ...
	def get_FieldHandle(self) -> System.RuntimeFieldHandle: ...
	def get_FieldType(self) -> Type: ...
	def get_IsAssembly(self) -> bool: ...
	def get_IsFamily(self) -> bool: ...
	def get_IsFamilyAndAssembly(self) -> bool: ...
	def get_IsFamilyOrAssembly(self) -> bool: ...
	def get_IsInitOnly(self) -> bool: ...
	def get_IsLiteral(self) -> bool: ...
	def get_IsNotSerialized(self) -> bool: ...
	def get_IsPinvokeImpl(self) -> bool: ...
	def get_IsPrivate(self) -> bool: ...
	def get_IsPublic(self) -> bool: ...
	def get_IsSecurityCritical(self) -> bool: ...
	def get_IsSecuritySafeCritical(self) -> bool: ...
	def get_IsSecurityTransparent(self) -> bool: ...
	def get_IsSpecialName(self) -> bool: ...
	def get_IsStatic(self) -> bool: ...
	def get_MemberType(self) -> MemberTypes: ...
	def get_MetadataToken(self) -> int: ...
	def get_Module(self) -> Module: ...
	def get_Name(self) -> str: ...
	def get_ReflectedType(self) -> Type: ...

	def op_Equality(
			self,
			_: FieldInfo,
			__: FieldInfo,
			) -> bool: ...

	def op_Inequality(
			self,
			_: FieldInfo,
			__: FieldInfo,
			) -> bool: ...

class ManifestResourceInfo:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def FileName(self): ...

	@FileName.setter
	def FileName(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ReferencedAssembly(self): ...

	@ReferencedAssembly.setter
	def ReferencedAssembly(self, value): ...

	@property
	def ResourceLocation(self): ...

	@ResourceLocation.setter
	def ResourceLocation(self, value): ...

	def ToString(self) -> str: ...
	def get_FileName(self) -> str: ...
	def get_ReferencedAssembly(self) -> Assembly: ...
	def get_ResourceLocation(self) -> ResourceLocation: ...

class AssemblyName:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Clone(self) -> object: ...

	@property
	def CodeBase(self): ...

	@CodeBase.setter
	def CodeBase(self, value): ...

	@property
	def ContentType(self): ...

	@ContentType.setter
	def ContentType(self, value): ...

	@property
	def CultureInfo(self): ...

	@CultureInfo.setter
	def CultureInfo(self, value): ...

	@property
	def CultureName(self): ...

	@CultureName.setter
	def CultureName(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def EscapedCodeBase(self): ...

	@EscapedCodeBase.setter
	def EscapedCodeBase(self, value): ...

	def Finalize(self) -> None: ...

	@property
	def Flags(self): ...

	@Flags.setter
	def Flags(self, value): ...

	@property
	def FullName(self): ...

	@FullName.setter
	def FullName(self, value): ...

	def GetAssemblyName(self, _: str) -> AssemblyName: ...
	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetPublicKey(self) -> List[bytes]: ...
	def GetPublicKeyToken(self) -> List[bytes]: ...
	def GetType(self) -> Type: ...

	@property
	def HashAlgorithm(self): ...

	@HashAlgorithm.setter
	def HashAlgorithm(self, value): ...

	@property
	def KeyPair(self): ...

	@KeyPair.setter
	def KeyPair(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def OnDeserialization(self, _: object) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ProcessorArchitecture(self): ...

	@ProcessorArchitecture.setter
	def ProcessorArchitecture(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	def ReferenceMatchesDefinition(
			self,
			_: AssemblyName,
			__: AssemblyName,
			) -> bool: ...

	def SetPublicKey(self, _: List[bytes]) -> None: ...
	def SetPublicKeyToken(self, _: List[bytes]) -> None: ...
	def ToString(self) -> str: ...

	@property
	def Version(self): ...

	@Version.setter
	def Version(self, value): ...

	@property
	def VersionCompatibility(self): ...

	@VersionCompatibility.setter
	def VersionCompatibility(self, value): ...

	def get_CodeBase(self) -> str: ...
	def get_ContentType(self) -> AssemblyContentType: ...
	def get_CultureInfo(self) -> System.Globalization.CultureInfo: ...
	def get_CultureName(self) -> str: ...
	def get_EscapedCodeBase(self) -> str: ...
	def get_Flags(self) -> AssemblyNameFlags: ...
	def get_FullName(self) -> str: ...
	def get_HashAlgorithm(self) -> System.Configuration.Assemblies.AssemblyHashAlgorithm: ...
	def get_KeyPair(self) -> StrongNameKeyPair: ...
	def get_Name(self) -> str: ...
	def get_ProcessorArchitecture(self) -> ProcessorArchitecture: ...
	def get_Version(self) -> System.Version: ...
	def get_VersionCompatibility(self) -> System.Configuration.Assemblies.AssemblyVersionCompatibility: ...
	def set_CodeBase(self, _: str) -> None: ...
	def set_ContentType(self, _: AssemblyContentType) -> None: ...
	def set_CultureInfo(self, _: System.Globalization.CultureInfo) -> None: ...
	def set_CultureName(self, _: str) -> None: ...
	def set_Flags(self, _: AssemblyNameFlags) -> None: ...

	def set_HashAlgorithm(
			self,
			_: System.Configuration.Assemblies.AssemblyHashAlgorithm,
			) -> None: ...

	def set_KeyPair(self, _: StrongNameKeyPair) -> None: ...
	def set_Name(self, _: str) -> None: ...

	def set_ProcessorArchitecture(
			self,
			_: ProcessorArchitecture,
			) -> None: ...

	def set_Version(self, _: System.Version) -> None: ...

	def set_VersionCompatibility(
			self,
			_: System.Configuration.Assemblies.AssemblyVersionCompatibility,
			) -> None: ...

class AssemblyNameFlags:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def EnableJITcompileOptimizer(self, *args, **kwargs) -> Any: ...
	def EnableJITcompileTracking(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def PublicKey(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Retargetable(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class StrongNameKeyPair:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def PublicKey(self): ...

	@PublicKey.setter
	def PublicKey(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_PublicKey(self) -> List[bytes]: ...
