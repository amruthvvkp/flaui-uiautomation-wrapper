from __future__ import annotations

# stdlib
from enum import Enum
from typing import Any, List, Type

# 3rd party
import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent

class InternalDataCollectionBase:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

class AcceptRejectRule:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Cascade(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class DataTable:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AcceptChanges(self) -> None: ...
	def BeginInit(self) -> None: ...
	def BeginLoadData(self) -> None: ...

	@property
	def CaseSensitive(self): ...

	@CaseSensitive.setter
	def CaseSensitive(self, value): ...

	@property
	def ChildRelations(self): ...

	@ChildRelations.setter
	def ChildRelations(self, value): ...

	def Clear(self) -> None: ...
	def Clone(self) -> DataTable: ...
	def ColumnChanged(self, *args, **kwargs) -> Any: ...
	def ColumnChanging(self, *args, **kwargs) -> Any: ...

	@property
	def Columns(self): ...

	@Columns.setter
	def Columns(self, value): ...

	def Compute(self, _: str, __: str) -> object: ...

	@property
	def Constraints(self): ...

	@Constraints.setter
	def Constraints(self, value): ...

	@property
	def Container(self): ...

	@Container.setter
	def Container(self, value): ...

	def Copy(self) -> DataTable: ...
	def CreateDataReader(self) -> DataTableReader: ...
	def CreateInstance(self) -> DataTable: ...

	@property
	def DataSet(self): ...

	@DataSet.setter
	def DataSet(self, value): ...

	@property
	def DefaultView(self): ...

	@DefaultView.setter
	def DefaultView(self, value): ...

	@property
	def DesignMode(self): ...

	@DesignMode.setter
	def DesignMode(self, value): ...

	@property
	def DisplayExpression(self): ...

	@DisplayExpression.setter
	def DisplayExpression(self, value): ...

	def Dispose(self, _: bool) -> None: ...
	def Disposed(self, *args, **kwargs) -> Any: ...
	def EndInit(self) -> None: ...
	def EndLoadData(self) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def Events(self): ...

	@Events.setter
	def Events(self, value): ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetChanges(self, _: DataRowState) -> DataTable: ...

	def GetDataTableSchema(
			self,
			_: System.Xml.Schema.XmlSchemaSet,
			) -> System.Xml.Schema.XmlSchemaComplexType: ...

	def GetErrors(self) -> List[List]: ...
	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetRowType(self) -> Type: ...
	def GetSchema(self) -> System.Xml.Schema.XmlSchema: ...
	def GetService(self, _: Type) -> object: ...
	def GetType(self) -> Type: ...

	@property
	def HasErrors(self): ...

	@HasErrors.setter
	def HasErrors(self, value): ...

	def ImportRow(self, _: List) -> None: ...
	def Initialized(self, *args, **kwargs) -> Any: ...

	@property
	def IsInitialized(self): ...

	@IsInitialized.setter
	def IsInitialized(self, value): ...

	def Load(
			self,
			_: IDataReader,
			__: LoadOption,
			___: FillErrorEventHandler,
			) -> None: ...

	def LoadDataRow(self, _: List[object], __: bool) -> List: ...

	@property
	def Locale(self): ...

	@Locale.setter
	def Locale(self, value): ...

	def MemberwiseClone(self) -> object: ...

	def Merge(
			self,
			_: DataTable,
			__: bool,
			___: MissingSchemaAction,
			) -> None: ...

	@property
	def MinimumCapacity(self): ...

	@MinimumCapacity.setter
	def MinimumCapacity(self, value): ...

	@property
	def Namespace(self): ...

	@Namespace.setter
	def Namespace(self, value): ...

	def NewRow(self) -> List: ...
	def NewRowArray(self, _: int) -> List[List]: ...
	def NewRowFromBuilder(self, _: DataRowBuilder) -> List: ...
	def OnColumnChanged(self, _: Any) -> None: ...
	def OnColumnChanging(self, _: Any) -> None: ...

	def OnPropertyChanging(
			self,
			_: System.ComponentModel.PropertyChangedEventArgs,
			) -> None: ...

	def OnRemoveColumn(self, _: List) -> None: ...
	def OnRowChanged(self, _: DataRowChangeEventArgs) -> None: ...
	def OnRowChanging(self, _: DataRowChangeEventArgs) -> None: ...
	def OnRowDeleted(self, _: DataRowChangeEventArgs) -> None: ...
	def OnRowDeleting(self, _: DataRowChangeEventArgs) -> None: ...
	def OnTableCleared(self, _: DataTableClearEventArgs) -> None: ...
	def OnTableClearing(self, _: DataTableClearEventArgs) -> None: ...
	def OnTableNewRow(self, _: DataTableNewRowEventArgs) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ParentRelations(self): ...

	@ParentRelations.setter
	def ParentRelations(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	@property
	def PrimaryKey(self): ...

	@PrimaryKey.setter
	def PrimaryKey(self, value): ...

	def ReadXml(self, _: str) -> XmlReadMode: ...
	def ReadXmlSchema(self, _: str) -> None: ...
	def ReadXmlSerializable(self, _: System.Xml.XmlReader) -> None: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RejectChanges(self) -> None: ...

	@property
	def RemotingFormat(self): ...

	@RemotingFormat.setter
	def RemotingFormat(self, value): ...

	def Reset(self) -> None: ...
	def RowChanged(self, *args, **kwargs) -> Any: ...
	def RowChanging(self, *args, **kwargs) -> Any: ...
	def RowDeleted(self, *args, **kwargs) -> Any: ...
	def RowDeleting(self, *args, **kwargs) -> Any: ...

	@property
	def Rows(self): ...

	@Rows.setter
	def Rows(self, value): ...

	def Select(self, _: str, __: str, ___: DataViewRowState) -> List[List]: ...

	@property
	def Site(self): ...

	@Site.setter
	def Site(self, value): ...

	def TableCleared(self, *args, **kwargs) -> Any: ...
	def TableClearing(self, *args, **kwargs) -> Any: ...

	@property
	def TableName(self): ...

	@TableName.setter
	def TableName(self, value): ...

	def TableNewRow(self, *args, **kwargs) -> Any: ...
	def ToString(self) -> str: ...
	def WriteXml(self, _: str, __: XmlWriteMode, ___: bool) -> None: ...
	def WriteXmlSchema(self, _: str, __: bool) -> None: ...
	def add_ColumnChanged(self, _: DataColumnChangeEventHandler) -> None: ...
	def add_ColumnChanging(self, _: DataColumnChangeEventHandler) -> None: ...
	def add_Disposed(self, _: Any) -> None: ...
	def add_Initialized(self, _: Any) -> None: ...
	def add_RowChanged(self, _: DataRowChangeEventHandler) -> None: ...
	def add_RowChanging(self, _: DataRowChangeEventHandler) -> None: ...
	def add_RowDeleted(self, _: DataRowChangeEventHandler) -> None: ...
	def add_RowDeleting(self, _: DataRowChangeEventHandler) -> None: ...
	def add_TableCleared(self, _: DataTableClearEventHandler) -> None: ...
	def add_TableClearing(self, _: DataTableClearEventHandler) -> None: ...
	def add_TableNewRow(self, _: DataTableNewRowEventHandler) -> None: ...
	def get_CaseSensitive(self) -> bool: ...
	def get_ChildRelations(self) -> DataRelationCollection: ...
	def get_Columns(self) -> DataColumnCollection: ...
	def get_Constraints(self) -> ConstraintCollection: ...
	def get_Container(self) -> System.ComponentModel.IContainer: ...
	def get_DataSet(self) -> DataSet: ...
	def get_DefaultView(self) -> DataView: ...
	def get_DesignMode(self) -> bool: ...
	def get_DisplayExpression(self) -> str: ...
	def get_Events(self) -> System.ComponentModel.EventHandlerList: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_HasErrors(self) -> bool: ...
	def get_IsInitialized(self) -> bool: ...
	def get_Locale(self) -> System.Globalization.CultureInfo: ...
	def get_MinimumCapacity(self) -> int: ...
	def get_Namespace(self) -> str: ...
	def get_ParentRelations(self) -> DataRelationCollection: ...
	def get_Prefix(self) -> str: ...
	def get_PrimaryKey(self) -> List[List]: ...
	def get_RemotingFormat(self) -> SerializationFormat: ...
	def get_Rows(self) -> DataRowCollection: ...
	def get_Site(self) -> System.ComponentModel.ISite: ...
	def get_TableName(self) -> str: ...
	def remove_ColumnChanged(self, _: DataColumnChangeEventHandler) -> None: ...

	def remove_ColumnChanging(
			self,
			_: DataColumnChangeEventHandler,
			) -> None: ...

	def remove_Disposed(self, _: Any) -> None: ...
	def remove_Initialized(self, _: Any) -> None: ...
	def remove_RowChanged(self, _: DataRowChangeEventHandler) -> None: ...
	def remove_RowChanging(self, _: DataRowChangeEventHandler) -> None: ...
	def remove_RowDeleted(self, _: DataRowChangeEventHandler) -> None: ...
	def remove_RowDeleting(self, _: DataRowChangeEventHandler) -> None: ...
	def remove_TableCleared(self, _: DataTableClearEventHandler) -> None: ...
	def remove_TableClearing(self, _: DataTableClearEventHandler) -> None: ...
	def remove_TableNewRow(self, _: DataTableNewRowEventHandler) -> None: ...
	def set_CaseSensitive(self, _: bool) -> None: ...
	def set_DisplayExpression(self, _: str) -> None: ...
	def set_Locale(self, _: System.Globalization.CultureInfo) -> None: ...
	def set_MinimumCapacity(self, _: int) -> None: ...
	def set_Namespace(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_PrimaryKey(self, _: List[List]) -> None: ...
	def set_RemotingFormat(self, _: SerializationFormat) -> None: ...
	def set_Site(self, _: System.ComponentModel.ISite) -> None: ...
	def set_TableName(self, _: str) -> None: ...

class DataTableReader:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Close(self) -> None: ...
	def CreateObjRef(self, _: Type) -> System.Runtime.Remoting.ObjRef: ...

	@property
	def Depth(self): ...

	@Depth.setter
	def Depth(self, value): ...

	def Dispose(self, _: bool) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def FieldCount(self): ...

	@FieldCount.setter
	def FieldCount(self, value): ...

	def Finalize(self) -> None: ...
	def GetBoolean(self, _: int) -> bool: ...
	def GetByte(self, _: int) -> bytes: ...
	def GetBytes(self, _: int, __: int, ___: List[bytes], ____: int, _____: int) -> int: ...
	def GetChar(self, _: int) -> str: ...
	def GetChars(self, _: int, __: int, ___: List[str], ____: int, _____: int) -> int: ...
	def GetData(self, _: int) -> Any: ...
	def GetDataTypeName(self, _: int) -> str: ...
	def GetDateTime(self, _: int) -> System.DateTime: ...
	def GetDbDataReader(self, _: int) -> Any: ...
	def GetDecimal(self, _: int) -> float: ...
	def GetDouble(self, _: int) -> float: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetFieldType(self, _: int) -> Type: ...
	def GetFieldValue(self, *args, **kwargs) -> Any: ...
	def GetFieldValueAsync(self, *args, **kwargs) -> Any: ...
	def GetFloat(self, _: int) -> float: ...
	def GetGuid(self, _: int) -> System.Guid: ...
	def GetHashCode(self) -> int: ...
	def GetInt16(self, _: int) -> int: ...
	def GetInt32(self, _: int) -> int: ...
	def GetInt64(self, _: int) -> int: ...
	def GetLifetimeService(self) -> object: ...
	def GetName(self, _: int) -> str: ...
	def GetOrdinal(self, _: str) -> int: ...
	def GetProviderSpecificFieldType(self, _: int) -> Type: ...
	def GetProviderSpecificValue(self, _: int) -> object: ...
	def GetProviderSpecificValues(self, _: List[object]) -> int: ...
	def GetSchemaTable(self) -> DataTable: ...
	def GetStream(self, _: int) -> System.IO.Stream: ...
	def GetString(self, _: int) -> str: ...
	def GetTextReader(self, _: int) -> System.IO.TextReader: ...
	def GetType(self) -> Type: ...
	def GetValue(self, _: int) -> object: ...
	def GetValues(self, _: List[object]) -> int: ...

	@property
	def HasRows(self): ...

	@HasRows.setter
	def HasRows(self, value): ...

	def InitializeLifetimeService(self) -> object: ...

	@property
	def IsClosed(self): ...

	@IsClosed.setter
	def IsClosed(self, value): ...

	def IsDBNull(self, _: int) -> bool: ...

	def IsDBNullAsync(
			self,
			_: int,
			__: System.Threading.CancellationToken,
			) -> System.Threading.Tasks.Task[bool]: ...

	def MemberwiseClone(self) -> object: ...
	def NextResult(self) -> bool: ...

	def NextResultAsync(
			self,
			_: System.Threading.CancellationToken,
			) -> System.Threading.Tasks.Task[bool]: ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def Read(self) -> bool: ...

	def ReadAsync(
			self,
			_: System.Threading.CancellationToken,
			) -> System.Threading.Tasks.Task[bool]: ...

	@property
	def RecordsAffected(self): ...

	@RecordsAffected.setter
	def RecordsAffected(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def VisibleFieldCount(self): ...

	@VisibleFieldCount.setter
	def VisibleFieldCount(self, value): ...

	def get_Depth(self) -> int: ...
	def get_FieldCount(self) -> int: ...
	def get_HasRows(self) -> bool: ...
	def get_IsClosed(self) -> bool: ...
	def get_Item(self, _: str) -> object: ...
	def get_RecordsAffected(self) -> int: ...
	def get_VisibleFieldCount(self) -> int: ...

class DataRowState:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Added(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Deleted(self, *args, **kwargs) -> Any: ...
	def Detached(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Modified(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unchanged(self, *args, **kwargs) -> Any: ...

class DataRow:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AcceptChanges(self) -> None: ...
	def BeginEdit(self) -> None: ...
	def CancelEdit(self) -> None: ...
	def ClearErrors(self) -> None: ...
	def Delete(self) -> None: ...
	def EndEdit(self) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetChildRows(self, _: str, __: DataRowVersion) -> List[List]: ...
	def GetColumnError(self, _: str) -> str: ...
	def GetColumnsInError(self) -> List[List]: ...
	def GetHashCode(self) -> int: ...
	def GetParentRow(self, _: str, __: DataRowVersion) -> List: ...
	def GetParentRows(self, _: str, __: DataRowVersion) -> List[List]: ...
	def GetType(self) -> Type: ...

	@property
	def HasErrors(self): ...

	@HasErrors.setter
	def HasErrors(self, value): ...

	def HasVersion(self, _: DataRowVersion) -> bool: ...
	def IsNull(self, _: str) -> bool: ...

	@property
	def ItemArray(self): ...

	@ItemArray.setter
	def ItemArray(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RejectChanges(self) -> None: ...

	@property
	def RowError(self): ...

	@RowError.setter
	def RowError(self, value): ...

	@property
	def RowState(self): ...

	@RowState.setter
	def RowState(self, value): ...

	def SetAdded(self) -> None: ...
	def SetColumnError(self, _: str, __: str) -> None: ...
	def SetModified(self) -> None: ...
	def SetNull(self, _: List) -> None: ...
	def SetParentRow(self, _: List, __: DataRelation) -> None: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def get_HasErrors(self) -> bool: ...
	def get_Item(self, _: str, __: DataRowVersion) -> object: ...
	def get_ItemArray(self) -> List[object]: ...
	def get_RowError(self) -> str: ...
	def get_RowState(self) -> DataRowState: ...
	def get_Table(self) -> DataTable: ...
	def set_Item(self, _: str, __: object) -> None: ...
	def set_ItemArray(self, _: List[object]) -> None: ...
	def set_RowError(self, _: str) -> None: ...

class DataSet:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AcceptChanges(self) -> None: ...
	def BeginInit(self) -> None: ...

	@property
	def CaseSensitive(self): ...

	@CaseSensitive.setter
	def CaseSensitive(self, value): ...

	def Clear(self) -> None: ...
	def Clone(self) -> DataSet: ...

	@property
	def Container(self): ...

	@Container.setter
	def Container(self, value): ...

	def Copy(self) -> DataSet: ...

	def CreateDataReader(
			self,
			_: List[DataTable],
			) -> DataTableReader: ...

	@property
	def DataSetName(self): ...

	@DataSetName.setter
	def DataSetName(self, value): ...

	@property
	def DefaultViewManager(self): ...

	@DefaultViewManager.setter
	def DefaultViewManager(self, value): ...

	@property
	def DesignMode(self): ...

	@DesignMode.setter
	def DesignMode(self, value): ...

	def DetermineSchemaSerializationMode(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> SchemaSerializationMode: ...

	def Dispose(self, _: bool) -> None: ...
	def Disposed(self, *args, **kwargs) -> Any: ...
	def EndInit(self) -> None: ...

	@property
	def EnforceConstraints(self): ...

	@EnforceConstraints.setter
	def EnforceConstraints(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def Events(self): ...

	@Events.setter
	def Events(self, value): ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetChanges(self, _: DataRowState) -> DataSet: ...

	def GetDataSetSchema(
			self,
			_: System.Xml.Schema.XmlSchemaSet,
			) -> System.Xml.Schema.XmlSchemaComplexType: ...

	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetSchemaSerializable(self) -> System.Xml.Schema.XmlSchema: ...

	def GetSerializationData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetService(self, _: Type) -> object: ...
	def GetType(self) -> Type: ...
	def GetXml(self) -> str: ...
	def GetXmlSchema(self) -> str: ...
	def HasChanges(self, _: DataRowState) -> bool: ...

	@property
	def HasErrors(self): ...

	@HasErrors.setter
	def HasErrors(self, value): ...

	def InferXmlSchema(self, _: str, __: List[str]) -> None: ...
	def InitializeDerivedDataSet(self) -> None: ...
	def Initialized(self, *args, **kwargs) -> Any: ...

	def IsBinarySerialized(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> bool: ...

	@property
	def IsInitialized(self): ...

	@IsInitialized.setter
	def IsInitialized(self, value): ...

	def Load(
			self,
			_: IDataReader,
			__: LoadOption,
			___: FillErrorEventHandler,
			____: List[DataTable],
			) -> None: ...

	@property
	def Locale(self): ...

	@Locale.setter
	def Locale(self, value): ...

	def MemberwiseClone(self) -> object: ...

	def Merge(
			self,
			_: DataTable,
			__: bool,
			___: MissingSchemaAction,
			) -> None: ...

	def MergeFailed(self, *args, **kwargs) -> Any: ...

	@property
	def Namespace(self): ...

	@Namespace.setter
	def Namespace(self, value): ...

	def OnPropertyChanging(
			self,
			_: System.ComponentModel.PropertyChangedEventArgs,
			) -> None: ...

	def OnRemoveRelation(self, _: DataRelation) -> None: ...
	def OnRemoveTable(self, _: DataTable) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def RaisePropertyChanging(self, _: str) -> None: ...
	def ReadXml(self, _: str, __: XmlReadMode) -> XmlReadMode: ...
	def ReadXmlSchema(self, _: str) -> None: ...
	def ReadXmlSerializable(self, _: System.Xml.XmlReader) -> None: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RejectChanges(self) -> None: ...

	@property
	def Relations(self): ...

	@Relations.setter
	def Relations(self, value): ...

	@property
	def RemotingFormat(self): ...

	@RemotingFormat.setter
	def RemotingFormat(self, value): ...

	def Reset(self) -> None: ...

	@property
	def SchemaSerializationMode(self): ...

	@SchemaSerializationMode.setter
	def SchemaSerializationMode(self, value): ...

	def ShouldSerializeRelations(self) -> bool: ...
	def ShouldSerializeTables(self) -> bool: ...

	@property
	def Site(self): ...

	@Site.setter
	def Site(self, value): ...

	@property
	def Tables(self): ...

	@Tables.setter
	def Tables(self, value): ...

	def ToString(self) -> str: ...
	def WriteXml(self, _: str, __: XmlWriteMode) -> None: ...
	def WriteXmlSchema(self, _: str, __: System.Converter[Type, str]) -> None: ...
	def add_Disposed(self, _: Any) -> None: ...
	def add_Initialized(self, _: Any) -> None: ...
	def add_MergeFailed(self, _: MergeFailedEventHandler) -> None: ...
	def get_CaseSensitive(self) -> bool: ...
	def get_Container(self) -> System.ComponentModel.IContainer: ...
	def get_DataSetName(self) -> str: ...
	def get_DefaultViewManager(self) -> DataViewManager: ...
	def get_DesignMode(self) -> bool: ...
	def get_EnforceConstraints(self) -> bool: ...
	def get_Events(self) -> System.ComponentModel.EventHandlerList: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_HasErrors(self) -> bool: ...
	def get_IsInitialized(self) -> bool: ...
	def get_Locale(self) -> System.Globalization.CultureInfo: ...
	def get_Namespace(self) -> str: ...
	def get_Prefix(self) -> str: ...
	def get_Relations(self) -> DataRelationCollection: ...
	def get_RemotingFormat(self) -> SerializationFormat: ...
	def get_SchemaSerializationMode(self) -> SchemaSerializationMode: ...
	def get_Site(self) -> System.ComponentModel.ISite: ...
	def get_Tables(self) -> DataTableCollection: ...
	def remove_Disposed(self, _: Any) -> None: ...
	def remove_Initialized(self, _: Any) -> None: ...
	def remove_MergeFailed(self, _: MergeFailedEventHandler) -> None: ...
	def set_CaseSensitive(self, _: bool) -> None: ...
	def set_DataSetName(self, _: str) -> None: ...
	def set_EnforceConstraints(self, _: bool) -> None: ...
	def set_Locale(self, _: System.Globalization.CultureInfo) -> None: ...
	def set_Namespace(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_RemotingFormat(self, _: SerializationFormat) -> None: ...

	def set_SchemaSerializationMode(
			self,
			_: SchemaSerializationMode,
			) -> None: ...

	def set_Site(self, _: System.ComponentModel.ISite) -> None: ...

class DataColumn:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def AllowDBNull(self): ...

	@AllowDBNull.setter
	def AllowDBNull(self, value): ...

	@property
	def AutoIncrement(self): ...

	@AutoIncrement.setter
	def AutoIncrement(self, value): ...

	@property
	def AutoIncrementSeed(self): ...

	@AutoIncrementSeed.setter
	def AutoIncrementSeed(self, value): ...

	@property
	def AutoIncrementStep(self): ...

	@AutoIncrementStep.setter
	def AutoIncrementStep(self, value): ...

	@property
	def Caption(self): ...

	@Caption.setter
	def Caption(self, value): ...

	def CheckNotAllowNull(self) -> None: ...
	def CheckUnique(self) -> None: ...

	@property
	def ColumnMapping(self): ...

	@ColumnMapping.setter
	def ColumnMapping(self, value): ...

	@property
	def ColumnName(self): ...

	@ColumnName.setter
	def ColumnName(self, value): ...

	@property
	def Container(self): ...

	@Container.setter
	def Container(self, value): ...

	@property
	def DataType(self): ...

	@DataType.setter
	def DataType(self, value): ...

	@property
	def DateTimeMode(self): ...

	@DateTimeMode.setter
	def DateTimeMode(self, value): ...

	@property
	def DefaultValue(self): ...

	@DefaultValue.setter
	def DefaultValue(self, value): ...

	@property
	def DesignMode(self): ...

	@DesignMode.setter
	def DesignMode(self, value): ...

	def Dispose(self, _: bool) -> None: ...
	def Disposed(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def Events(self): ...

	@Events.setter
	def Events(self, value): ...

	@property
	def Expression(self): ...

	@Expression.setter
	def Expression(self, value): ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetService(self, _: Type) -> object: ...
	def GetType(self) -> Type: ...

	@property
	def MaxLength(self): ...

	@MaxLength.setter
	def MaxLength(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Namespace(self): ...

	@Namespace.setter
	def Namespace(self, value): ...

	def OnPropertyChanging(
			self,
			_: System.ComponentModel.PropertyChangedEventArgs,
			) -> None: ...

	@property
	def Ordinal(self): ...

	@Ordinal.setter
	def Ordinal(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def RaisePropertyChanging(self, _: str) -> None: ...

	@property
	def ReadOnly(self): ...

	@ReadOnly.setter
	def ReadOnly(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetOrdinal(self, _: int) -> None: ...

	@property
	def Site(self): ...

	@Site.setter
	def Site(self, value): ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...

	@property
	def Unique(self): ...

	@Unique.setter
	def Unique(self, value): ...

	def add_Disposed(self, _: Any) -> None: ...
	def get_AllowDBNull(self) -> bool: ...
	def get_AutoIncrement(self) -> bool: ...
	def get_AutoIncrementSeed(self) -> int: ...
	def get_AutoIncrementStep(self) -> int: ...
	def get_Caption(self) -> str: ...
	def get_ColumnMapping(self) -> MappingType: ...
	def get_ColumnName(self) -> str: ...
	def get_Container(self) -> System.ComponentModel.IContainer: ...
	def get_DataType(self) -> Type: ...
	def get_DateTimeMode(self) -> DataSetDateTime: ...
	def get_DefaultValue(self) -> object: ...
	def get_DesignMode(self) -> bool: ...
	def get_Events(self) -> System.ComponentModel.EventHandlerList: ...
	def get_Expression(self) -> str: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_MaxLength(self) -> int: ...
	def get_Namespace(self) -> str: ...
	def get_Ordinal(self) -> int: ...
	def get_Prefix(self) -> str: ...
	def get_ReadOnly(self) -> bool: ...
	def get_Site(self) -> System.ComponentModel.ISite: ...
	def get_Table(self) -> DataTable: ...
	def get_Unique(self) -> bool: ...
	def remove_Disposed(self, _: Any) -> None: ...
	def set_AllowDBNull(self, _: bool) -> None: ...
	def set_AutoIncrement(self, _: bool) -> None: ...
	def set_AutoIncrementSeed(self, _: int) -> None: ...
	def set_AutoIncrementStep(self, _: int) -> None: ...
	def set_Caption(self, _: str) -> None: ...
	def set_ColumnMapping(self, _: MappingType) -> None: ...
	def set_ColumnName(self, _: str) -> None: ...
	def set_DataType(self, _: Type) -> None: ...
	def set_DateTimeMode(self, _: DataSetDateTime) -> None: ...
	def set_DefaultValue(self, _: object) -> None: ...
	def set_Expression(self, _: str) -> None: ...
	def set_MaxLength(self, _: int) -> None: ...
	def set_Namespace(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_ReadOnly(self, _: bool) -> None: ...
	def set_Site(self, _: System.ComponentModel.ISite) -> None: ...
	def set_Unique(self, _: bool) -> None: ...

class IDataReader:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Close(self) -> None: ...

	@property
	def Depth(self): ...

	@Depth.setter
	def Depth(self, value): ...

	def Dispose(self) -> None: ...

	@property
	def FieldCount(self): ...

	@FieldCount.setter
	def FieldCount(self, value): ...

	def GetBoolean(self, _: int) -> bool: ...
	def GetByte(self, _: int) -> bytes: ...
	def GetBytes(self, _: int, __: int, ___: List[bytes], ____: int, _____: int) -> int: ...
	def GetChar(self, _: int) -> str: ...
	def GetChars(self, _: int, __: int, ___: List[str], ____: int, _____: int) -> int: ...
	def GetData(self, _: int) -> IDataReader: ...
	def GetDataTypeName(self, _: int) -> str: ...
	def GetDateTime(self, _: int) -> System.DateTime: ...
	def GetDecimal(self, _: int) -> float: ...
	def GetDouble(self, _: int) -> float: ...
	def GetFieldType(self, _: int) -> Type: ...
	def GetFloat(self, _: int) -> float: ...
	def GetGuid(self, _: int) -> System.Guid: ...
	def GetInt16(self, _: int) -> int: ...
	def GetInt32(self, _: int) -> int: ...
	def GetInt64(self, _: int) -> int: ...
	def GetName(self, _: int) -> str: ...
	def GetOrdinal(self, _: str) -> int: ...
	def GetSchemaTable(self) -> DataTable: ...
	def GetString(self, _: int) -> str: ...
	def GetValue(self, _: int) -> object: ...
	def GetValues(self, _: List[object]) -> int: ...

	@property
	def IsClosed(self): ...

	@IsClosed.setter
	def IsClosed(self, value): ...

	def IsDBNull(self, _: int) -> bool: ...
	def NextResult(self) -> bool: ...
	def Read(self) -> bool: ...

	@property
	def RecordsAffected(self): ...

	@RecordsAffected.setter
	def RecordsAffected(self, value): ...

	def get_Depth(self) -> int: ...
	def get_FieldCount(self) -> int: ...
	def get_IsClosed(self) -> bool: ...
	def get_Item(self, _: str) -> object: ...
	def get_RecordsAffected(self) -> int: ...

class LoadOption:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def OverwriteChanges(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def PreserveChanges(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Upsert(self, *args, **kwargs) -> Any: ...

class FillErrorEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: FillErrorEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: FillErrorEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class MissingSchemaAction:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, *args, **kwargs) -> Any: ...
	def AddWithKey(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Error(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Ignore(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class DataRowBuilder:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class DataRowChangeEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Action(self): ...

	@Action.setter
	def Action(self, value): ...

	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Row(self): ...

	@Row.setter
	def Row(self, value): ...

	def ToString(self) -> str: ...
	def get_Action(self) -> DataRowAction: ...
	def get_Row(self) -> List: ...

class DataTableNewRowEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Row(self): ...

	@Row.setter
	def Row(self, value): ...

	def ToString(self) -> str: ...
	def get_Row(self) -> List: ...

class DataTableNewRowEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: DataTableNewRowEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: DataTableNewRowEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class XmlReadMode:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Auto(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def DiffGram(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def Fragment(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IgnoreSchema(self, *args, **kwargs) -> Any: ...
	def InferSchema(self, *args, **kwargs) -> Any: ...
	def InferTypedSchema(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReadSchema(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlWriteMode:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def DiffGram(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IgnoreSchema(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def WriteSchema(self, *args, **kwargs) -> Any: ...

class DataViewRowState:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Added(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def CurrentRows(self, *args, **kwargs) -> Any: ...
	def Deleted(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def ModifiedCurrent(self, *args, **kwargs) -> Any: ...
	def ModifiedOriginal(self, *args, **kwargs) -> Any: ...
	def OriginalRows(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unchanged(self, *args, **kwargs) -> Any: ...

class DataColumnChangeEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: object, __: Any, ___: Any, ____: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: Any) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class DataRowChangeEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: DataRowChangeEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: DataRowChangeEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class DataView:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AddNew(self) -> DataRowView: ...

	@property
	def AllowDelete(self): ...

	@AllowDelete.setter
	def AllowDelete(self, value): ...

	@property
	def AllowEdit(self): ...

	@AllowEdit.setter
	def AllowEdit(self, value): ...

	@property
	def AllowNew(self): ...

	@AllowNew.setter
	def AllowNew(self, value): ...

	@property
	def ApplyDefaultSort(self): ...

	@ApplyDefaultSort.setter
	def ApplyDefaultSort(self, value): ...

	def BeginInit(self) -> None: ...
	def Close(self) -> None: ...

	def ColumnCollectionChanged(
			self,
			_: object,
			__: System.ComponentModel.CollectionChangeEventArgs,
			) -> None: ...

	@property
	def Container(self): ...

	@Container.setter
	def Container(self, value): ...

	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	@property
	def DataViewManager(self): ...

	@DataViewManager.setter
	def DataViewManager(self, value): ...

	def Delete(self, _: int) -> None: ...

	@property
	def DesignMode(self): ...

	@DesignMode.setter
	def DesignMode(self, value): ...

	def Dispose(self) -> None: ...
	def Disposed(self, *args, **kwargs) -> Any: ...
	def EndInit(self) -> None: ...
	def Equals(self, _: object) -> bool: ...

	@property
	def Events(self): ...

	@Events.setter
	def Events(self, value): ...

	def Finalize(self) -> None: ...
	def Find(self, _: object) -> int: ...
	def FindRows(self, _: object) -> List[DataRowView]: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetService(self, _: Type) -> object: ...
	def GetType(self) -> Type: ...

	def IndexListChanged(
			self,
			_: object,
			__: System.ComponentModel.ListChangedEventArgs,
			) -> None: ...

	def Initialized(self, *args, **kwargs) -> Any: ...

	@property
	def IsInitialized(self): ...

	@IsInitialized.setter
	def IsInitialized(self, value): ...

	@property
	def IsOpen(self): ...

	@IsOpen.setter
	def IsOpen(self, value): ...

	def ListChanged(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def OnListChanged(self, _: System.ComponentModel.ListChangedEventArgs) -> None: ...
	def Open(self) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Reset(self) -> None: ...

	@property
	def RowFilter(self): ...

	@RowFilter.setter
	def RowFilter(self, value): ...

	@property
	def RowStateFilter(self): ...

	@RowStateFilter.setter
	def RowStateFilter(self, value): ...

	@property
	def Site(self): ...

	@Site.setter
	def Site(self, value): ...

	@property
	def Sort(self): ...

	@Sort.setter
	def Sort(self, value): ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def ToTable(self, _: str, __: bool, ___: List[str]) -> DataTable: ...
	def UpdateIndex(self, _: bool) -> None: ...
	def add_Disposed(self, _: Any) -> None: ...
	def add_Initialized(self, _: Any) -> None: ...
	def add_ListChanged(self, _: System.ComponentModel.ListChangedEventHandler) -> None: ...
	def get_AllowDelete(self) -> bool: ...
	def get_AllowEdit(self) -> bool: ...
	def get_AllowNew(self) -> bool: ...
	def get_ApplyDefaultSort(self) -> bool: ...
	def get_Container(self) -> System.ComponentModel.IContainer: ...
	def get_Count(self) -> int: ...
	def get_DataViewManager(self) -> DataViewManager: ...
	def get_DesignMode(self) -> bool: ...
	def get_Events(self) -> System.ComponentModel.EventHandlerList: ...
	def get_IsInitialized(self) -> bool: ...
	def get_IsOpen(self) -> bool: ...
	def get_Item(self, _: int) -> DataRowView: ...
	def get_RowFilter(self) -> str: ...
	def get_RowStateFilter(self) -> DataViewRowState: ...
	def get_Site(self) -> System.ComponentModel.ISite: ...
	def get_Sort(self) -> str: ...
	def get_Table(self) -> DataTable: ...
	def remove_Disposed(self, _: Any) -> None: ...
	def remove_Initialized(self, _: Any) -> None: ...

	def remove_ListChanged(
			self,
			_: System.ComponentModel.ListChangedEventHandler,
			) -> None: ...

	def set_AllowDelete(self, _: bool) -> None: ...
	def set_AllowEdit(self, _: bool) -> None: ...
	def set_AllowNew(self, _: bool) -> None: ...
	def set_ApplyDefaultSort(self, _: bool) -> None: ...
	def set_RowFilter(self, _: str) -> None: ...
	def set_RowStateFilter(self, _: DataViewRowState) -> None: ...
	def set_Site(self, _: System.ComponentModel.ISite) -> None: ...
	def set_Sort(self, _: str) -> None: ...
	def set_Table(self, _: DataTable) -> None: ...

class DataColumnCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: str, __: Type, ___: str) -> List: ...
	def AddRange(self, _: List[List]) -> None: ...
	def CanRemove(self, _: List) -> bool: ...
	def Clear(self) -> None: ...
	def CollectionChanged(self, *args, **kwargs) -> Any: ...
	def Contains(self, _: str) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IndexOf(self, _: str) -> int: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: str) -> None: ...
	def RemoveAt(self, _: int) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...

	def add_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: str) -> List: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

	def remove_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

class DataRowCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: List) -> None: ...
	def Clear(self) -> None: ...
	def Contains(self, _: object) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Find(self, _: object) -> List: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IndexOf(self, _: List) -> int: ...
	def InsertAt(self, _: List, __: int) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: List) -> None: ...
	def RemoveAt(self, _: int) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: int) -> List: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

class DataRelationCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: str, __: List, ___: List, ____: bool) -> DataRelation: ...
	def AddCore(self, _: DataRelation) -> None: ...
	def AddRange(self, _: List[DataRelation]) -> None: ...
	def CanRemove(self, _: DataRelation) -> bool: ...
	def Clear(self) -> None: ...
	def CollectionChanged(self, *args, **kwargs) -> Any: ...
	def Contains(self, _: str) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetDataSet(self) -> DataSet: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IndexOf(self, _: str) -> int: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...

	def OnCollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventArgs,
			) -> None: ...

	def OnCollectionChanging(
			self,
			_: System.ComponentModel.CollectionChangeEventArgs,
			) -> None: ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: str) -> None: ...
	def RemoveAt(self, _: int) -> None: ...
	def RemoveCore(self, _: DataRelation) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...

	def add_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: str) -> DataRelation: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

	def remove_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

class PropertyCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: object, __: object) -> None: ...
	def Clear(self) -> None: ...
	def Clone(self) -> object: ...
	def Contains(self, _: object) -> bool: ...
	def ContainsKey(self, _: object) -> bool: ...
	def ContainsValue(self, _: object) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	@property
	def EqualityComparer(self): ...

	@EqualityComparer.setter
	def EqualityComparer(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IDictionaryEnumerator: ...
	def GetHash(self, _: object) -> int: ...
	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...

	@property
	def IsFixedSize(self): ...

	@IsFixedSize.setter
	def IsFixedSize(self, value): ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	def KeyEquals(self, _: object, __: object) -> bool: ...

	@property
	def Keys(self): ...

	@Keys.setter
	def Keys(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def OnDeserialization(self, _: object) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: object) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def Synchronized(
			self,
			_: System.Collections.Hashtable,
			) -> System.Collections.Hashtable: ...

	def ToString(self) -> str: ...

	@property
	def Values(self): ...

	@Values.setter
	def Values(self, value): ...

	@property
	def comparer(self): ...

	@comparer.setter
	def comparer(self, value): ...

	def get_Count(self) -> int: ...
	def get_EqualityComparer(self) -> System.Collections.IEqualityComparer: ...
	def get_IsFixedSize(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: object) -> object: ...
	def get_Keys(self) -> System.Collections.ICollection: ...
	def get_SyncRoot(self) -> object: ...
	def get_Values(self) -> System.Collections.ICollection: ...
	def get_comparer(self) -> System.Collections.IComparer: ...
	def get_hcp(self) -> System.Collections.IHashCodeProvider: ...

	@property
	def hcp(self): ...

	@hcp.setter
	def hcp(self, value): ...

	def set_Item(self, _: object, __: object) -> None: ...
	def set_comparer(self, _: System.Collections.IComparer) -> None: ...
	def set_hcp(self, _: System.Collections.IHashCodeProvider) -> None: ...

class SerializationFormat:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Binary(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Xml(self, *args, **kwargs) -> Any: ...

class DataTableClearEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	@property
	def TableName(self): ...

	@TableName.setter
	def TableName(self, value): ...

	@property
	def TableNamespace(self): ...

	@TableNamespace.setter
	def TableNamespace(self, value): ...

	def ToString(self) -> str: ...
	def get_Table(self) -> DataTable: ...
	def get_TableName(self) -> str: ...
	def get_TableNamespace(self) -> str: ...

class DataTableClearEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: DataTableClearEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: DataTableClearEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class ConstraintCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: str, __: List[List], ___: bool) -> Constraint: ...
	def AddRange(self, _: List[Constraint]) -> None: ...
	def CanRemove(self, _: Constraint) -> bool: ...
	def Clear(self) -> None: ...
	def CollectionChanged(self, *args, **kwargs) -> Any: ...
	def Contains(self, _: str) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IndexOf(self, _: str) -> int: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: str) -> None: ...
	def RemoveAt(self, _: int) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...

	def add_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: str) -> Constraint: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

	def remove_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

class DataRowVersion:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Current(self, *args, **kwargs) -> Any: ...
	def Default(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Original(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Proposed(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class DataRelation:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CheckStateForProperty(self) -> None: ...

	@property
	def ChildColumns(self): ...

	@ChildColumns.setter
	def ChildColumns(self, value): ...

	@property
	def ChildKeyConstraint(self): ...

	@ChildKeyConstraint.setter
	def ChildKeyConstraint(self, value): ...

	@property
	def ChildTable(self): ...

	@ChildTable.setter
	def ChildTable(self, value): ...

	@property
	def DataSet(self): ...

	@DataSet.setter
	def DataSet(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Nested(self): ...

	@Nested.setter
	def Nested(self, value): ...

	def OnPropertyChanging(
			self,
			_: System.ComponentModel.PropertyChangedEventArgs,
			) -> None: ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ParentColumns(self): ...

	@ParentColumns.setter
	def ParentColumns(self, value): ...

	@property
	def ParentKeyConstraint(self): ...

	@ParentKeyConstraint.setter
	def ParentKeyConstraint(self, value): ...

	@property
	def ParentTable(self): ...

	@ParentTable.setter
	def ParentTable(self, value): ...

	def RaisePropertyChanging(self, _: str) -> None: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def RelationName(self): ...

	@RelationName.setter
	def RelationName(self, value): ...

	def ToString(self) -> str: ...
	def get_ChildColumns(self) -> List[List]: ...
	def get_ChildKeyConstraint(self) -> ForeignKeyConstraint: ...
	def get_ChildTable(self) -> DataTable: ...
	def get_DataSet(self) -> DataSet: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_Nested(self) -> bool: ...
	def get_ParentColumns(self) -> List[List]: ...
	def get_ParentKeyConstraint(self) -> UniqueConstraint: ...
	def get_ParentTable(self) -> DataTable: ...
	def get_RelationName(self) -> str: ...
	def set_Nested(self, _: bool) -> None: ...
	def set_RelationName(self, _: str) -> None: ...

class MappingType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Attribute(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Element(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Hidden(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SimpleContent(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class DataSetDateTime:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Local(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unspecified(self, *args, **kwargs) -> Any: ...
	def UnspecifiedLocal(self, *args, **kwargs) -> Any: ...
	def Utc(self, *args, **kwargs) -> Any: ...

class FillErrorEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Continue(self): ...

	@Continue.setter
	def Continue(self, value): ...

	@property
	def DataTable(self): ...

	@DataTable.setter
	def DataTable(self, value): ...

	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def Errors(self): ...

	@Errors.setter
	def Errors(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Values(self): ...

	@Values.setter
	def Values(self, value): ...

	def get_Continue(self) -> bool: ...
	def get_DataTable(self) -> DataTable: ...
	def get_Errors(self) -> Exception: ...
	def get_Values(self) -> List[object]: ...
	def set_Continue(self, _: bool) -> None: ...
	def set_Errors(self, _: Exception) -> None: ...

class DataRowAction:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, *args, **kwargs) -> Any: ...
	def Change(self, *args, **kwargs) -> Any: ...
	def ChangeCurrentAndOriginal(self, *args, **kwargs) -> Any: ...
	def ChangeOriginal(self, *args, **kwargs) -> Any: ...
	def Commit(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Delete(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Nothing(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Rollback(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class MergeFailedEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: MergeFailedEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: MergeFailedEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class DataViewManager:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Container(self): ...

	@Container.setter
	def Container(self, value): ...

	def CreateDataView(self, _: DataTable) -> DataView: ...

	@property
	def DataSet(self): ...

	@DataSet.setter
	def DataSet(self, value): ...

	@property
	def DataViewSettingCollectionString(self): ...

	@DataViewSettingCollectionString.setter
	def DataViewSettingCollectionString(self, value): ...

	@property
	def DataViewSettings(self): ...

	@DataViewSettings.setter
	def DataViewSettings(self, value): ...

	@property
	def DesignMode(self): ...

	@DesignMode.setter
	def DesignMode(self, value): ...

	def Dispose(self, _: bool) -> None: ...
	def Disposed(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def Events(self): ...

	@Events.setter
	def Events(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetService(self, _: Type) -> object: ...
	def GetType(self) -> Type: ...
	def ListChanged(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def OnListChanged(self, _: System.ComponentModel.ListChangedEventArgs) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	def RelationCollectionChanged(
			self,
			_: object,
			__: System.ComponentModel.CollectionChangeEventArgs,
			) -> None: ...

	@property
	def Site(self): ...

	@Site.setter
	def Site(self, value): ...

	def TableCollectionChanged(
			self,
			_: object,
			__: System.ComponentModel.CollectionChangeEventArgs,
			) -> None: ...

	def ToString(self) -> str: ...
	def add_Disposed(self, _: Any) -> None: ...
	def add_ListChanged(self, _: System.ComponentModel.ListChangedEventHandler) -> None: ...
	def get_Container(self) -> System.ComponentModel.IContainer: ...
	def get_DataSet(self) -> DataSet: ...
	def get_DataViewSettingCollectionString(self) -> str: ...
	def get_DataViewSettings(self) -> DataViewSettingCollection: ...
	def get_DesignMode(self) -> bool: ...
	def get_Events(self) -> System.ComponentModel.EventHandlerList: ...
	def get_Site(self) -> System.ComponentModel.ISite: ...
	def remove_Disposed(self, _: Any) -> None: ...

	def remove_ListChanged(
			self,
			_: System.ComponentModel.ListChangedEventHandler,
			) -> None: ...

	def set_DataSet(self, _: DataSet) -> None: ...
	def set_DataViewSettingCollectionString(self, _: str) -> None: ...
	def set_Site(self, _: System.ComponentModel.ISite) -> None: ...

class DataTableCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: str, __: str) -> DataTable: ...
	def AddRange(self, _: List[DataTable]) -> None: ...
	def CanRemove(self, _: DataTable) -> bool: ...
	def Clear(self) -> None: ...
	def CollectionChanged(self, *args, **kwargs) -> Any: ...
	def CollectionChanging(self, *args, **kwargs) -> Any: ...
	def Contains(self, _: str, __: str) -> bool: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IndexOf(self, _: str, __: str) -> int: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: str, __: str) -> None: ...
	def RemoveAt(self, _: int) -> None: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...

	def add_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def add_CollectionChanging(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> DataTable: ...
	def get_List(self) -> List: ...
	def get_SyncRoot(self) -> object: ...

	def remove_CollectionChanged(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

	def remove_CollectionChanging(
			self,
			_: System.ComponentModel.CollectionChangeEventHandler,
			) -> None: ...

class DataRowView:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginEdit(self) -> None: ...
	def CancelEdit(self) -> None: ...
	def CreateChildView(self, _: str, __: bool) -> DataView: ...

	@property
	def DataView(self): ...

	@DataView.setter
	def DataView(self, value): ...

	def Delete(self) -> None: ...
	def EndEdit(self) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsEdit(self): ...

	@IsEdit.setter
	def IsEdit(self, value): ...

	@property
	def IsNew(self): ...

	@IsNew.setter
	def IsNew(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def PropertyChanged(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Row(self): ...

	@Row.setter
	def Row(self, value): ...

	@property
	def RowVersion(self): ...

	@RowVersion.setter
	def RowVersion(self, value): ...

	def ToString(self) -> str: ...

	def add_PropertyChanged(
			self,
			_: System.ComponentModel.PropertyChangedEventHandler,
			) -> None: ...

	def get_DataView(self) -> DataView: ...
	def get_IsEdit(self) -> bool: ...
	def get_IsNew(self) -> bool: ...
	def get_Item(self, _: str) -> object: ...
	def get_Row(self) -> List: ...
	def get_RowVersion(self) -> DataRowVersion: ...

	def remove_PropertyChanged(
			self,
			_: System.ComponentModel.PropertyChangedEventHandler,
			) -> None: ...

	def set_Item(self, _: str, __: object) -> None: ...

class MergeFailedEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Conflict(self): ...

	@Conflict.setter
	def Conflict(self, value): ...

	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def get_Conflict(self) -> str: ...
	def get_Table(self) -> DataTable: ...

class DataViewSettingCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CopyTo(self, _: List, __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def IsSynchronized(self): ...

	@IsSynchronized.setter
	def IsSynchronized(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SyncRoot(self): ...

	@SyncRoot.setter
	def SyncRoot(self, value): ...

	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_IsSynchronized(self) -> bool: ...
	def get_Item(self, _: str) -> DataViewSetting: ...
	def get_SyncRoot(self) -> object: ...
	def set_Item(self, _: int, __: DataViewSetting) -> None: ...

class DataViewSetting:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def ApplyDefaultSort(self): ...

	@ApplyDefaultSort.setter
	def ApplyDefaultSort(self, value): ...

	@property
	def DataViewManager(self): ...

	@DataViewManager.setter
	def DataViewManager(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def RowFilter(self): ...

	@RowFilter.setter
	def RowFilter(self, value): ...

	@property
	def RowStateFilter(self): ...

	@RowStateFilter.setter
	def RowStateFilter(self, value): ...

	@property
	def Sort(self): ...

	@Sort.setter
	def Sort(self, value): ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def get_ApplyDefaultSort(self) -> bool: ...
	def get_DataViewManager(self) -> DataViewManager: ...
	def get_RowFilter(self) -> str: ...
	def get_RowStateFilter(self) -> DataViewRowState: ...
	def get_Sort(self) -> str: ...
	def get_Table(self) -> DataTable: ...
	def set_ApplyDefaultSort(self, _: bool) -> None: ...
	def set_RowFilter(self, _: str) -> None: ...
	def set_RowStateFilter(self, _: DataViewRowState) -> None: ...
	def set_Sort(self, _: str) -> None: ...

class Constraint:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def _DataSet(self): ...

	@_DataSet.setter
	def _DataSet(self, value): ...

	def CheckStateForProperty(self) -> None: ...

	@property
	def ConstraintName(self): ...

	@ConstraintName.setter
	def ConstraintName(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetDataSet(self, _: DataSet) -> None: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def get__DataSet(self) -> DataSet: ...
	def get_ConstraintName(self) -> str: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_Table(self) -> DataTable: ...
	def set_ConstraintName(self, _: str) -> None: ...

class ForeignKeyConstraint:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def _DataSet(self): ...

	@_DataSet.setter
	def _DataSet(self, value): ...

	@property
	def AcceptRejectRule(self): ...

	@AcceptRejectRule.setter
	def AcceptRejectRule(self, value): ...

	def CheckStateForProperty(self) -> None: ...

	@property
	def Columns(self): ...

	@Columns.setter
	def Columns(self, value): ...

	@property
	def ConstraintName(self): ...

	@ConstraintName.setter
	def ConstraintName(self, value): ...

	@property
	def DeleteRule(self): ...

	@DeleteRule.setter
	def DeleteRule(self, value): ...

	def Equals(self, _: object) -> bool: ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def RelatedColumns(self): ...

	@RelatedColumns.setter
	def RelatedColumns(self, value): ...

	@property
	def RelatedTable(self): ...

	@RelatedTable.setter
	def RelatedTable(self, value): ...

	def SetDataSet(self, _: DataSet) -> None: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...

	@property
	def UpdateRule(self): ...

	@UpdateRule.setter
	def UpdateRule(self, value): ...

	def get__DataSet(self) -> DataSet: ...
	def get_AcceptRejectRule(self) -> AcceptRejectRule: ...
	def get_Columns(self) -> List[List]: ...
	def get_ConstraintName(self) -> str: ...
	def get_DeleteRule(self) -> Rule: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_RelatedColumns(self) -> List[List]: ...
	def get_RelatedTable(self) -> DataTable: ...
	def get_Table(self) -> DataTable: ...
	def get_UpdateRule(self) -> Rule: ...
	def set_AcceptRejectRule(self, _: AcceptRejectRule) -> None: ...
	def set_ConstraintName(self, _: str) -> None: ...
	def set_DeleteRule(self, _: Rule) -> None: ...
	def set_UpdateRule(self, _: Rule) -> None: ...

class UniqueConstraint:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def _DataSet(self): ...

	@_DataSet.setter
	def _DataSet(self, value): ...

	def CheckStateForProperty(self) -> None: ...

	@property
	def Columns(self): ...

	@Columns.setter
	def Columns(self, value): ...

	@property
	def ConstraintName(self): ...

	@ConstraintName.setter
	def ConstraintName(self, value): ...

	def Equals(self, _: object) -> bool: ...

	@property
	def ExtendedProperties(self): ...

	@ExtendedProperties.setter
	def ExtendedProperties(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsPrimaryKey(self): ...

	@IsPrimaryKey.setter
	def IsPrimaryKey(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetDataSet(self, _: DataSet) -> None: ...

	@property
	def Table(self): ...

	@Table.setter
	def Table(self, value): ...

	def ToString(self) -> str: ...
	def get__DataSet(self) -> DataSet: ...
	def get_Columns(self) -> List[List]: ...
	def get_ConstraintName(self) -> str: ...
	def get_ExtendedProperties(self) -> PropertyCollection: ...
	def get_IsPrimaryKey(self) -> bool: ...
	def get_Table(self) -> DataTable: ...
	def set_ConstraintName(self, _: str) -> None: ...

class Rule:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Cascade(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetDefault(self, *args, **kwargs) -> Any: ...
	def SetNull(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class SchemaSerializationMode:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def ExcludeSchema(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IncludeSchema(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
