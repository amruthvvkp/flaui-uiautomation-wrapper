from __future__ import annotations

# stdlib
from enum import Enum
from typing import Any, Dict, List, Type

# 3rd party
import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
from System.ComponentModel import MarshalByValueComponent

# this package
from . import Schema, Serialization

class XmlReader:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def AttributeCount(self): ...

	@AttributeCount.setter
	def AttributeCount(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def CanReadBinaryContent(self): ...

	@CanReadBinaryContent.setter
	def CanReadBinaryContent(self, value): ...

	@property
	def CanReadValueChunk(self): ...

	@CanReadValueChunk.setter
	def CanReadValueChunk(self, value): ...

	@property
	def CanResolveEntity(self): ...

	@CanResolveEntity.setter
	def CanResolveEntity(self, value): ...

	def Close(self) -> None: ...

	def Create(
			self,
			_: System.IO.TextReader,
			__: XmlReaderSettings,
			___: str,
			) -> XmlReader: ...

	@property
	def Depth(self): ...

	@Depth.setter
	def Depth(self, value): ...

	def Dispose(self, _: bool) -> None: ...

	@property
	def EOF(self): ...

	@EOF.setter
	def EOF(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetAttribute(self, _: str, __: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def GetValueAsync(self) -> System.Threading.Tasks.Task[str]: ...

	@property
	def HasAttributes(self): ...

	@HasAttributes.setter
	def HasAttributes(self, value): ...

	@property
	def HasValue(self): ...

	@HasValue.setter
	def HasValue(self, value): ...

	@property
	def IsDefault(self): ...

	@IsDefault.setter
	def IsDefault(self, value): ...

	@property
	def IsEmptyElement(self): ...

	@IsEmptyElement.setter
	def IsEmptyElement(self, value): ...

	def IsName(self, _: str) -> bool: ...
	def IsNameToken(self, _: str) -> bool: ...
	def IsStartElement(self, _: str, __: str) -> bool: ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def LookupNamespace(self, _: str) -> str: ...
	def MemberwiseClone(self) -> object: ...
	def MoveToAttribute(self, _: str, __: str) -> bool: ...
	def MoveToContent(self) -> XmlNodeType: ...
	def MoveToContentAsync(self) -> System.Threading.Tasks.Task[XmlNodeType]: ...
	def MoveToElement(self) -> bool: ...
	def MoveToFirstAttribute(self) -> bool: ...
	def MoveToNextAttribute(self) -> bool: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NameTable(self): ...

	@NameTable.setter
	def NameTable(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	@property
	def QuoteChar(self): ...

	@QuoteChar.setter
	def QuoteChar(self, value): ...

	def Read(self) -> bool: ...
	def ReadAsync(self) -> System.Threading.Tasks.Task[bool]: ...
	def ReadAttributeValue(self) -> bool: ...
	def ReadContentAs(self, _: Type, __: IXmlNamespaceResolver) -> object: ...

	def ReadContentAsAsync(
			self,
			_: Type,
			__: IXmlNamespaceResolver,
			) -> System.Threading.Tasks.Task[object]: ...

	def ReadContentAsBase64(self, _: List[bytes], __: int, ___: int) -> int: ...

	def ReadContentAsBase64Async(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def ReadContentAsBinHex(self, _: List[bytes], __: int, ___: int) -> int: ...

	def ReadContentAsBinHexAsync(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def ReadContentAsBoolean(self) -> bool: ...
	def ReadContentAsDateTime(self) -> System.DateTime: ...
	def ReadContentAsDateTimeOffset(self) -> System.DateTimeOffset: ...
	def ReadContentAsDecimal(self) -> float: ...
	def ReadContentAsDouble(self) -> float: ...
	def ReadContentAsFloat(self) -> float: ...
	def ReadContentAsInt(self) -> int: ...
	def ReadContentAsLong(self) -> int: ...
	def ReadContentAsObject(self) -> object: ...
	def ReadContentAsObjectAsync(self) -> System.Threading.Tasks.Task[object]: ...
	def ReadContentAsString(self) -> str: ...
	def ReadContentAsStringAsync(self) -> System.Threading.Tasks.Task[str]: ...

	def ReadElementContentAs(
			self,
			_: Type,
			__: IXmlNamespaceResolver,
			___: str,
			____: str,
			) -> object: ...

	def ReadElementContentAsAsync(
			self,
			_: Type,
			__: IXmlNamespaceResolver,
			) -> System.Threading.Tasks.Task[object]: ...

	def ReadElementContentAsBase64(self, _: List[bytes], __: int, ___: int) -> int: ...

	def ReadElementContentAsBase64Async(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def ReadElementContentAsBinHex(self, _: List[bytes], __: int, ___: int) -> int: ...

	def ReadElementContentAsBinHexAsync(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def ReadElementContentAsBoolean(self, _: str, __: str) -> bool: ...
	def ReadElementContentAsDateTime(self, _: str, __: str) -> System.DateTime: ...
	def ReadElementContentAsDecimal(self, _: str, __: str) -> float: ...
	def ReadElementContentAsDouble(self, _: str, __: str) -> float: ...
	def ReadElementContentAsFloat(self, _: str, __: str) -> float: ...
	def ReadElementContentAsInt(self, _: str, __: str) -> int: ...
	def ReadElementContentAsLong(self, _: str, __: str) -> int: ...
	def ReadElementContentAsObject(self, _: str, __: str) -> object: ...
	def ReadElementContentAsObjectAsync(self) -> System.Threading.Tasks.Task[object]: ...
	def ReadElementContentAsString(self, _: str, __: str) -> str: ...
	def ReadElementContentAsStringAsync(self) -> System.Threading.Tasks.Task[str]: ...
	def ReadElementString(self, _: str, __: str) -> str: ...
	def ReadEndElement(self) -> None: ...
	def ReadInnerXml(self) -> str: ...
	def ReadInnerXmlAsync(self) -> System.Threading.Tasks.Task[str]: ...
	def ReadOuterXml(self) -> str: ...
	def ReadOuterXmlAsync(self) -> System.Threading.Tasks.Task[str]: ...
	def ReadStartElement(self, _: str, __: str) -> None: ...

	@property
	def ReadState(self): ...

	@ReadState.setter
	def ReadState(self, value): ...

	def ReadString(self) -> str: ...
	def ReadSubtree(self) -> XmlReader: ...
	def ReadToDescendant(self, _: str, __: str) -> bool: ...
	def ReadToFollowing(self, _: str, __: str) -> bool: ...
	def ReadToNextSibling(self, _: str, __: str) -> bool: ...
	def ReadValueChunk(self, _: List[str], __: int, ___: int) -> int: ...

	def ReadValueChunkAsync(
			self,
			_: List[str],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ResolveEntity(self) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	@property
	def Settings(self): ...

	@Settings.setter
	def Settings(self, value): ...

	def Skip(self) -> None: ...
	def SkipAsync(self) -> System.Threading.Tasks.Task: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	@property
	def ValueType(self): ...

	@ValueType.setter
	def ValueType(self, value): ...

	@property
	def XmlLang(self): ...

	@XmlLang.setter
	def XmlLang(self, value): ...

	@property
	def XmlSpace(self): ...

	@XmlSpace.setter
	def XmlSpace(self, value): ...

	def get_AttributeCount(self) -> int: ...
	def get_BaseURI(self) -> str: ...
	def get_CanReadBinaryContent(self) -> bool: ...
	def get_CanReadValueChunk(self) -> bool: ...
	def get_CanResolveEntity(self) -> bool: ...
	def get_Depth(self) -> int: ...
	def get_EOF(self) -> bool: ...
	def get_HasAttributes(self) -> bool: ...
	def get_HasValue(self) -> bool: ...
	def get_IsDefault(self) -> bool: ...
	def get_IsEmptyElement(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> str: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NameTable(self) -> XmlNameTable: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_Prefix(self) -> str: ...
	def get_QuoteChar(self) -> str: ...
	def get_ReadState(self) -> ReadState: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Settings(self) -> XmlReaderSettings: ...
	def get_Value(self) -> str: ...
	def get_ValueType(self) -> Type: ...
	def get_XmlLang(self) -> str: ...
	def get_XmlSpace(self) -> XmlSpace: ...

class XmlWriter:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Close(self) -> None: ...
	def Create(self, _: str, __: XmlWriterSettings) -> XmlWriter: ...
	def Dispose(self, _: bool) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Flush(self) -> None: ...
	def FlushAsync(self) -> System.Threading.Tasks.Task: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def LookupPrefix(self, _: str) -> str: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Settings(self): ...

	@Settings.setter
	def Settings(self, value): ...

	def ToString(self) -> str: ...
	def WriteAttributeString(self, _: str, __: str, ___: str, ____: str) -> None: ...

	def WriteAttributeStringAsync(
			self,
			_: str,
			__: str,
			___: str,
			____: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteAttributes(self, _: XmlReader, __: bool) -> None: ...

	def WriteAttributesAsync(
			self,
			_: XmlReader,
			__: bool,
			) -> System.Threading.Tasks.Task: ...

	def WriteBase64(self, _: List[bytes], __: int, ___: int) -> None: ...

	def WriteBase64Async(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def WriteBinHex(self, _: List[bytes], __: int, ___: int) -> None: ...

	def WriteBinHexAsync(
			self,
			_: List[bytes],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def WriteCData(self, _: str) -> None: ...
	def WriteCDataAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteCharEntity(self, _: str) -> None: ...
	def WriteCharEntityAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteChars(self, _: List[str], __: int, ___: int) -> None: ...

	def WriteCharsAsync(
			self,
			_: List[str],
			__: int,
			___: int,
			) -> System.Threading.Tasks.Task: ...

	def WriteComment(self, _: str) -> None: ...
	def WriteCommentAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteDocType(self, _: str, __: str, ___: str, ____: str) -> None: ...

	def WriteDocTypeAsync(
			self,
			_: str,
			__: str,
			___: str,
			____: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteElementString(self, _: str, __: str, ___: str, ____: str) -> None: ...

	def WriteElementStringAsync(
			self,
			_: str,
			__: str,
			___: str,
			____: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteEndAttribute(self) -> None: ...
	def WriteEndAttributeAsync(self) -> System.Threading.Tasks.Task: ...
	def WriteEndDocument(self) -> None: ...
	def WriteEndDocumentAsync(self) -> System.Threading.Tasks.Task: ...
	def WriteEndElement(self) -> None: ...
	def WriteEndElementAsync(self) -> System.Threading.Tasks.Task: ...
	def WriteEntityRef(self, _: str) -> None: ...
	def WriteEntityRefAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteFullEndElement(self) -> None: ...
	def WriteFullEndElementAsync(self) -> System.Threading.Tasks.Task: ...
	def WriteName(self, _: str) -> None: ...
	def WriteNameAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteNmToken(self, _: str) -> None: ...
	def WriteNmTokenAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteNode(self, _: Any, __: bool) -> None: ...

	def WriteNodeAsync(
			self,
			_: XmlReader,
			__: bool,
			) -> System.Threading.Tasks.Task: ...

	def WriteProcessingInstruction(self, _: str, __: str) -> None: ...

	def WriteProcessingInstructionAsync(
			self,
			_: str,
			__: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteQualifiedName(self, _: str, __: str) -> None: ...
	def WriteQualifiedNameAsync(self, _: str, __: str) -> System.Threading.Tasks.Task: ...
	def WriteRaw(self, _: str) -> None: ...
	def WriteRawAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteStartAttribute(self, _: str, __: str, ___: str) -> None: ...

	def WriteStartAttributeAsync(
			self,
			_: str,
			__: str,
			___: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteStartDocument(self, _: bool) -> None: ...
	def WriteStartDocumentAsync(self, _: bool) -> System.Threading.Tasks.Task: ...
	def WriteStartElement(self, _: str, __: str, ___: str) -> None: ...

	def WriteStartElementAsync(
			self,
			_: str,
			__: str,
			___: str,
			) -> System.Threading.Tasks.Task: ...

	@property
	def WriteState(self): ...

	@WriteState.setter
	def WriteState(self, value): ...

	def WriteString(self, _: str) -> None: ...
	def WriteStringAsync(self, _: str) -> System.Threading.Tasks.Task: ...
	def WriteSurrogateCharEntity(self, _: str, __: str) -> None: ...

	def WriteSurrogateCharEntityAsync(
			self,
			_: str,
			__: str,
			) -> System.Threading.Tasks.Task: ...

	def WriteValue(self, _: object) -> None: ...
	def WriteWhitespace(self, _: str) -> None: ...
	def WriteWhitespaceAsync(self, _: str) -> System.Threading.Tasks.Task: ...

	@property
	def XmlLang(self): ...

	@XmlLang.setter
	def XmlLang(self, value): ...

	@property
	def XmlSpace(self): ...

	@XmlSpace.setter
	def XmlSpace(self, value): ...

	def get_Settings(self) -> XmlWriterSettings: ...
	def get_WriteState(self) -> WriteState: ...
	def get_XmlLang(self) -> str: ...
	def get_XmlSpace(self) -> XmlSpace: ...

class XmlReaderSettings:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Async(self): ...

	@Async.setter
	def Async(self, value): ...

	@property
	def CheckCharacters(self): ...

	@CheckCharacters.setter
	def CheckCharacters(self, value): ...

	def Clone(self) -> XmlReaderSettings: ...

	@property
	def CloseInput(self): ...

	@CloseInput.setter
	def CloseInput(self, value): ...

	@property
	def ConformanceLevel(self): ...

	@ConformanceLevel.setter
	def ConformanceLevel(self, value): ...

	@property
	def DtdProcessing(self): ...

	@DtdProcessing.setter
	def DtdProcessing(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IgnoreComments(self): ...

	@IgnoreComments.setter
	def IgnoreComments(self, value): ...

	@property
	def IgnoreProcessingInstructions(self): ...

	@IgnoreProcessingInstructions.setter
	def IgnoreProcessingInstructions(self, value): ...

	@property
	def IgnoreWhitespace(self): ...

	@IgnoreWhitespace.setter
	def IgnoreWhitespace(self, value): ...

	@property
	def LineNumberOffset(self): ...

	@LineNumberOffset.setter
	def LineNumberOffset(self, value): ...

	@property
	def LinePositionOffset(self): ...

	@LinePositionOffset.setter
	def LinePositionOffset(self, value): ...

	@property
	def MaxCharactersFromEntities(self): ...

	@MaxCharactersFromEntities.setter
	def MaxCharactersFromEntities(self, value): ...

	@property
	def MaxCharactersInDocument(self): ...

	@MaxCharactersInDocument.setter
	def MaxCharactersInDocument(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def NameTable(self): ...

	@NameTable.setter
	def NameTable(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ProhibitDtd(self): ...

	@ProhibitDtd.setter
	def ProhibitDtd(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Reset(self) -> None: ...

	@property
	def Schemas(self): ...

	@Schemas.setter
	def Schemas(self, value): ...

	def ToString(self) -> str: ...
	def ValidationEventHandler(self, *args, **kwargs) -> Any: ...

	@property
	def ValidationFlags(self): ...

	@ValidationFlags.setter
	def ValidationFlags(self, value): ...

	@property
	def ValidationType(self): ...

	@ValidationType.setter
	def ValidationType(self, value): ...

	@property
	def XmlResolver(self): ...

	@XmlResolver.setter
	def XmlResolver(self, value): ...

	def add_ValidationEventHandler(
			self,
			_: Schema.ValidationEventHandler,
			) -> None: ...

	def get_Async(self) -> bool: ...
	def get_CheckCharacters(self) -> bool: ...
	def get_CloseInput(self) -> bool: ...
	def get_ConformanceLevel(self) -> ConformanceLevel: ...
	def get_DtdProcessing(self) -> DtdProcessing: ...
	def get_IgnoreComments(self) -> bool: ...
	def get_IgnoreProcessingInstructions(self) -> bool: ...
	def get_IgnoreWhitespace(self) -> bool: ...
	def get_LineNumberOffset(self) -> int: ...
	def get_LinePositionOffset(self) -> int: ...
	def get_MaxCharactersFromEntities(self) -> int: ...
	def get_MaxCharactersInDocument(self) -> int: ...
	def get_NameTable(self) -> XmlNameTable: ...
	def get_ProhibitDtd(self) -> bool: ...
	def get_Schemas(self) -> Schema.XmlSchemaSet: ...
	def get_ValidationFlags(self) -> Schema.XmlSchemaValidationFlags: ...
	def get_ValidationType(self) -> ValidationType: ...

	def remove_ValidationEventHandler(
			self,
			_: Schema.ValidationEventHandler,
			) -> None: ...

	def set_Async(self, _: bool) -> None: ...
	def set_CheckCharacters(self, _: bool) -> None: ...
	def set_CloseInput(self, _: bool) -> None: ...
	def set_ConformanceLevel(self, _: ConformanceLevel) -> None: ...
	def set_DtdProcessing(self, _: DtdProcessing) -> None: ...
	def set_IgnoreComments(self, _: bool) -> None: ...
	def set_IgnoreProcessingInstructions(self, _: bool) -> None: ...
	def set_IgnoreWhitespace(self, _: bool) -> None: ...
	def set_LineNumberOffset(self, _: int) -> None: ...
	def set_LinePositionOffset(self, _: int) -> None: ...
	def set_MaxCharactersFromEntities(self, _: int) -> None: ...
	def set_MaxCharactersInDocument(self, _: int) -> None: ...
	def set_NameTable(self, _: XmlNameTable) -> None: ...
	def set_ProhibitDtd(self, _: bool) -> None: ...
	def set_Schemas(self, _: Schema.XmlSchemaSet) -> None: ...

	def set_ValidationFlags(
			self,
			_: Schema.XmlSchemaValidationFlags,
			) -> None: ...

	def set_ValidationType(self, _: ValidationType) -> None: ...
	def set_XmlResolver(self, _: XmlResolver) -> None: ...

class XmlNodeType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Attribute(self, *args, **kwargs) -> Any: ...
	def CDATA(self, *args, **kwargs) -> Any: ...
	def Comment(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Document(self, *args, **kwargs) -> Any: ...
	def DocumentFragment(self, *args, **kwargs) -> Any: ...
	def DocumentType(self, *args, **kwargs) -> Any: ...
	def Element(self, *args, **kwargs) -> Any: ...
	def EndElement(self, *args, **kwargs) -> Any: ...
	def EndEntity(self, *args, **kwargs) -> Any: ...
	def Entity(self, *args, **kwargs) -> Any: ...
	def EntityReference(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Notation(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ProcessingInstruction(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SignificantWhitespace(self, *args, **kwargs) -> Any: ...
	def Text(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Whitespace(self, *args, **kwargs) -> Any: ...
	def XmlDeclaration(self, *args, **kwargs) -> Any: ...

class IXmlNamespaceResolver:
	def __init__(self, *args, **kwargs) -> Any: ...
	def GetNamespacesInScope(self, _: XmlNamespaceScope) -> Dict[str, str]: ...
	def LookupNamespace(self, _: str) -> str: ...
	def LookupPrefix(self, _: str) -> str: ...

class XmlNameTable:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: str) -> str: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Get(self, _: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class XmlWriterSettings:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Async(self): ...

	@Async.setter
	def Async(self, value): ...

	@property
	def CheckCharacters(self): ...

	@CheckCharacters.setter
	def CheckCharacters(self, value): ...

	def Clone(self) -> XmlWriterSettings: ...

	@property
	def CloseOutput(self): ...

	@CloseOutput.setter
	def CloseOutput(self, value): ...

	@property
	def ConformanceLevel(self): ...

	@ConformanceLevel.setter
	def ConformanceLevel(self, value): ...

	@property
	def DoNotEscapeUriAttributes(self): ...

	@DoNotEscapeUriAttributes.setter
	def DoNotEscapeUriAttributes(self, value): ...

	@property
	def Encoding(self): ...

	@Encoding.setter
	def Encoding(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def Indent(self): ...

	@Indent.setter
	def Indent(self, value): ...

	@property
	def IndentChars(self): ...

	@IndentChars.setter
	def IndentChars(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def NamespaceHandling(self): ...

	@NamespaceHandling.setter
	def NamespaceHandling(self, value): ...

	@property
	def NewLineChars(self): ...

	@NewLineChars.setter
	def NewLineChars(self, value): ...

	@property
	def NewLineHandling(self): ...

	@NewLineHandling.setter
	def NewLineHandling(self, value): ...

	@property
	def NewLineOnAttributes(self): ...

	@NewLineOnAttributes.setter
	def NewLineOnAttributes(self, value): ...

	@property
	def OmitXmlDeclaration(self): ...

	@OmitXmlDeclaration.setter
	def OmitXmlDeclaration(self, value): ...

	@property
	def OutputMethod(self): ...

	@OutputMethod.setter
	def OutputMethod(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Reset(self) -> None: ...
	def ToString(self) -> str: ...

	@property
	def WriteEndDocumentOnClose(self): ...

	@WriteEndDocumentOnClose.setter
	def WriteEndDocumentOnClose(self, value): ...

	def get_Async(self) -> bool: ...
	def get_CheckCharacters(self) -> bool: ...
	def get_CloseOutput(self) -> bool: ...
	def get_ConformanceLevel(self) -> ConformanceLevel: ...
	def get_DoNotEscapeUriAttributes(self) -> bool: ...
	def get_Encoding(self) -> Any: ...
	def get_Indent(self) -> bool: ...
	def get_IndentChars(self) -> str: ...
	def get_NamespaceHandling(self) -> NamespaceHandling: ...
	def get_NewLineChars(self) -> str: ...
	def get_NewLineHandling(self) -> NewLineHandling: ...
	def get_NewLineOnAttributes(self) -> bool: ...
	def get_OmitXmlDeclaration(self) -> bool: ...
	def get_OutputMethod(self) -> XmlOutputMethod: ...
	def get_WriteEndDocumentOnClose(self) -> bool: ...
	def set_Async(self, _: bool) -> None: ...
	def set_CheckCharacters(self, _: bool) -> None: ...
	def set_CloseOutput(self, _: bool) -> None: ...
	def set_ConformanceLevel(self, _: ConformanceLevel) -> None: ...
	def set_DoNotEscapeUriAttributes(self, _: bool) -> None: ...
	def set_Encoding(self, _: Any) -> None: ...
	def set_Indent(self, _: bool) -> None: ...
	def set_IndentChars(self, _: str) -> None: ...
	def set_NamespaceHandling(self, _: NamespaceHandling) -> None: ...
	def set_NewLineChars(self, _: str) -> None: ...
	def set_NewLineHandling(self, _: NewLineHandling) -> None: ...
	def set_NewLineOnAttributes(self, _: bool) -> None: ...
	def set_OmitXmlDeclaration(self, _: bool) -> None: ...
	def set_WriteEndDocumentOnClose(self, _: bool) -> None: ...

class XmlResolver:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Credentials(self): ...

	@Credentials.setter
	def Credentials(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEntity(self, _: Any, __: str, ___: Type) -> object: ...

	def GetEntityAsync(
			self,
			_: Any,
			__: str,
			___: Type,
			) -> System.Threading.Tasks.Task[object]: ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ResolveUri(self, _: Any, __: str) -> Any: ...
	def SupportsType(self, _: Any, __: Type) -> bool: ...
	def ToString(self) -> str: ...
	def set_Credentials(self, _: Any) -> None: ...

class XmlQualifiedName:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IsEmpty(self): ...

	@IsEmpty.setter
	def IsEmpty(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def Namespace(self): ...

	@Namespace.setter
	def Namespace(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self, _: str, __: str) -> str: ...
	def get_IsEmpty(self) -> bool: ...
	def get_Name(self) -> str: ...
	def get_Namespace(self) -> str: ...

	def op_Equality(
			self,
			_: XmlQualifiedName,
			__: XmlQualifiedName,
			) -> bool: ...

	def op_Inequality(
			self,
			_: XmlQualifiedName,
			__: XmlQualifiedName,
			) -> bool: ...

class XmlAttribute:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def OwnerElement(self): ...

	@OwnerElement.setter
	def OwnerElement(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	@property
	def Specified(self): ...

	@Specified.setter
	def Specified(self, value): ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_OwnerElement(self) -> XmlElement: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Specified(self) -> bool: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlTokenizedType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CDATA(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def ENTITIES(self, *args, **kwargs) -> Any: ...
	def ENTITY(self, *args, **kwargs) -> Any: ...
	def ENUMERATION(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def ID(self, *args, **kwargs) -> Any: ...
	def IDREF(self, *args, **kwargs) -> Any: ...
	def IDREFS(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def NCName(self, *args, **kwargs) -> Any: ...
	def NMTOKEN(self, *args, **kwargs) -> Any: ...
	def NMTOKENS(self, *args, **kwargs) -> Any: ...
	def NOTATION(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def QName(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlOutputMethod:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AutoDetect(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Html(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Text(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Xml(self, *args, **kwargs) -> Any: ...

class XmlNode:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlNodeList:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def Item(self, _: int) -> XmlNode: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def PrivateDisposeNodeList(self) -> None: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...
	def get_ItemOf(self, _: int) -> XmlNode: ...

class XmlNamespaceManager:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AddNamespace(self, _: str, __: str) -> None: ...

	@property
	def DefaultNamespace(self): ...

	@DefaultNamespace.setter
	def DefaultNamespace(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespacesInScope(self, _: XmlNamespaceScope) -> Dict[str, str]: ...
	def GetType(self) -> Type: ...
	def HasNamespace(self, _: str) -> bool: ...
	def LookupNamespace(self, _: str) -> str: ...
	def LookupPrefix(self, _: str) -> str: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def NameTable(self): ...

	@NameTable.setter
	def NameTable(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def PopScope(self) -> bool: ...
	def PushScope(self) -> None: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveNamespace(self, _: str, __: str) -> None: ...
	def ToString(self) -> str: ...
	def get_DefaultNamespace(self) -> str: ...
	def get_NameTable(self) -> XmlNameTable: ...

class XmlAttributeCollection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Append(self, _: XmlAttribute) -> XmlAttribute: ...
	def CopyTo(self, _: List[XmlAttribute], __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamedItem(self, _: str, __: str) -> XmlNode: ...
	def GetType(self) -> Type: ...

	def InsertAfter(
			self,
			_: XmlAttribute,
			__: XmlAttribute,
			) -> XmlAttribute: ...

	def InsertBefore(
			self,
			_: XmlAttribute,
			__: XmlAttribute,
			) -> XmlAttribute: ...

	def Item(self, _: int) -> XmlNode: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Prepend(self, _: XmlAttribute) -> XmlAttribute: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: XmlAttribute) -> XmlAttribute: ...
	def RemoveAll(self) -> None: ...
	def RemoveAt(self, _: int) -> XmlAttribute: ...
	def RemoveNamedItem(self, _: str, __: str) -> XmlNode: ...
	def SetNamedItem(self, _: XmlNode) -> XmlNode: ...
	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...
	def get_ItemOf(self, _: str, __: str) -> XmlAttribute: ...

class XmlElement:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetAttribute(self, _: str, __: str) -> str: ...
	def GetAttributeNode(self, _: str, __: str) -> XmlAttribute: ...
	def GetElementsByTagName(self, _: str, __: str) -> XmlNodeList: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...
	def HasAttribute(self, _: str, __: str) -> bool: ...

	@property
	def HasAttributes(self): ...

	@HasAttributes.setter
	def HasAttributes(self, value): ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsEmpty(self): ...

	@IsEmpty.setter
	def IsEmpty(self, value): ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveAllAttributes(self) -> None: ...
	def RemoveAttribute(self, _: str, __: str) -> None: ...
	def RemoveAttributeAt(self, _: int) -> XmlNode: ...
	def RemoveAttributeNode(self, _: str, __: str) -> XmlAttribute: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def SetAttribute(self, _: str, __: str, ___: str) -> str: ...
	def SetAttributeNode(self, _: str, __: str) -> XmlAttribute: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasAttributes(self) -> bool: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsEmpty(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_IsEmpty(self, _: bool) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlNamespaceScope:
	def __init__(self, *args, **kwargs) -> Any: ...
	def All(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def ExcludeXml(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Local(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlDocument:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateAttribute(self, _: str, __: str, ___: str) -> XmlAttribute: ...
	def CreateCDataSection(self, _: str) -> XmlCDataSection: ...
	def CreateComment(self, _: str) -> XmlComment: ...

	def CreateDefaultAttribute(
			self,
			_: str,
			__: str,
			___: str,
			) -> XmlAttribute: ...

	def CreateDocumentFragment(self) -> XmlDocumentFragment: ...

	def CreateDocumentType(
			self,
			_: str,
			__: str,
			___: str,
			____: str,
			) -> XmlDocumentType: ...

	def CreateElement(self, _: str, __: str, ___: str) -> XmlElement: ...
	def CreateEntityReference(self, _: str) -> XmlEntityReference: ...
	def CreateNavigator(self, _: XmlNode) -> Any: ...

	def CreateNode(
			self,
			_: XmlNodeType,
			__: str,
			___: str,
			____: str,
			) -> XmlNode: ...

	def CreateProcessingInstruction(
			self,
			_: str,
			__: str,
			) -> XmlProcessingInstruction: ...

	def CreateSignificantWhitespace(
			self,
			_: str,
			) -> XmlSignificantWhitespace: ...

	def CreateTextNode(self, _: str) -> XmlText: ...
	def CreateWhitespace(self, _: str) -> XmlWhitespace: ...

	def CreateXmlDeclaration(
			self,
			_: str,
			__: str,
			___: str,
			) -> XmlDeclaration: ...

	@property
	def DocumentElement(self): ...

	@DocumentElement.setter
	def DocumentElement(self, value): ...

	@property
	def DocumentType(self): ...

	@DocumentType.setter
	def DocumentType(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetElementById(self, _: str) -> XmlElement: ...
	def GetElementsByTagName(self, _: str, __: str) -> XmlNodeList: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def Implementation(self): ...

	@Implementation.setter
	def Implementation(self, value): ...

	def ImportNode(self, _: XmlNode, __: bool) -> XmlNode: ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	def Load(self, _: str) -> None: ...
	def LoadXml(self, _: str) -> None: ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NameTable(self): ...

	@NameTable.setter
	def NameTable(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	def NodeChanged(self, *args, **kwargs) -> Any: ...
	def NodeChanging(self, *args, **kwargs) -> Any: ...
	def NodeInserted(self, *args, **kwargs) -> Any: ...
	def NodeInserting(self, *args, **kwargs) -> Any: ...
	def NodeRemoved(self, *args, **kwargs) -> Any: ...
	def NodeRemoving(self, *args, **kwargs) -> Any: ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreserveWhitespace(self): ...

	@PreserveWhitespace.setter
	def PreserveWhitespace(self, value): ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReadNode(self, _: XmlReader) -> XmlNode: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def Save(self, _: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	@property
	def Schemas(self): ...

	@Schemas.setter
	def Schemas(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	def Validate(
			self,
			_: Schema.ValidationEventHandler,
			__: XmlNode,
			) -> None: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...

	@property
	def XmlResolver(self): ...

	@XmlResolver.setter
	def XmlResolver(self, value): ...

	def add_NodeChanged(self, _: XmlNodeChangedEventHandler) -> None: ...
	def add_NodeChanging(self, _: XmlNodeChangedEventHandler) -> None: ...
	def add_NodeInserted(self, _: XmlNodeChangedEventHandler) -> None: ...
	def add_NodeInserting(self, _: XmlNodeChangedEventHandler) -> None: ...
	def add_NodeRemoved(self, _: XmlNodeChangedEventHandler) -> None: ...
	def add_NodeRemoving(self, _: XmlNodeChangedEventHandler) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_DocumentElement(self) -> XmlElement: ...
	def get_DocumentType(self) -> XmlDocumentType: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_Implementation(self) -> XmlImplementation: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NameTable(self) -> XmlNameTable: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreserveWhitespace(self) -> bool: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Schemas(self) -> Schema.XmlSchemaSet: ...
	def get_Value(self) -> str: ...
	def remove_NodeChanged(self, _: XmlNodeChangedEventHandler) -> None: ...
	def remove_NodeChanging(self, _: XmlNodeChangedEventHandler) -> None: ...
	def remove_NodeInserted(self, _: XmlNodeChangedEventHandler) -> None: ...
	def remove_NodeInserting(self, _: XmlNodeChangedEventHandler) -> None: ...
	def remove_NodeRemoved(self, _: XmlNodeChangedEventHandler) -> None: ...
	def remove_NodeRemoving(self, _: XmlNodeChangedEventHandler) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_PreserveWhitespace(self, _: bool) -> None: ...
	def set_Schemas(self, _: Schema.XmlSchemaSet) -> None: ...
	def set_Value(self, _: str) -> None: ...
	def set_XmlResolver(self, _: XmlResolver) -> None: ...

class XmlEntityReference:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlSignificantWhitespace:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...
	def AppendData(self, _: str) -> None: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def DeleteData(self, _: int, __: int) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertData(self, _: int, __: str) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def Length(self): ...

	@Length.setter
	def Length(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def ReplaceData(self, _: int, __: int, ___: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Substring(self, _: int, __: int) -> str: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_Length(self) -> int: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlDocumentFragment:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlText:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...
	def AppendData(self, _: str) -> None: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def DeleteData(self, _: int, __: int) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertData(self, _: int, __: str) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def Length(self): ...

	@Length.setter
	def Length(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def ReplaceData(self, _: int, __: int, ___: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def SplitText(self, _: int) -> XmlText: ...
	def Substring(self, _: int, __: int) -> str: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_Length(self) -> int: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlWhitespace:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...
	def AppendData(self, _: str) -> None: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def DeleteData(self, _: int, __: int) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertData(self, _: int, __: str) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def Length(self): ...

	@Length.setter
	def Length(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def ReplaceData(self, _: int, __: int, ___: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Substring(self, _: int, __: int) -> str: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_Length(self) -> int: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlDeclaration:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Encoding(self): ...

	@Encoding.setter
	def Encoding(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	@property
	def Standalone(self): ...

	@Standalone.setter
	def Standalone(self, value): ...

	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	@property
	def Version(self): ...

	@Version.setter
	def Version(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Encoding(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Standalone(self) -> str: ...
	def get_Value(self) -> str: ...
	def get_Version(self) -> str: ...
	def set_Encoding(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Standalone(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class ReadState:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Closed(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def EndOfFile(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Error(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Initial(self, *args, **kwargs) -> Any: ...
	def Interactive(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlSpace:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Default(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Preserve(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class NewLineHandling:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Entitize(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Replace(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class NamespaceHandling:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Default(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def OmitDuplicates(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlCDataSection:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...
	def AppendData(self, _: str) -> None: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def DeleteData(self, _: int, __: int) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertData(self, _: int, __: str) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def Length(self): ...

	@Length.setter
	def Length(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def ReplaceData(self, _: int, __: int, ___: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Substring(self, _: int, __: int) -> str: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_Length(self) -> int: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlComment:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...
	def AppendData(self, _: str) -> None: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def DeleteData(self, _: int, __: int) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertData(self, _: int, __: str) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def Length(self): ...

	@Length.setter
	def Length(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def ReplaceData(self, _: int, __: int, ___: str) -> None: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Substring(self, _: int, __: int) -> str: ...
	def Supports(self, _: str, __: str) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_Length(self) -> int: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlDocumentType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Entities(self): ...

	@Entities.setter
	def Entities(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def InternalSubset(self): ...

	@InternalSubset.setter
	def InternalSubset(self, value): ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def Notations(self): ...

	@Notations.setter
	def Notations(self, value): ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	@property
	def PublicId(self): ...

	@PublicId.setter
	def PublicId(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...

	@property
	def SystemId(self): ...

	@SystemId.setter
	def SystemId(self, value): ...

	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Entities(self) -> XmlNamedNodeMap: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_InternalSubset(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_Notations(self) -> XmlNamedNodeMap: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_PublicId(self) -> str: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_SystemId(self) -> str: ...
	def get_Value(self) -> str: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlProcessingInstruction:
	def __init__(self, *args, **kwargs) -> Any: ...
	def AppendChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def Attributes(self): ...

	@Attributes.setter
	def Attributes(self, value): ...

	@property
	def BaseURI(self): ...

	@BaseURI.setter
	def BaseURI(self, value): ...

	@property
	def ChildNodes(self): ...

	@ChildNodes.setter
	def ChildNodes(self, value): ...

	def Clone(self) -> XmlNode: ...
	def CloneNode(self, _: bool) -> XmlNode: ...
	def CreateNavigator(self) -> Any: ...

	@property
	def Data(self): ...

	@Data.setter
	def Data(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstChild(self): ...

	@FirstChild.setter
	def FirstChild(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamespaceOfPrefix(self, _: str) -> str: ...
	def GetPrefixOfNamespace(self, _: str) -> str: ...
	def GetType(self) -> Type: ...

	@property
	def HasChildNodes(self): ...

	@HasChildNodes.setter
	def HasChildNodes(self, value): ...

	@property
	def InnerText(self): ...

	@InnerText.setter
	def InnerText(self, value): ...

	@property
	def InnerXml(self): ...

	@InnerXml.setter
	def InnerXml(self, value): ...

	def InsertAfter(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	def InsertBefore(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	@property
	def LastChild(self): ...

	@LastChild.setter
	def LastChild(self, value): ...

	@property
	def LocalName(self): ...

	@LocalName.setter
	def LocalName(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	@property
	def NamespaceURI(self): ...

	@NamespaceURI.setter
	def NamespaceURI(self, value): ...

	@property
	def NextSibling(self): ...

	@NextSibling.setter
	def NextSibling(self, value): ...

	@property
	def NodeType(self): ...

	@NodeType.setter
	def NodeType(self, value): ...

	def Normalize(self) -> None: ...

	@property
	def OuterXml(self): ...

	@OuterXml.setter
	def OuterXml(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def OwnerDocument(self): ...

	@OwnerDocument.setter
	def OwnerDocument(self, value): ...

	@property
	def ParentNode(self): ...

	@ParentNode.setter
	def ParentNode(self, value): ...

	@property
	def Prefix(self): ...

	@Prefix.setter
	def Prefix(self, value): ...

	def PrependChild(self, _: XmlNode) -> XmlNode: ...

	@property
	def PreviousSibling(self): ...

	@PreviousSibling.setter
	def PreviousSibling(self, value): ...

	@property
	def PreviousText(self): ...

	@PreviousText.setter
	def PreviousText(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveAll(self) -> None: ...
	def RemoveChild(self, _: XmlNode) -> XmlNode: ...

	def ReplaceChild(
			self,
			_: XmlNode,
			__: XmlNode,
			) -> XmlNode: ...

	@property
	def SchemaInfo(self): ...

	@SchemaInfo.setter
	def SchemaInfo(self, value): ...

	def SelectNodes(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNodeList: ...

	def SelectSingleNode(
			self,
			_: str,
			__: XmlNamespaceManager,
			) -> XmlNode: ...

	def Supports(self, _: str, __: str) -> bool: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def WriteContentTo(self, _: XmlWriter) -> None: ...
	def WriteTo(self, _: XmlWriter) -> None: ...
	def get_Attributes(self) -> XmlAttributeCollection: ...
	def get_BaseURI(self) -> str: ...
	def get_ChildNodes(self) -> XmlNodeList: ...
	def get_Data(self) -> str: ...
	def get_FirstChild(self) -> XmlNode: ...
	def get_HasChildNodes(self) -> bool: ...
	def get_InnerText(self) -> str: ...
	def get_InnerXml(self) -> str: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: str, __: str) -> XmlElement: ...
	def get_LastChild(self) -> XmlNode: ...
	def get_LocalName(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_NamespaceURI(self) -> str: ...
	def get_NextSibling(self) -> XmlNode: ...
	def get_NodeType(self) -> XmlNodeType: ...
	def get_OuterXml(self) -> str: ...
	def get_OwnerDocument(self) -> XmlDocument: ...
	def get_ParentNode(self) -> XmlNode: ...
	def get_Prefix(self) -> str: ...
	def get_PreviousSibling(self) -> XmlNode: ...
	def get_PreviousText(self) -> XmlNode: ...
	def get_SchemaInfo(self) -> Schema.IXmlSchemaInfo: ...
	def get_Target(self) -> str: ...
	def get_Value(self) -> str: ...
	def set_Data(self, _: str) -> None: ...
	def set_InnerText(self, _: str) -> None: ...
	def set_InnerXml(self, _: str) -> None: ...
	def set_Prefix(self, _: str) -> None: ...
	def set_Value(self, _: str) -> None: ...

class XmlNodeChangedEventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: XmlNodeChangedEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: XmlNodeChangedEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class ValidationType:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Auto(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def DTD(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Schema(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def XDR(self, *args, **kwargs) -> Any: ...

class ConformanceLevel:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Auto(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Document(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def Fragment(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class DtdProcessing:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Ignore(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, *args, **kwargs) -> Any: ...
	def Prohibit(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class WriteState:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Attribute(self, *args, **kwargs) -> Any: ...
	def Closed(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Content(self, *args, **kwargs) -> Any: ...
	def Element(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Error(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Prolog(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Start(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class XmlNamedNodeMap:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetNamedItem(self, _: str, __: str) -> XmlNode: ...
	def GetType(self) -> Type: ...
	def Item(self, _: int) -> XmlNode: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def RemoveNamedItem(self, _: str, __: str) -> XmlNode: ...
	def SetNamedItem(self, _: XmlNode) -> XmlNode: ...
	def ToString(self) -> str: ...
	def get_Count(self) -> int: ...

class XmlImplementation:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CreateDocument(self) -> XmlDocument: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def HasFeature(self, _: str, __: str) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class XmlNodeChangedEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Action(self): ...

	@Action.setter
	def Action(self, value): ...

	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def NewParent(self): ...

	@NewParent.setter
	def NewParent(self, value): ...

	@property
	def NewValue(self): ...

	@NewValue.setter
	def NewValue(self, value): ...

	@property
	def Node(self): ...

	@Node.setter
	def Node(self, value): ...

	@property
	def OldParent(self): ...

	@OldParent.setter
	def OldParent(self, value): ...

	@property
	def OldValue(self): ...

	@OldValue.setter
	def OldValue(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_Action(self) -> XmlNodeChangedAction: ...
	def get_NewParent(self) -> XmlNode: ...
	def get_NewValue(self) -> str: ...
	def get_Node(self) -> XmlNode: ...
	def get_OldParent(self) -> XmlNode: ...
	def get_OldValue(self) -> str: ...

class XmlNodeChangedAction:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Change(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Insert(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
