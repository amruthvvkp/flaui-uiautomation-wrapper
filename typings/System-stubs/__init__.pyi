from __future__ import annotations

# stdlib
from enum import Enum
from typing import Any, List, Type

# this package
from . import (
		IO,
		Collections,
		ComponentModel,
		Configuration,
		Data,
		Globalization,
		Reflection,
		Runtime,
		Security,
		Threading,
		Xml
		)
from .ComponentModel import MarshalByValueComponent
from .Configuration import Assemblies
from .Runtime import CompilerServices, InteropServices, Remoting, Serialization
from .Security import AccessControl, Cryptography, Policy, Principal
from .Security.Cryptography import X509Certificates
from .Threading import Tasks
from .Xml import Schema, Serialization

class TypeCode:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Boolean(self, *args, **kwargs) -> Any: ...
	def Byte(self, *args, **kwargs) -> Any: ...
	def Char(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def DBNull(self, *args, **kwargs) -> Any: ...
	def DateTime(self, *args, **kwargs) -> Any: ...
	def Decimal(self, *args, **kwargs) -> Any: ...
	def Double(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Int16(self, *args, **kwargs) -> Any: ...
	def Int32(self, *args, **kwargs) -> Any: ...
	def Int64(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Object(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SByte(self, *args, **kwargs) -> Any: ...
	def Single(self, *args, **kwargs) -> Any: ...
	def String(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def UInt16(self, *args, **kwargs) -> Any: ...
	def UInt32(self, *args, **kwargs) -> Any: ...
	def UInt64(self, *args, **kwargs) -> Any: ...

class Predicate:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Any, __: Any, ___: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> bool: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: Any) -> bool: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class TimeSpan:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: TimeSpan) -> TimeSpan: ...
	def Compare(self, _: TimeSpan, __: TimeSpan) -> int: ...
	def CompareTo(self, _: object) -> int: ...

	@property
	def Days(self): ...

	@Days.setter
	def Days(self, value): ...

	def Duration(self) -> TimeSpan: ...
	def Equals(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def Finalize(self) -> None: ...
	def FromDays(self, _: float) -> TimeSpan: ...
	def FromHours(self, _: float) -> TimeSpan: ...
	def FromMilliseconds(self, _: float) -> TimeSpan: ...
	def FromMinutes(self, _: float) -> TimeSpan: ...
	def FromSeconds(self, _: float) -> TimeSpan: ...
	def FromTicks(self, _: int) -> TimeSpan: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def Hours(self): ...

	@Hours.setter
	def Hours(self, value): ...

	def MaxValue(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Milliseconds(self): ...

	@Milliseconds.setter
	def Milliseconds(self, value): ...

	def MinValue(self, *args, **kwargs) -> Any: ...

	@property
	def Minutes(self): ...

	@Minutes.setter
	def Minutes(self, value): ...

	def Negate(self) -> TimeSpan: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: str, __: Any) -> TimeSpan: ...

	def ParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.TimeSpanStyles,
			) -> TimeSpan: ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Seconds(self): ...

	@Seconds.setter
	def Seconds(self, value): ...

	def Subtract(self, _: TimeSpan) -> TimeSpan: ...

	@property
	def Ticks(self): ...

	@Ticks.setter
	def Ticks(self, value): ...

	def TicksPerDay(self, *args, **kwargs) -> Any: ...
	def TicksPerHour(self, *args, **kwargs) -> Any: ...
	def TicksPerMillisecond(self, *args, **kwargs) -> Any: ...
	def TicksPerMinute(self, *args, **kwargs) -> Any: ...
	def TicksPerSecond(self, *args, **kwargs) -> Any: ...
	def ToString(self, _: str, __: Any) -> str: ...

	@property
	def TotalDays(self): ...

	@TotalDays.setter
	def TotalDays(self, value): ...

	@property
	def TotalHours(self): ...

	@TotalHours.setter
	def TotalHours(self, value): ...

	@property
	def TotalMilliseconds(self): ...

	@TotalMilliseconds.setter
	def TotalMilliseconds(self, value): ...

	@property
	def TotalMinutes(self): ...

	@TotalMinutes.setter
	def TotalMinutes(self, value): ...

	@property
	def TotalSeconds(self): ...

	@TotalSeconds.setter
	def TotalSeconds(self, value): ...

	def TryParse(self, _: str, __: Any, ___: TimeSpan) -> bool: ...

	def TryParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.TimeSpanStyles,
			_____: TimeSpan,
			) -> bool: ...

	def Zero(self, *args, **kwargs) -> Any: ...
	def get_Days(self) -> int: ...
	def get_Hours(self) -> int: ...
	def get_Milliseconds(self) -> int: ...
	def get_Minutes(self) -> int: ...
	def get_Seconds(self) -> int: ...
	def get_Ticks(self) -> int: ...
	def get_TotalDays(self) -> float: ...
	def get_TotalHours(self) -> float: ...
	def get_TotalMilliseconds(self) -> float: ...
	def get_TotalMinutes(self) -> float: ...
	def get_TotalSeconds(self) -> float: ...
	def op_Addition(self, _: TimeSpan, __: TimeSpan) -> TimeSpan: ...
	def op_Equality(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def op_GreaterThan(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def op_GreaterThanOrEqual(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def op_Inequality(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def op_LessThan(self, _: TimeSpan, __: TimeSpan) -> bool: ...
	def op_LessThanOrEqual(self, _: TimeSpan, __: TimeSpan) -> bool: ...

	def op_Subtraction(
			self,
			_: TimeSpan,
			__: TimeSpan,
			) -> TimeSpan: ...

	def op_UnaryNegation(self, _: TimeSpan) -> TimeSpan: ...
	def op_UnaryPlus(self, _: TimeSpan) -> TimeSpan: ...

class ModuleHandle:
	def __init__(self, *args, **kwargs) -> Any: ...
	def EmptyHandle(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...

	def GetRuntimeFieldHandleFromMetadataToken(
			self,
			_: int,
			) -> RuntimeFieldHandle: ...

	def GetRuntimeMethodHandleFromMetadataToken(
			self,
			_: int,
			) -> RuntimeMethodHandle: ...

	def GetRuntimeTypeHandleFromMetadataToken(self, _: int) -> RuntimeTypeHandle: ...
	def GetType(self) -> Type: ...

	@property
	def MDStreamVersion(self): ...

	@MDStreamVersion.setter
	def MDStreamVersion(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	def ResolveFieldHandle(
			self,
			_: int,
			__: List[RuntimeTypeHandle],
			___: List[RuntimeTypeHandle],
			) -> RuntimeFieldHandle: ...

	def ResolveMethodHandle(
			self,
			_: int,
			__: List[RuntimeTypeHandle],
			___: List[RuntimeTypeHandle],
			) -> RuntimeMethodHandle: ...

	def ResolveTypeHandle(
			self,
			_: int,
			__: List[RuntimeTypeHandle],
			___: List[RuntimeTypeHandle],
			) -> RuntimeTypeHandle: ...

	def ToString(self) -> str: ...
	def get_MDStreamVersion(self) -> int: ...
	def op_Equality(self, _: ModuleHandle, __: ModuleHandle) -> bool: ...
	def op_Inequality(self, _: ModuleHandle, __: ModuleHandle) -> bool: ...

class Delegate:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class IAsyncResult:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def AsyncState(self): ...

	@AsyncState.setter
	def AsyncState(self, value): ...

	@property
	def AsyncWaitHandle(self): ...

	@AsyncWaitHandle.setter
	def AsyncWaitHandle(self, value): ...

	@property
	def CompletedSynchronously(self): ...

	@CompletedSynchronously.setter
	def CompletedSynchronously(self, value): ...

	@property
	def IsCompleted(self): ...

	@IsCompleted.setter
	def IsCompleted(self, value): ...

	def get_AsyncState(self) -> object: ...
	def get_AsyncWaitHandle(self) -> Threading.WaitHandle: ...
	def get_CompletedSynchronously(self) -> bool: ...
	def get_IsCompleted(self) -> bool: ...

class MulticastDelegate:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class EventHandler:
	def __init__(self, *args, **kwargs) -> Any: ...

	def BeginInvoke(
			self,
			_: object,
			__: EventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: EventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class IFormatProvider:
	def __init__(self, *args, **kwargs) -> Any: ...
	def GetFormat(self, _: Type) -> object: ...

class AsyncCallback:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Any, __: Any, ___: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: Any) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class EventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class DateTime:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: TimeSpan) -> DateTime: ...
	def AddDays(self, _: float) -> DateTime: ...
	def AddHours(self, _: float) -> DateTime: ...
	def AddMilliseconds(self, _: float) -> DateTime: ...
	def AddMinutes(self, _: float) -> DateTime: ...
	def AddMonths(self, _: int) -> DateTime: ...
	def AddSeconds(self, _: float) -> DateTime: ...
	def AddTicks(self, _: int) -> DateTime: ...
	def AddYears(self, _: int) -> DateTime: ...
	def Compare(self, _: DateTime, __: DateTime) -> int: ...
	def CompareTo(self, _: object) -> int: ...

	@property
	def Date(self): ...

	@Date.setter
	def Date(self, value): ...

	@property
	def Day(self): ...

	@Day.setter
	def Day(self, value): ...

	@property
	def DayOfWeek(self): ...

	@DayOfWeek.setter
	def DayOfWeek(self, value): ...

	@property
	def DayOfYear(self): ...

	@DayOfYear.setter
	def DayOfYear(self, value): ...

	def DaysInMonth(self, _: int, __: int) -> int: ...
	def Equals(self, _: DateTime, __: DateTime) -> bool: ...
	def Finalize(self) -> None: ...
	def FromBinary(self, _: int) -> DateTime: ...
	def FromFileTime(self, _: int) -> DateTime: ...
	def FromFileTimeUtc(self, _: int) -> DateTime: ...
	def FromOADate(self, _: float) -> DateTime: ...
	def GetDateTimeFormats(self, _: str, __: Any) -> List[str]: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...

	@property
	def Hour(self): ...

	@Hour.setter
	def Hour(self, value): ...

	def IsDaylightSavingTime(self) -> bool: ...
	def IsLeapYear(self, _: int) -> bool: ...

	@property
	def Kind(self): ...

	@Kind.setter
	def Kind(self, value): ...

	def MaxValue(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Millisecond(self): ...

	@Millisecond.setter
	def Millisecond(self, value): ...

	def MinValue(self, *args, **kwargs) -> Any: ...

	@property
	def Minute(self): ...

	@Minute.setter
	def Minute(self, value): ...

	@property
	def Month(self): ...

	@Month.setter
	def Month(self, value): ...

	def Now(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	def Parse(
			self,
			_: str,
			__: Any,
			___: Globalization.DateTimeStyles,
			) -> DateTime: ...

	def ParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.DateTimeStyles,
			) -> DateTime: ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Second(self): ...

	@Second.setter
	def Second(self, value): ...

	def SpecifyKind(
			self,
			_: DateTime,
			__: DateTimeKind,
			) -> DateTime: ...

	def Subtract(self, _: DateTime) -> TimeSpan: ...

	@property
	def Ticks(self): ...

	@Ticks.setter
	def Ticks(self, value): ...

	@property
	def TimeOfDay(self): ...

	@TimeOfDay.setter
	def TimeOfDay(self, value): ...

	def ToBinary(self) -> int: ...
	def ToFileTime(self) -> int: ...
	def ToFileTimeUtc(self) -> int: ...
	def ToLocalTime(self) -> DateTime: ...
	def ToLongDateString(self) -> str: ...
	def ToLongTimeString(self) -> str: ...
	def ToOADate(self) -> float: ...
	def ToShortDateString(self) -> str: ...
	def ToShortTimeString(self) -> str: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def ToUniversalTime(self) -> DateTime: ...
	def Today(self, *args, **kwargs) -> Any: ...

	def TryParse(
			self,
			_: str,
			__: Any,
			___: Globalization.DateTimeStyles,
			____: DateTime,
			) -> bool: ...

	def TryParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.DateTimeStyles,
			_____: DateTime,
			) -> bool: ...

	def UtcNow(self, *args, **kwargs) -> Any: ...

	@property
	def Year(self): ...

	@Year.setter
	def Year(self, value): ...

	def get_Date(self) -> DateTime: ...
	def get_Day(self) -> int: ...
	def get_DayOfWeek(self) -> DayOfWeek: ...
	def get_DayOfYear(self) -> int: ...
	def get_Hour(self) -> int: ...
	def get_Kind(self) -> DateTimeKind: ...
	def get_Millisecond(self) -> int: ...
	def get_Minute(self) -> int: ...
	def get_Month(self) -> int: ...
	def get_Now(self) -> DateTime: ...
	def get_Second(self) -> int: ...
	def get_Ticks(self) -> int: ...
	def get_TimeOfDay(self) -> TimeSpan: ...
	def get_Today(self) -> DateTime: ...
	def get_UtcNow(self) -> DateTime: ...
	def get_Year(self) -> int: ...
	def op_Addition(self, _: DateTime, __: TimeSpan) -> DateTime: ...
	def op_Equality(self, _: DateTime, __: DateTime) -> bool: ...
	def op_GreaterThan(self, _: DateTime, __: DateTime) -> bool: ...
	def op_GreaterThanOrEqual(self, _: DateTime, __: DateTime) -> bool: ...
	def op_Inequality(self, _: DateTime, __: DateTime) -> bool: ...
	def op_LessThan(self, _: DateTime, __: DateTime) -> bool: ...
	def op_LessThanOrEqual(self, _: DateTime, __: DateTime) -> bool: ...

	def op_Subtraction(
			self,
			_: DateTime,
			__: DateTime,
			) -> TimeSpan: ...

class Guid:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def NewGuid(self) -> Guid: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: str) -> Guid: ...
	def ParseExact(self, _: str, __: str) -> Guid: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToByteArray(self) -> List[bytes]: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, _: str, __: Guid) -> bool: ...
	def TryParseExact(self, _: str, __: str, ___: Guid) -> bool: ...
	def op_Equality(self, _: Guid, __: Guid) -> bool: ...
	def op_Inequality(self, _: Guid, __: Guid) -> bool: ...

class Converter:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Any, __: Any, ___: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: Any) -> Any: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class RuntimeMethodHandle:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetFunctionPointer(self) -> Any: ...
	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def get_Value(self) -> Any: ...

	def op_Equality(
			self,
			_: RuntimeMethodHandle,
			__: RuntimeMethodHandle,
			) -> bool: ...

	def op_Inequality(
			self,
			_: RuntimeMethodHandle,
			__: RuntimeMethodHandle,
			) -> bool: ...

class RuntimeTypeHandle:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetModuleHandle(self) -> ModuleHandle: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def get_Value(self) -> Any: ...
	def op_Equality(self, _: RuntimeTypeHandle, __: object) -> bool: ...
	def op_Inequality(self, _: RuntimeTypeHandle, __: object) -> bool: ...

class DateTimeKind:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Local(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unspecified(self, *args, **kwargs) -> Any: ...
	def Utc(self, *args, **kwargs) -> Any: ...

class RuntimeFieldHandle:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def Value(self): ...

	@Value.setter
	def Value(self, value): ...

	def get_Value(self) -> Any: ...

	def op_Equality(
			self,
			_: RuntimeFieldHandle,
			__: RuntimeFieldHandle,
			) -> bool: ...

	def op_Inequality(
			self,
			_: RuntimeFieldHandle,
			__: RuntimeFieldHandle,
			) -> bool: ...

class Version:
	def __init__(self, *args, **kwargs) -> Any: ...

	@property
	def Build(self): ...

	@Build.setter
	def Build(self, value): ...

	def Clone(self) -> object: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def Major(self): ...

	@Major.setter
	def Major(self, value): ...

	@property
	def MajorRevision(self): ...

	@MajorRevision.setter
	def MajorRevision(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def Minor(self): ...

	@Minor.setter
	def Minor(self, value): ...

	@property
	def MinorRevision(self): ...

	@MinorRevision.setter
	def MinorRevision(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: str) -> Version: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Revision(self): ...

	@Revision.setter
	def Revision(self, value): ...

	def ToString(self, _: int) -> str: ...
	def TryParse(self, _: str, __: Version) -> bool: ...
	def get_Build(self) -> int: ...
	def get_Major(self) -> int: ...
	def get_MajorRevision(self) -> int: ...
	def get_Minor(self) -> int: ...
	def get_MinorRevision(self) -> int: ...
	def get_Revision(self) -> int: ...
	def op_Equality(self, _: Version, __: Version) -> bool: ...
	def op_GreaterThan(self, _: Version, __: Version) -> bool: ...
	def op_GreaterThanOrEqual(self, _: Version, __: Version) -> bool: ...
	def op_Inequality(self, _: Version, __: Version) -> bool: ...
	def op_LessThan(self, _: Version, __: Version) -> bool: ...
	def op_LessThanOrEqual(self, _: Version, __: Version) -> bool: ...

class ResolveEventArgs:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Name(self): ...

	@Name.setter
	def Name(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def RequestingAssembly(self): ...

	@RequestingAssembly.setter
	def RequestingAssembly(self, value): ...

	def ToString(self) -> str: ...
	def get_Name(self) -> str: ...
	def get_RequestingAssembly(self) -> Reflection.Assembly: ...

class Action:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Any, __: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class Object:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class Func:
	def __init__(self, *args, **kwargs) -> Any: ...
	def BeginInvoke(self, _: Any, __: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: Runtime.Serialization.SerializationInfo,
			__: Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self) -> Any: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class Attribute:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...

	def GetCustomAttribute(
			self,
			_: Reflection.ParameterInfo,
			__: Type,
			___: bool,
			) -> Attribute: ...

	def GetCustomAttributes(
			self,
			_: Reflection.ParameterInfo,
			__: Type,
			___: bool,
			) -> List[Attribute]: ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def IsDefaultAttribute(self) -> bool: ...

	def IsDefined(
			self,
			_: Reflection.ParameterInfo,
			__: Type,
			___: bool,
			) -> bool: ...

	def Match(self, _: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

	@property
	def TypeId(self): ...

	@TypeId.setter
	def TypeId(self, value): ...

	def get_TypeId(self) -> object: ...

class DayOfWeek:
	def __init__(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def Friday(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Monday(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Saturday(self, *args, **kwargs) -> Any: ...
	def Sunday(self, *args, **kwargs) -> Any: ...
	def Thursday(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Tuesday(self, *args, **kwargs) -> Any: ...
	def Wednesday(self, *args, **kwargs) -> Any: ...

class DateTimeOffset:
	def __init__(self, *args, **kwargs) -> Any: ...
	def Add(self, _: TimeSpan) -> DateTimeOffset: ...
	def AddDays(self, _: float) -> DateTimeOffset: ...
	def AddHours(self, _: float) -> DateTimeOffset: ...
	def AddMilliseconds(self, _: float) -> DateTimeOffset: ...
	def AddMinutes(self, _: float) -> DateTimeOffset: ...
	def AddMonths(self, _: int) -> DateTimeOffset: ...
	def AddSeconds(self, _: float) -> DateTimeOffset: ...
	def AddTicks(self, _: int) -> DateTimeOffset: ...
	def AddYears(self, _: int) -> DateTimeOffset: ...
	def Compare(self, _: DateTimeOffset, __: DateTimeOffset) -> int: ...
	def CompareTo(self, _: DateTimeOffset) -> int: ...

	@property
	def Date(self): ...

	@Date.setter
	def Date(self, value): ...

	@property
	def DateTime(self): ...

	@DateTime.setter
	def DateTime(self, value): ...

	@property
	def Day(self): ...

	@Day.setter
	def Day(self, value): ...

	@property
	def DayOfWeek(self): ...

	@DayOfWeek.setter
	def DayOfWeek(self, value): ...

	@property
	def DayOfYear(self): ...

	@DayOfYear.setter
	def DayOfYear(self, value): ...

	def Equals(self, _: DateTimeOffset, __: DateTimeOffset) -> bool: ...
	def EqualsExact(self, _: DateTimeOffset) -> bool: ...
	def Finalize(self) -> None: ...
	def FromFileTime(self, _: int) -> DateTimeOffset: ...
	def FromUnixTimeMilliseconds(self, _: int) -> DateTimeOffset: ...
	def FromUnixTimeSeconds(self, _: int) -> DateTimeOffset: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def Hour(self): ...

	@Hour.setter
	def Hour(self, value): ...

	@property
	def LocalDateTime(self): ...

	@LocalDateTime.setter
	def LocalDateTime(self, value): ...

	def MaxValue(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Millisecond(self): ...

	@Millisecond.setter
	def Millisecond(self, value): ...

	def MinValue(self, *args, **kwargs) -> Any: ...

	@property
	def Minute(self): ...

	@Minute.setter
	def Minute(self, value): ...

	@property
	def Month(self): ...

	@Month.setter
	def Month(self, value): ...

	def Now(self, *args, **kwargs) -> Any: ...

	@property
	def Offset(self): ...

	@Offset.setter
	def Offset(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	def Parse(
			self,
			_: str,
			__: Any,
			___: Globalization.DateTimeStyles,
			) -> DateTimeOffset: ...

	def ParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.DateTimeStyles,
			) -> DateTimeOffset: ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def Second(self): ...

	@Second.setter
	def Second(self, value): ...

	def Subtract(self, _: DateTimeOffset) -> TimeSpan: ...

	@property
	def Ticks(self): ...

	@Ticks.setter
	def Ticks(self, value): ...

	@property
	def TimeOfDay(self): ...

	@TimeOfDay.setter
	def TimeOfDay(self, value): ...

	def ToFileTime(self) -> int: ...
	def ToLocalTime(self) -> DateTimeOffset: ...
	def ToOffset(self, _: TimeSpan) -> DateTimeOffset: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def ToUniversalTime(self) -> DateTimeOffset: ...
	def ToUnixTimeMilliseconds(self) -> int: ...
	def ToUnixTimeSeconds(self) -> int: ...

	def TryParse(
			self,
			_: str,
			__: Any,
			___: Globalization.DateTimeStyles,
			____: DateTimeOffset,
			) -> bool: ...

	def TryParseExact(
			self,
			_: str,
			__: str,
			___: Any,
			____: Globalization.DateTimeStyles,
			_____: DateTimeOffset,
			) -> bool: ...

	@property
	def UtcDateTime(self): ...

	@UtcDateTime.setter
	def UtcDateTime(self, value): ...

	def UtcNow(self, *args, **kwargs) -> Any: ...

	@property
	def UtcTicks(self): ...

	@UtcTicks.setter
	def UtcTicks(self, value): ...

	@property
	def Year(self): ...

	@Year.setter
	def Year(self, value): ...

	def get_Date(self) -> DateTime: ...
	def get_DateTime(self) -> DateTime: ...
	def get_Day(self) -> int: ...
	def get_DayOfWeek(self) -> DayOfWeek: ...
	def get_DayOfYear(self) -> int: ...
	def get_Hour(self) -> int: ...
	def get_LocalDateTime(self) -> DateTime: ...
	def get_Millisecond(self) -> int: ...
	def get_Minute(self) -> int: ...
	def get_Month(self) -> int: ...
	def get_Now(self) -> DateTimeOffset: ...
	def get_Offset(self) -> TimeSpan: ...
	def get_Second(self) -> int: ...
	def get_Ticks(self) -> int: ...
	def get_TimeOfDay(self) -> TimeSpan: ...
	def get_UtcDateTime(self) -> DateTime: ...
	def get_UtcNow(self) -> DateTimeOffset: ...
	def get_UtcTicks(self) -> int: ...
	def get_Year(self) -> int: ...

	def op_Addition(
			self,
			_: DateTimeOffset,
			__: TimeSpan,
			) -> DateTimeOffset: ...

	def op_Equality(self, _: DateTimeOffset, __: DateTimeOffset) -> bool: ...

	def op_GreaterThan(
			self,
			_: DateTimeOffset,
			__: DateTimeOffset,
			) -> bool: ...

	def op_GreaterThanOrEqual(
			self,
			_: DateTimeOffset,
			__: DateTimeOffset,
			) -> bool: ...

	def op_Implicit(self, _: DateTime) -> DateTimeOffset: ...

	def op_Inequality(
			self,
			_: DateTimeOffset,
			__: DateTimeOffset,
			) -> bool: ...

	def op_LessThan(self, _: DateTimeOffset, __: DateTimeOffset) -> bool: ...

	def op_LessThanOrEqual(
			self,
			_: DateTimeOffset,
			__: DateTimeOffset,
			) -> bool: ...

	def op_Subtraction(
			self,
			_: DateTimeOffset,
			__: TimeSpan,
			) -> DateTimeOffset: ...
