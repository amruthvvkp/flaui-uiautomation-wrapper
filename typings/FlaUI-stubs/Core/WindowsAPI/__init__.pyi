from __future__ import annotations

from enum import Enum
from typing import Any
from typing import List
from typing import Type

import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent


class CommonHresultValues:

    def __init__(self, *args, **kwargs) -> Any: ...
    def E_ABORT(self, *args, **kwargs) -> Any: ...
    def E_ACCESSDENIED(self, *args, **kwargs) -> Any: ...
    def E_FAIL(self, *args, **kwargs) -> Any: ...
    def E_HANDLE(self, *args, **kwargs) -> Any: ...
    def E_INVALIDARG(self, *args, **kwargs) -> Any: ...
    def E_NOINTERFACE(self, *args, **kwargs) -> Any: ...
    def E_NOTIMPL(self, *args, **kwargs) -> Any: ...
    def E_OUTOFMEMORY(self, *args, **kwargs) -> Any: ...
    def E_POINTER(self, *args, **kwargs) -> Any: ...
    def E_UNEXPECTED(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def S_OK(self, *args, **kwargs) -> Any: ...
    def ToString(self) -> str: ...


class WindowsMessages:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def WM_ACTIVATE(self, *args, **kwargs) -> Any: ...
    def WM_ACTIVATEAPP(self, *args, **kwargs) -> Any: ...
    def WM_AFXFIRST(self, *args, **kwargs) -> Any: ...
    def WM_AFXLAST(self, *args, **kwargs) -> Any: ...
    def WM_APP(self, *args, **kwargs) -> Any: ...
    def WM_APPCOMMAND(self, *args, **kwargs) -> Any: ...
    def WM_ASKCBFORMATNAME(self, *args, **kwargs) -> Any: ...
    def WM_CANCELJOURNAL(self, *args, **kwargs) -> Any: ...
    def WM_CANCELMODE(self, *args, **kwargs) -> Any: ...
    def WM_CAPTURECHANGED(self, *args, **kwargs) -> Any: ...
    def WM_CHANGECBCHAIN(self, *args, **kwargs) -> Any: ...
    def WM_CHANGEUISTATE(self, *args, **kwargs) -> Any: ...
    def WM_CHAR(self, *args, **kwargs) -> Any: ...
    def WM_CHARTOITEM(self, *args, **kwargs) -> Any: ...
    def WM_CHILDACTIVATE(self, *args, **kwargs) -> Any: ...
    def WM_CLEAR(self, *args, **kwargs) -> Any: ...
    def WM_CLOSE(self, *args, **kwargs) -> Any: ...
    def WM_COMMAND(self, *args, **kwargs) -> Any: ...
    def WM_COMMNOTIFY(self, *args, **kwargs) -> Any: ...
    def WM_COMPACTING(self, *args, **kwargs) -> Any: ...
    def WM_COMPAREITEM(self, *args, **kwargs) -> Any: ...
    def WM_CONTEXTMENU(self, *args, **kwargs) -> Any: ...
    def WM_COPY(self, *args, **kwargs) -> Any: ...
    def WM_COPYDATA(self, *args, **kwargs) -> Any: ...
    def WM_CREATE(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORBTN(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORDLG(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLOREDIT(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORLISTBOX(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORMSGBOX(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORSCROLLBAR(self, *args, **kwargs) -> Any: ...
    def WM_CTLCOLORSTATIC(self, *args, **kwargs) -> Any: ...
    def WM_CUT(self, *args, **kwargs) -> Any: ...
    def WM_DEADCHAR(self, *args, **kwargs) -> Any: ...
    def WM_DELETEITEM(self, *args, **kwargs) -> Any: ...
    def WM_DESTROY(self, *args, **kwargs) -> Any: ...
    def WM_DESTROYCLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_DEVICECHANGE(self, *args, **kwargs) -> Any: ...
    def WM_DEVMODECHANGE(self, *args, **kwargs) -> Any: ...
    def WM_DISPLAYCHANGE(self, *args, **kwargs) -> Any: ...
    def WM_DRAWCLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_DRAWITEM(self, *args, **kwargs) -> Any: ...
    def WM_DROPFILES(self, *args, **kwargs) -> Any: ...
    def WM_ENABLE(self, *args, **kwargs) -> Any: ...
    def WM_ENDSESSION(self, *args, **kwargs) -> Any: ...
    def WM_ENTERIDLE(self, *args, **kwargs) -> Any: ...
    def WM_ENTERMENULOOP(self, *args, **kwargs) -> Any: ...
    def WM_ENTERSIZEMOVE(self, *args, **kwargs) -> Any: ...
    def WM_ERASEBKGND(self, *args, **kwargs) -> Any: ...
    def WM_EXITMENULOOP(self, *args, **kwargs) -> Any: ...
    def WM_EXITSIZEMOVE(self, *args, **kwargs) -> Any: ...
    def WM_FONTCHANGE(self, *args, **kwargs) -> Any: ...
    def WM_GETDLGCODE(self, *args, **kwargs) -> Any: ...
    def WM_GETFONT(self, *args, **kwargs) -> Any: ...
    def WM_GETHOTKEY(self, *args, **kwargs) -> Any: ...
    def WM_GETICON(self, *args, **kwargs) -> Any: ...
    def WM_GETMINMAXINFO(self, *args, **kwargs) -> Any: ...
    def WM_GETOBJECT(self, *args, **kwargs) -> Any: ...
    def WM_GETTEXT(self, *args, **kwargs) -> Any: ...
    def WM_GETTEXTLENGTH(self, *args, **kwargs) -> Any: ...
    def WM_HANDHELDFIRST(self, *args, **kwargs) -> Any: ...
    def WM_HANDHELDLAST(self, *args, **kwargs) -> Any: ...
    def WM_HELP(self, *args, **kwargs) -> Any: ...
    def WM_HOTKEY(self, *args, **kwargs) -> Any: ...
    def WM_HSCROLL(self, *args, **kwargs) -> Any: ...
    def WM_HSCROLLCLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_ICONERASEBKGND(self, *args, **kwargs) -> Any: ...
    def WM_IME_CHAR(self, *args, **kwargs) -> Any: ...
    def WM_IME_COMPOSITION(self, *args, **kwargs) -> Any: ...
    def WM_IME_COMPOSITIONFULL(self, *args, **kwargs) -> Any: ...
    def WM_IME_CONTROL(self, *args, **kwargs) -> Any: ...
    def WM_IME_ENDCOMPOSITION(self, *args, **kwargs) -> Any: ...
    def WM_IME_KEYDOWN(self, *args, **kwargs) -> Any: ...
    def WM_IME_KEYLAST(self, *args, **kwargs) -> Any: ...
    def WM_IME_KEYUP(self, *args, **kwargs) -> Any: ...
    def WM_IME_NOTIFY(self, *args, **kwargs) -> Any: ...
    def WM_IME_REQUEST(self, *args, **kwargs) -> Any: ...
    def WM_IME_SELECT(self, *args, **kwargs) -> Any: ...
    def WM_IME_SETCONTEXT(self, *args, **kwargs) -> Any: ...
    def WM_IME_STARTCOMPOSITION(self, *args, **kwargs) -> Any: ...
    def WM_INITDIALOG(self, *args, **kwargs) -> Any: ...
    def WM_INITMENU(self, *args, **kwargs) -> Any: ...
    def WM_INITMENUPOPUP(self, *args, **kwargs) -> Any: ...
    def WM_INPUT(self, *args, **kwargs) -> Any: ...
    def WM_INPUTLANGCHANGE(self, *args, **kwargs) -> Any: ...
    def WM_INPUTLANGCHANGEREQUEST(self, *args, **kwargs) -> Any: ...
    def WM_KEYDOWN(self, *args, **kwargs) -> Any: ...
    def WM_KEYFIRST(self, *args, **kwargs) -> Any: ...
    def WM_KEYLAST(self, *args, **kwargs) -> Any: ...
    def WM_KEYUP(self, *args, **kwargs) -> Any: ...
    def WM_KILLFOCUS(self, *args, **kwargs) -> Any: ...
    def WM_LBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_LBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_LBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_MBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_MBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_MBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_MDIACTIVATE(self, *args, **kwargs) -> Any: ...
    def WM_MDICASCADE(self, *args, **kwargs) -> Any: ...
    def WM_MDICREATE(self, *args, **kwargs) -> Any: ...
    def WM_MDIDESTROY(self, *args, **kwargs) -> Any: ...
    def WM_MDIGETACTIVE(self, *args, **kwargs) -> Any: ...
    def WM_MDIICONARRANGE(self, *args, **kwargs) -> Any: ...
    def WM_MDIMAXIMIZE(self, *args, **kwargs) -> Any: ...
    def WM_MDINEXT(self, *args, **kwargs) -> Any: ...
    def WM_MDIREFRESHMENU(self, *args, **kwargs) -> Any: ...
    def WM_MDIRESTORE(self, *args, **kwargs) -> Any: ...
    def WM_MDISETMENU(self, *args, **kwargs) -> Any: ...
    def WM_MDITILE(self, *args, **kwargs) -> Any: ...
    def WM_MEASUREITEM(self, *args, **kwargs) -> Any: ...
    def WM_MENUCHAR(self, *args, **kwargs) -> Any: ...
    def WM_MENUCOMMAND(self, *args, **kwargs) -> Any: ...
    def WM_MENUDRAG(self, *args, **kwargs) -> Any: ...
    def WM_MENUGETOBJECT(self, *args, **kwargs) -> Any: ...
    def WM_MENURBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_MENUSELECT(self, *args, **kwargs) -> Any: ...
    def WM_MOUSEACTIVATE(self, *args, **kwargs) -> Any: ...
    def WM_MOUSEFIRST(self, *args, **kwargs) -> Any: ...
    def WM_MOUSEHOVER(self, *args, **kwargs) -> Any: ...
    def WM_MOUSELAST(self, *args, **kwargs) -> Any: ...
    def WM_MOUSELEAVE(self, *args, **kwargs) -> Any: ...
    def WM_MOUSEMOVE(self, *args, **kwargs) -> Any: ...
    def WM_MOUSEWHEEL(self, *args, **kwargs) -> Any: ...
    def WM_MOVE(self, *args, **kwargs) -> Any: ...
    def WM_MOVING(self, *args, **kwargs) -> Any: ...
    def WM_NCACTIVATE(self, *args, **kwargs) -> Any: ...
    def WM_NCCALCSIZE(self, *args, **kwargs) -> Any: ...
    def WM_NCCREATE(self, *args, **kwargs) -> Any: ...
    def WM_NCDESTROY(self, *args, **kwargs) -> Any: ...
    def WM_NCHITTEST(self, *args, **kwargs) -> Any: ...
    def WM_NCLBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_NCLBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_NCLBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_NCMBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_NCMBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_NCMBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_NCMOUSEHOVER(self, *args, **kwargs) -> Any: ...
    def WM_NCMOUSELEAVE(self, *args, **kwargs) -> Any: ...
    def WM_NCMOUSEMOVE(self, *args, **kwargs) -> Any: ...
    def WM_NCPAINT(self, *args, **kwargs) -> Any: ...
    def WM_NCRBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_NCRBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_NCRBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_NCXBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_NCXBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_NCXBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_NEXTDLGCTL(self, *args, **kwargs) -> Any: ...
    def WM_NEXTMENU(self, *args, **kwargs) -> Any: ...
    def WM_NOTIFY(self, *args, **kwargs) -> Any: ...
    def WM_NOTIFYFORMAT(self, *args, **kwargs) -> Any: ...
    def WM_NULL(self, *args, **kwargs) -> Any: ...
    def WM_PAINT(self, *args, **kwargs) -> Any: ...
    def WM_PAINTCLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_PAINTICON(self, *args, **kwargs) -> Any: ...
    def WM_PALETTECHANGED(self, *args, **kwargs) -> Any: ...
    def WM_PALETTEISCHANGING(self, *args, **kwargs) -> Any: ...
    def WM_PARENTNOTIFY(self, *args, **kwargs) -> Any: ...
    def WM_PASTE(self, *args, **kwargs) -> Any: ...
    def WM_PENWINFIRST(self, *args, **kwargs) -> Any: ...
    def WM_PENWINLAST(self, *args, **kwargs) -> Any: ...
    def WM_POWER(self, *args, **kwargs) -> Any: ...
    def WM_POWERBROADCAST(self, *args, **kwargs) -> Any: ...
    def WM_PRINT(self, *args, **kwargs) -> Any: ...
    def WM_PRINTCLIENT(self, *args, **kwargs) -> Any: ...
    def WM_QUERYDRAGICON(self, *args, **kwargs) -> Any: ...
    def WM_QUERYENDSESSION(self, *args, **kwargs) -> Any: ...
    def WM_QUERYNEWPALETTE(self, *args, **kwargs) -> Any: ...
    def WM_QUERYOPEN(self, *args, **kwargs) -> Any: ...
    def WM_QUERYUISTATE(self, *args, **kwargs) -> Any: ...
    def WM_QUEUESYNC(self, *args, **kwargs) -> Any: ...
    def WM_QUIT(self, *args, **kwargs) -> Any: ...
    def WM_RBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_RBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_RBUTTONUP(self, *args, **kwargs) -> Any: ...
    def WM_RENDERALLFORMATS(self, *args, **kwargs) -> Any: ...
    def WM_RENDERFORMAT(self, *args, **kwargs) -> Any: ...
    def WM_SETCURSOR(self, *args, **kwargs) -> Any: ...
    def WM_SETFOCUS(self, *args, **kwargs) -> Any: ...
    def WM_SETFONT(self, *args, **kwargs) -> Any: ...
    def WM_SETHOTKEY(self, *args, **kwargs) -> Any: ...
    def WM_SETICON(self, *args, **kwargs) -> Any: ...
    def WM_SETREDRAW(self, *args, **kwargs) -> Any: ...
    def WM_SETTEXT(self, *args, **kwargs) -> Any: ...
    def WM_SETTINGCHANGE(self, *args, **kwargs) -> Any: ...
    def WM_SHOWWINDOW(self, *args, **kwargs) -> Any: ...
    def WM_SIZE(self, *args, **kwargs) -> Any: ...
    def WM_SIZECLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_SIZING(self, *args, **kwargs) -> Any: ...
    def WM_SPOOLERSTATUS(self, *args, **kwargs) -> Any: ...
    def WM_STYLECHANGED(self, *args, **kwargs) -> Any: ...
    def WM_STYLECHANGING(self, *args, **kwargs) -> Any: ...
    def WM_SYNCPAINT(self, *args, **kwargs) -> Any: ...
    def WM_SYSCHAR(self, *args, **kwargs) -> Any: ...
    def WM_SYSCOLORCHANGE(self, *args, **kwargs) -> Any: ...
    def WM_SYSCOMMAND(self, *args, **kwargs) -> Any: ...
    def WM_SYSDEADCHAR(self, *args, **kwargs) -> Any: ...
    def WM_SYSKEYDOWN(self, *args, **kwargs) -> Any: ...
    def WM_SYSKEYUP(self, *args, **kwargs) -> Any: ...
    def WM_TABLET_FIRST(self, *args, **kwargs) -> Any: ...
    def WM_TABLET_LAST(self, *args, **kwargs) -> Any: ...
    def WM_TCARD(self, *args, **kwargs) -> Any: ...
    def WM_THEMECHANGED(self, *args, **kwargs) -> Any: ...
    def WM_TIMECHANGE(self, *args, **kwargs) -> Any: ...
    def WM_TIMER(self, *args, **kwargs) -> Any: ...
    def WM_UNDO(self, *args, **kwargs) -> Any: ...
    def WM_UNICHAR(self, *args, **kwargs) -> Any: ...
    def WM_UNINITMENUPOPUP(self, *args, **kwargs) -> Any: ...
    def WM_UPDATEUISTATE(self, *args, **kwargs) -> Any: ...
    def WM_USER(self, *args, **kwargs) -> Any: ...
    def WM_USERCHANGED(self, *args, **kwargs) -> Any: ...
    def WM_VKEYTOITEM(self, *args, **kwargs) -> Any: ...
    def WM_VSCROLL(self, *args, **kwargs) -> Any: ...
    def WM_VSCROLLCLIPBOARD(self, *args, **kwargs) -> Any: ...
    def WM_WINDOWPOSCHANGED(self, *args, **kwargs) -> Any: ...
    def WM_WINDOWPOSCHANGING(self, *args, **kwargs) -> Any: ...
    def WM_WININICHANGE(self, *args, **kwargs) -> Any: ...
    def WM_WTSSESSION_CHANGE(self, *args, **kwargs) -> Any: ...
    def WM_XBUTTONDBLCLK(self, *args, **kwargs) -> Any: ...
    def WM_XBUTTONDOWN(self, *args, **kwargs) -> Any: ...
    def WM_XBUTTONUP(self, *args, **kwargs) -> Any: ...


class WindowLongParam:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GWL_EXSTYLE(self, *args, **kwargs) -> Any: ...
    def GWL_HINSTANCE(self, *args, **kwargs) -> Any: ...
    def GWL_HWNDPARENT(self, *args, **kwargs) -> Any: ...
    def GWL_ID(self, *args, **kwargs) -> Any: ...
    def GWL_STYLE(self, *args, **kwargs) -> Any: ...
    def GWL_USERDATA(self, *args, **kwargs) -> Any: ...
    def GWL_WNDPROC(self, *args, **kwargs) -> Any: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class WindowStyles:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def WS_BORDER(self, *args, **kwargs) -> Any: ...
    def WS_CAPTION(self, *args, **kwargs) -> Any: ...
    def WS_CHILD(self, *args, **kwargs) -> Any: ...
    def WS_CHILDWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_CLIPCHILDREN(self, *args, **kwargs) -> Any: ...
    def WS_CLIPSIBLINGS(self, *args, **kwargs) -> Any: ...
    def WS_DISABLED(self, *args, **kwargs) -> Any: ...
    def WS_DLGFRAME(self, *args, **kwargs) -> Any: ...
    def WS_EX_ACCEPTFILES(self, *args, **kwargs) -> Any: ...
    def WS_EX_APPWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_EX_CLIENTEDGE(self, *args, **kwargs) -> Any: ...
    def WS_EX_COMPOSITED(self, *args, **kwargs) -> Any: ...
    def WS_EX_CONTEXTHELP(self, *args, **kwargs) -> Any: ...
    def WS_EX_CONTROLPARENT(self, *args, **kwargs) -> Any: ...
    def WS_EX_DLGMODALFRAME(self, *args, **kwargs) -> Any: ...
    def WS_EX_LAYERED(self, *args, **kwargs) -> Any: ...
    def WS_EX_LAYOUTRTL(self, *args, **kwargs) -> Any: ...
    def WS_EX_LEFT(self, *args, **kwargs) -> Any: ...
    def WS_EX_LEFTSCROLLBAR(self, *args, **kwargs) -> Any: ...
    def WS_EX_LTRREADING(self, *args, **kwargs) -> Any: ...
    def WS_EX_MDICHILD(self, *args, **kwargs) -> Any: ...
    def WS_EX_NOACTIVATE(self, *args, **kwargs) -> Any: ...
    def WS_EX_NOINHERITLAYOUT(self, *args, **kwargs) -> Any: ...
    def WS_EX_NOPARENTNOTIFY(self, *args, **kwargs) -> Any: ...
    def WS_EX_OVERLAPPEDWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_EX_PALETTEWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_EX_RIGHT(self, *args, **kwargs) -> Any: ...
    def WS_EX_RIGHTSCROLLBAR(self, *args, **kwargs) -> Any: ...
    def WS_EX_RTLREADING(self, *args, **kwargs) -> Any: ...
    def WS_EX_STATICEDGE(self, *args, **kwargs) -> Any: ...
    def WS_EX_TOOLWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_EX_TOPMOST(self, *args, **kwargs) -> Any: ...
    def WS_EX_TRANSPARENT(self, *args, **kwargs) -> Any: ...
    def WS_EX_WINDOWEDGE(self, *args, **kwargs) -> Any: ...
    def WS_GROUP(self, *args, **kwargs) -> Any: ...
    def WS_HSCROLL(self, *args, **kwargs) -> Any: ...
    def WS_ICONIC(self, *args, **kwargs) -> Any: ...
    def WS_MAXIMIZE(self, *args, **kwargs) -> Any: ...
    def WS_MAXIMIZEBOX(self, *args, **kwargs) -> Any: ...
    def WS_MINIMIZE(self, *args, **kwargs) -> Any: ...
    def WS_MINIMIZEBOX(self, *args, **kwargs) -> Any: ...
    def WS_OVERLAPPED(self, *args, **kwargs) -> Any: ...
    def WS_OVERLAPPEDWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_POPUP(self, *args, **kwargs) -> Any: ...
    def WS_POPUPWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_SIZEBOX(self, *args, **kwargs) -> Any: ...
    def WS_SYSMENU(self, *args, **kwargs) -> Any: ...
    def WS_TABSTOP(self, *args, **kwargs) -> Any: ...
    def WS_THICKFRAME(self, *args, **kwargs) -> Any: ...
    def WS_TILED(self, *args, **kwargs) -> Any: ...
    def WS_TILEDWINDOW(self, *args, **kwargs) -> Any: ...
    def WS_VISIBLE(self, *args, **kwargs) -> Any: ...
    def WS_VSCROLL(self, *args, **kwargs) -> Any: ...


class SetWindowPosFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SWP_ASYNCWINDOWPOS(self, *args, **kwargs) -> Any: ...
    def SWP_DEFERERASE(self, *args, **kwargs) -> Any: ...
    def SWP_DRAWFRAME(self, *args, **kwargs) -> Any: ...
    def SWP_FRAMECHANGED(self, *args, **kwargs) -> Any: ...
    def SWP_HIDEWINDOW(self, *args, **kwargs) -> Any: ...
    def SWP_NOACTIVATE(self, *args, **kwargs) -> Any: ...
    def SWP_NOCOPYBITS(self, *args, **kwargs) -> Any: ...
    def SWP_NOMOVE(self, *args, **kwargs) -> Any: ...
    def SWP_NOOWNERZORDER(self, *args, **kwargs) -> Any: ...
    def SWP_NOREDRAW(self, *args, **kwargs) -> Any: ...
    def SWP_NOREPOSITION(self, *args, **kwargs) -> Any: ...
    def SWP_NOSENDCHANGING(self, *args, **kwargs) -> Any: ...
    def SWP_NOSIZE(self, *args, **kwargs) -> Any: ...
    def SWP_NOZORDER(self, *args, **kwargs) -> Any: ...
    def SWP_SHOWWINDOW(self, *args, **kwargs) -> Any: ...
    def ToString(self) -> str: ...


class ShowWindowTypes:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SW_FORCEMINIMIZE(self, *args, **kwargs) -> Any: ...
    def SW_HIDE(self, *args, **kwargs) -> Any: ...
    def SW_MAX(self, *args, **kwargs) -> Any: ...
    def SW_MAXIMIZE(self, *args, **kwargs) -> Any: ...
    def SW_MINIMIZE(self, *args, **kwargs) -> Any: ...
    def SW_NORMAL(self, *args, **kwargs) -> Any: ...
    def SW_RESTORE(self, *args, **kwargs) -> Any: ...
    def SW_SHOW(self, *args, **kwargs) -> Any: ...
    def SW_SHOWDEFAULT(self, *args, **kwargs) -> Any: ...
    def SW_SHOWMAXIMIZED(self, *args, **kwargs) -> Any: ...
    def SW_SHOWMINIMIZED(self, *args, **kwargs) -> Any: ...
    def SW_SHOWMINNOACTIVE(self, *args, **kwargs) -> Any: ...
    def SW_SHOWNA(self, *args, **kwargs) -> Any: ...
    def SW_SHOWNOACTIVATE(self, *args, **kwargs) -> Any: ...
    def SW_SHOWNORMAL(self, *args, **kwargs) -> Any: ...
    def ToString(self) -> str: ...


class LayeredWindowAttributes:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def LWA_ALPHA(self, *args, **kwargs) -> Any: ...
    def LWA_COLORKEY(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class SystemMetric:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SM_ARRANGE(self, *args, **kwargs) -> Any: ...
    def SM_CLEANBOOT(self, *args, **kwargs) -> Any: ...
    def SM_CMONITORS(self, *args, **kwargs) -> Any: ...
    def SM_CMOUSEBUTTONS(self, *args, **kwargs) -> Any: ...
    def SM_CONVERTIBLESLATEMODE(self, *args, **kwargs) -> Any: ...
    def SM_CXBORDER(self, *args, **kwargs) -> Any: ...
    def SM_CXCURSOR(self, *args, **kwargs) -> Any: ...
    def SM_CXDLGFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CXDOUBLECLK(self, *args, **kwargs) -> Any: ...
    def SM_CXDRAG(self, *args, **kwargs) -> Any: ...
    def SM_CXEDGE(self, *args, **kwargs) -> Any: ...
    def SM_CXFIXEDFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CXFOCUSBORDER(self, *args, **kwargs) -> Any: ...
    def SM_CXFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CXFULLSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CXHSCROLL(self, *args, **kwargs) -> Any: ...
    def SM_CXHTHUMB(self, *args, **kwargs) -> Any: ...
    def SM_CXICON(self, *args, **kwargs) -> Any: ...
    def SM_CXICONSPACING(self, *args, **kwargs) -> Any: ...
    def SM_CXMAXIMIZED(self, *args, **kwargs) -> Any: ...
    def SM_CXMAXTRACK(self, *args, **kwargs) -> Any: ...
    def SM_CXMENUCHECK(self, *args, **kwargs) -> Any: ...
    def SM_CXMENUSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CXMIN(self, *args, **kwargs) -> Any: ...
    def SM_CXMINIMIZED(self, *args, **kwargs) -> Any: ...
    def SM_CXMINSPACING(self, *args, **kwargs) -> Any: ...
    def SM_CXMINTRACK(self, *args, **kwargs) -> Any: ...
    def SM_CXPADDEDBORDER(self, *args, **kwargs) -> Any: ...
    def SM_CXSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CXSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CXSIZEFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CXSMICON(self, *args, **kwargs) -> Any: ...
    def SM_CXSMSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CXVIRTUALSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CXVSCROLL(self, *args, **kwargs) -> Any: ...
    def SM_CYBORDER(self, *args, **kwargs) -> Any: ...
    def SM_CYCAPTION(self, *args, **kwargs) -> Any: ...
    def SM_CYCURSOR(self, *args, **kwargs) -> Any: ...
    def SM_CYDLGFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CYDOUBLECLK(self, *args, **kwargs) -> Any: ...
    def SM_CYDRAG(self, *args, **kwargs) -> Any: ...
    def SM_CYEDGE(self, *args, **kwargs) -> Any: ...
    def SM_CYFIXEDFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CYFOCUSBORDER(self, *args, **kwargs) -> Any: ...
    def SM_CYFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CYFULLSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CYHSCROLL(self, *args, **kwargs) -> Any: ...
    def SM_CYICON(self, *args, **kwargs) -> Any: ...
    def SM_CYICONSPACING(self, *args, **kwargs) -> Any: ...
    def SM_CYKANJIWINDOW(self, *args, **kwargs) -> Any: ...
    def SM_CYMAXIMIZED(self, *args, **kwargs) -> Any: ...
    def SM_CYMAXTRACK(self, *args, **kwargs) -> Any: ...
    def SM_CYMENU(self, *args, **kwargs) -> Any: ...
    def SM_CYMENUCHECK(self, *args, **kwargs) -> Any: ...
    def SM_CYMENUSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CYMIN(self, *args, **kwargs) -> Any: ...
    def SM_CYMINIMIZED(self, *args, **kwargs) -> Any: ...
    def SM_CYMINSPACING(self, *args, **kwargs) -> Any: ...
    def SM_CYMINTRACK(self, *args, **kwargs) -> Any: ...
    def SM_CYSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CYSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CYSIZEFRAME(self, *args, **kwargs) -> Any: ...
    def SM_CYSMCAPTION(self, *args, **kwargs) -> Any: ...
    def SM_CYSMICON(self, *args, **kwargs) -> Any: ...
    def SM_CYSMSIZE(self, *args, **kwargs) -> Any: ...
    def SM_CYVIRTUALSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_CYVSCROLL(self, *args, **kwargs) -> Any: ...
    def SM_CYVTHUMB(self, *args, **kwargs) -> Any: ...
    def SM_DBCSENABLED(self, *args, **kwargs) -> Any: ...
    def SM_DEBUG(self, *args, **kwargs) -> Any: ...
    def SM_DIGITIZER(self, *args, **kwargs) -> Any: ...
    def SM_IMMENABLED(self, *args, **kwargs) -> Any: ...
    def SM_MAXIMUMTOUCHES(self, *args, **kwargs) -> Any: ...
    def SM_MEDIACENTER(self, *args, **kwargs) -> Any: ...
    def SM_MENUDROPALIGNMENT(self, *args, **kwargs) -> Any: ...
    def SM_MIDEASTENABLED(self, *args, **kwargs) -> Any: ...
    def SM_MOUSEHORIZONTALWHEELPRESENT(self, *args, **kwargs) -> Any: ...
    def SM_MOUSEPRESENT(self, *args, **kwargs) -> Any: ...
    def SM_MOUSEWHEELPRESENT(self, *args, **kwargs) -> Any: ...
    def SM_NETWORK(self, *args, **kwargs) -> Any: ...
    def SM_PENWINDOWS(self, *args, **kwargs) -> Any: ...
    def SM_REMOTECONTROL(self, *args, **kwargs) -> Any: ...
    def SM_REMOTESESSION(self, *args, **kwargs) -> Any: ...
    def SM_SAMEDISPLAYFORMAT(self, *args, **kwargs) -> Any: ...
    def SM_SECURE(self, *args, **kwargs) -> Any: ...
    def SM_SERVERR2(self, *args, **kwargs) -> Any: ...
    def SM_SHOWSOUNDS(self, *args, **kwargs) -> Any: ...
    def SM_SHUTTINGDOWN(self, *args, **kwargs) -> Any: ...
    def SM_SLOWMACHINE(self, *args, **kwargs) -> Any: ...
    def SM_STARTER(self, *args, **kwargs) -> Any: ...
    def SM_SWAPBUTTON(self, *args, **kwargs) -> Any: ...
    def SM_SYSTEMDOCKED(self, *args, **kwargs) -> Any: ...
    def SM_TABLETPC(self, *args, **kwargs) -> Any: ...
    def SM_XVIRTUALSCREEN(self, *args, **kwargs) -> Any: ...
    def SM_YVIRTUALSCREEN(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class InputType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def INPUT_HARDWARE(self, *args, **kwargs) -> Any: ...
    def INPUT_KEYBOARD(self, *args, **kwargs) -> Any: ...
    def INPUT_MOUSE(self, *args, **kwargs) -> Any: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class MouseEventFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MOUSEEVENTF_ABSOLUTE(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_HWHEEL(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_LEFTDOWN(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_LEFTUP(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_MIDDLEDOWN(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_MIDDLEUP(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_MOVE(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_MOVE_NOCOALESCE(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_RIGHTDOWN(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_RIGHTUP(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_VIRTUALDESK(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_WHEEL(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_XDOWN(self, *args, **kwargs) -> Any: ...
    def MOUSEEVENTF_XUP(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class MouseEventDataXButtons:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NOTHING(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def XBUTTON1(self, *args, **kwargs) -> Any: ...
    def XBUTTON2(self, *args, **kwargs) -> Any: ...


class VkKeyScanModifiers:

    def __init__(self, *args, **kwargs) -> Any: ...
    def ALT(self, *args, **kwargs) -> Any: ...
    def CONTROL(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def Hankaku(self, *args, **kwargs) -> Any: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Reserved1(self, *args, **kwargs) -> Any: ...
    def Reserved2(self, *args, **kwargs) -> Any: ...
    def SHIFT(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class VirtualKeyShort:

    def __init__(self, *args, **kwargs) -> Any: ...
    def ACCEPT(self, *args, **kwargs) -> Any: ...
    def ADD(self, *args, **kwargs) -> Any: ...
    def ALT(self, *args, **kwargs) -> Any: ...
    def APPS(self, *args, **kwargs) -> Any: ...
    def ATTN(self, *args, **kwargs) -> Any: ...
    def BACK(self, *args, **kwargs) -> Any: ...
    def BROWSER_BACK(self, *args, **kwargs) -> Any: ...
    def BROWSER_FAVORITES(self, *args, **kwargs) -> Any: ...
    def BROWSER_FORWARD(self, *args, **kwargs) -> Any: ...
    def BROWSER_HOME(self, *args, **kwargs) -> Any: ...
    def BROWSER_REFRESH(self, *args, **kwargs) -> Any: ...
    def BROWSER_SEARCH(self, *args, **kwargs) -> Any: ...
    def BROWSER_STOP(self, *args, **kwargs) -> Any: ...
    def CANCEL(self, *args, **kwargs) -> Any: ...
    def CAPITAL(self, *args, **kwargs) -> Any: ...
    def CAPSLOCK(self, *args, **kwargs) -> Any: ...
    def CLEAR(self, *args, **kwargs) -> Any: ...
    def CONTROL(self, *args, **kwargs) -> Any: ...
    def CONVERT(self, *args, **kwargs) -> Any: ...
    def CRSEL(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def DECIMAL(self, *args, **kwargs) -> Any: ...
    def DELETE(self, *args, **kwargs) -> Any: ...
    def DIVIDE(self, *args, **kwargs) -> Any: ...
    def DOWN(self, *args, **kwargs) -> Any: ...
    def END(self, *args, **kwargs) -> Any: ...
    def ENTER(self, *args, **kwargs) -> Any: ...
    def EREOF(self, *args, **kwargs) -> Any: ...
    def ESC(self, *args, **kwargs) -> Any: ...
    def ESCAPE(self, *args, **kwargs) -> Any: ...
    def EXECUTE(self, *args, **kwargs) -> Any: ...
    def EXSEL(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def FINAL(self, *args, **kwargs) -> Any: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def F1(self, *args, **kwargs) -> Any: ...
    def F10(self, *args, **kwargs) -> Any: ...
    def F11(self, *args, **kwargs) -> Any: ...
    def F12(self, *args, **kwargs) -> Any: ...
    def F13(self, *args, **kwargs) -> Any: ...
    def F14(self, *args, **kwargs) -> Any: ...
    def F15(self, *args, **kwargs) -> Any: ...
    def F16(self, *args, **kwargs) -> Any: ...
    def F17(self, *args, **kwargs) -> Any: ...
    def F18(self, *args, **kwargs) -> Any: ...
    def F19(self, *args, **kwargs) -> Any: ...
    def F2(self, *args, **kwargs) -> Any: ...
    def F20(self, *args, **kwargs) -> Any: ...
    def F21(self, *args, **kwargs) -> Any: ...
    def F22(self, *args, **kwargs) -> Any: ...
    def F23(self, *args, **kwargs) -> Any: ...
    def F24(self, *args, **kwargs) -> Any: ...
    def F3(self, *args, **kwargs) -> Any: ...
    def F4(self, *args, **kwargs) -> Any: ...
    def F5(self, *args, **kwargs) -> Any: ...
    def F6(self, *args, **kwargs) -> Any: ...
    def F7(self, *args, **kwargs) -> Any: ...
    def F8(self, *args, **kwargs) -> Any: ...
    def F9(self, *args, **kwargs) -> Any: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HANGUL(self, *args, **kwargs) -> Any: ...
    def HANJA(self, *args, **kwargs) -> Any: ...
    def HELP(self, *args, **kwargs) -> Any: ...
    def HOME(self, *args, **kwargs) -> Any: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def INSERT(self, *args, **kwargs) -> Any: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def JUNJA(self, *args, **kwargs) -> Any: ...
    def KANA(self, *args, **kwargs) -> Any: ...
    def KANJI(self, *args, **kwargs) -> Any: ...
    def KEY_A(self, *args, **kwargs) -> Any: ...
    def KEY_B(self, *args, **kwargs) -> Any: ...
    def KEY_C(self, *args, **kwargs) -> Any: ...
    def KEY_D(self, *args, **kwargs) -> Any: ...
    def KEY_E(self, *args, **kwargs) -> Any: ...
    def KEY_F(self, *args, **kwargs) -> Any: ...
    def KEY_G(self, *args, **kwargs) -> Any: ...
    def KEY_H(self, *args, **kwargs) -> Any: ...
    def KEY_I(self, *args, **kwargs) -> Any: ...
    def KEY_J(self, *args, **kwargs) -> Any: ...
    def KEY_K(self, *args, **kwargs) -> Any: ...
    def KEY_L(self, *args, **kwargs) -> Any: ...
    def KEY_M(self, *args, **kwargs) -> Any: ...
    def KEY_N(self, *args, **kwargs) -> Any: ...
    def KEY_O(self, *args, **kwargs) -> Any: ...
    def KEY_P(self, *args, **kwargs) -> Any: ...
    def KEY_Q(self, *args, **kwargs) -> Any: ...
    def KEY_R(self, *args, **kwargs) -> Any: ...
    def KEY_S(self, *args, **kwargs) -> Any: ...
    def KEY_T(self, *args, **kwargs) -> Any: ...
    def KEY_U(self, *args, **kwargs) -> Any: ...
    def KEY_V(self, *args, **kwargs) -> Any: ...
    def KEY_W(self, *args, **kwargs) -> Any: ...
    def KEY_X(self, *args, **kwargs) -> Any: ...
    def KEY_Y(self, *args, **kwargs) -> Any: ...
    def KEY_Z(self, *args, **kwargs) -> Any: ...
    def KEY_0(self, *args, **kwargs) -> Any: ...
    def KEY_1(self, *args, **kwargs) -> Any: ...
    def KEY_2(self, *args, **kwargs) -> Any: ...
    def KEY_3(self, *args, **kwargs) -> Any: ...
    def KEY_4(self, *args, **kwargs) -> Any: ...
    def KEY_5(self, *args, **kwargs) -> Any: ...
    def KEY_6(self, *args, **kwargs) -> Any: ...
    def KEY_7(self, *args, **kwargs) -> Any: ...
    def KEY_8(self, *args, **kwargs) -> Any: ...
    def KEY_9(self, *args, **kwargs) -> Any: ...
    def LAUNCH_APP1(self, *args, **kwargs) -> Any: ...
    def LAUNCH_APP2(self, *args, **kwargs) -> Any: ...
    def LAUNCH_MAIL(self, *args, **kwargs) -> Any: ...
    def LAUNCH_MEDIA_SELECT(self, *args, **kwargs) -> Any: ...
    def LBUTTON(self, *args, **kwargs) -> Any: ...
    def LCONTROL(self, *args, **kwargs) -> Any: ...
    def LEFT(self, *args, **kwargs) -> Any: ...
    def LMENU(self, *args, **kwargs) -> Any: ...
    def LSHIFT(self, *args, **kwargs) -> Any: ...
    def LWIN(self, *args, **kwargs) -> Any: ...
    def MBUTTON(self, *args, **kwargs) -> Any: ...
    def MEDIA_NEXT_TRACK(self, *args, **kwargs) -> Any: ...
    def MEDIA_PLAY_PAUSE(self, *args, **kwargs) -> Any: ...
    def MEDIA_PREV_TRACK(self, *args, **kwargs) -> Any: ...
    def MEDIA_STOP(self, *args, **kwargs) -> Any: ...
    def MODECHANGE(self, *args, **kwargs) -> Any: ...
    def MULTIPLY(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def NEXT(self, *args, **kwargs) -> Any: ...
    def NONAME(self, *args, **kwargs) -> Any: ...
    def NONCONVERT(self, *args, **kwargs) -> Any: ...
    def NUMLOCK(self, *args, **kwargs) -> Any: ...
    def NUMPAD0(self, *args, **kwargs) -> Any: ...
    def NUMPAD1(self, *args, **kwargs) -> Any: ...
    def NUMPAD2(self, *args, **kwargs) -> Any: ...
    def NUMPAD3(self, *args, **kwargs) -> Any: ...
    def NUMPAD4(self, *args, **kwargs) -> Any: ...
    def NUMPAD5(self, *args, **kwargs) -> Any: ...
    def NUMPAD6(self, *args, **kwargs) -> Any: ...
    def NUMPAD7(self, *args, **kwargs) -> Any: ...
    def NUMPAD8(self, *args, **kwargs) -> Any: ...
    def NUMPAD9(self, *args, **kwargs) -> Any: ...
    def OEM_CLEAR(self, *args, **kwargs) -> Any: ...
    def OEM_COMMA(self, *args, **kwargs) -> Any: ...
    def OEM_MINUS(self, *args, **kwargs) -> Any: ...
    def OEM_PERIOD(self, *args, **kwargs) -> Any: ...
    def OEM_PLUS(self, *args, **kwargs) -> Any: ...
    def OEM_1(self, *args, **kwargs) -> Any: ...
    def OEM_102(self, *args, **kwargs) -> Any: ...
    def OEM_2(self, *args, **kwargs) -> Any: ...
    def OEM_3(self, *args, **kwargs) -> Any: ...
    def OEM_4(self, *args, **kwargs) -> Any: ...
    def OEM_5(self, *args, **kwargs) -> Any: ...
    def OEM_6(self, *args, **kwargs) -> Any: ...
    def OEM_7(self, *args, **kwargs) -> Any: ...
    def OEM_8(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PACKET(self, *args, **kwargs) -> Any: ...
    def PAUSE(self, *args, **kwargs) -> Any: ...
    def PA1(self, *args, **kwargs) -> Any: ...
    def PLAY(self, *args, **kwargs) -> Any: ...
    def PRINT(self, *args, **kwargs) -> Any: ...
    def PRIOR(self, *args, **kwargs) -> Any: ...
    def PROCESSKEY(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def RBUTTON(self, *args, **kwargs) -> Any: ...
    def RCONTROL(self, *args, **kwargs) -> Any: ...
    def RETURN(self, *args, **kwargs) -> Any: ...
    def RIGHT(self, *args, **kwargs) -> Any: ...
    def RMENU(self, *args, **kwargs) -> Any: ...
    def RSHIFT(self, *args, **kwargs) -> Any: ...
    def RWIN(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SCROLL(self, *args, **kwargs) -> Any: ...
    def SELECT(self, *args, **kwargs) -> Any: ...
    def SEPARATOR(self, *args, **kwargs) -> Any: ...
    def SHIFT(self, *args, **kwargs) -> Any: ...
    def SLEEP(self, *args, **kwargs) -> Any: ...
    def SNAPSHOT(self, *args, **kwargs) -> Any: ...
    def SPACE(self, *args, **kwargs) -> Any: ...
    def SUBTRACT(self, *args, **kwargs) -> Any: ...
    def TAB(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def UP(self, *args, **kwargs) -> Any: ...
    def VOLUME_DOWN(self, *args, **kwargs) -> Any: ...
    def VOLUME_MUTE(self, *args, **kwargs) -> Any: ...
    def VOLUME_UP(self, *args, **kwargs) -> Any: ...
    def XBUTTON1(self, *args, **kwargs) -> Any: ...
    def XBUTTON2(self, *args, **kwargs) -> Any: ...
    def ZOOM(self, *args, **kwargs) -> Any: ...


class ScanCodeShort:

    def __init__(self, *args, **kwargs) -> Any: ...
    def ADD(self, *args, **kwargs) -> Any: ...
    def ALT(self, *args, **kwargs) -> Any: ...
    def BACK(self, *args, **kwargs) -> Any: ...
    def CAPSLOCK(self, *args, **kwargs) -> Any: ...
    def CLOSEBRACKET(self, *args, **kwargs) -> Any: ...
    def COMMA(self, *args, **kwargs) -> Any: ...
    def CONTROL(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def DELETE(self, *args, **kwargs) -> Any: ...
    def DIVIDE(self, *args, **kwargs) -> Any: ...
    def ENTER(self, *args, **kwargs) -> Any: ...
    def ESC(self, *args, **kwargs) -> Any: ...
    def ESCAPE(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def F1(self, *args, **kwargs) -> Any: ...
    def F10(self, *args, **kwargs) -> Any: ...
    def F11(self, *args, **kwargs) -> Any: ...
    def F12(self, *args, **kwargs) -> Any: ...
    def F13(self, *args, **kwargs) -> Any: ...
    def F14(self, *args, **kwargs) -> Any: ...
    def F15(self, *args, **kwargs) -> Any: ...
    def F16(self, *args, **kwargs) -> Any: ...
    def F17(self, *args, **kwargs) -> Any: ...
    def F18(self, *args, **kwargs) -> Any: ...
    def F19(self, *args, **kwargs) -> Any: ...
    def F2(self, *args, **kwargs) -> Any: ...
    def F20(self, *args, **kwargs) -> Any: ...
    def F21(self, *args, **kwargs) -> Any: ...
    def F22(self, *args, **kwargs) -> Any: ...
    def F23(self, *args, **kwargs) -> Any: ...
    def F24(self, *args, **kwargs) -> Any: ...
    def F3(self, *args, **kwargs) -> Any: ...
    def F4(self, *args, **kwargs) -> Any: ...
    def F5(self, *args, **kwargs) -> Any: ...
    def F6(self, *args, **kwargs) -> Any: ...
    def F7(self, *args, **kwargs) -> Any: ...
    def F8(self, *args, **kwargs) -> Any: ...
    def F9(self, *args, **kwargs) -> Any: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HELP(self, *args, **kwargs) -> Any: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def KEY_A(self, *args, **kwargs) -> Any: ...
    def KEY_B(self, *args, **kwargs) -> Any: ...
    def KEY_C(self, *args, **kwargs) -> Any: ...
    def KEY_D(self, *args, **kwargs) -> Any: ...
    def KEY_E(self, *args, **kwargs) -> Any: ...
    def KEY_F(self, *args, **kwargs) -> Any: ...
    def KEY_G(self, *args, **kwargs) -> Any: ...
    def KEY_H(self, *args, **kwargs) -> Any: ...
    def KEY_I(self, *args, **kwargs) -> Any: ...
    def KEY_J(self, *args, **kwargs) -> Any: ...
    def KEY_K(self, *args, **kwargs) -> Any: ...
    def KEY_L(self, *args, **kwargs) -> Any: ...
    def KEY_M(self, *args, **kwargs) -> Any: ...
    def KEY_N(self, *args, **kwargs) -> Any: ...
    def KEY_O(self, *args, **kwargs) -> Any: ...
    def KEY_P(self, *args, **kwargs) -> Any: ...
    def KEY_Q(self, *args, **kwargs) -> Any: ...
    def KEY_R(self, *args, **kwargs) -> Any: ...
    def KEY_S(self, *args, **kwargs) -> Any: ...
    def KEY_T(self, *args, **kwargs) -> Any: ...
    def KEY_U(self, *args, **kwargs) -> Any: ...
    def KEY_V(self, *args, **kwargs) -> Any: ...
    def KEY_W(self, *args, **kwargs) -> Any: ...
    def KEY_X(self, *args, **kwargs) -> Any: ...
    def KEY_Y(self, *args, **kwargs) -> Any: ...
    def KEY_Z(self, *args, **kwargs) -> Any: ...
    def KEY_0(self, *args, **kwargs) -> Any: ...
    def KEY_1(self, *args, **kwargs) -> Any: ...
    def KEY_2(self, *args, **kwargs) -> Any: ...
    def KEY_3(self, *args, **kwargs) -> Any: ...
    def KEY_4(self, *args, **kwargs) -> Any: ...
    def KEY_5(self, *args, **kwargs) -> Any: ...
    def KEY_6(self, *args, **kwargs) -> Any: ...
    def KEY_7(self, *args, **kwargs) -> Any: ...
    def KEY_8(self, *args, **kwargs) -> Any: ...
    def KEY_9(self, *args, **kwargs) -> Any: ...
    def LWIN(self, *args, **kwargs) -> Any: ...
    def MULTIPLY(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def NUMLOCK(self, *args, **kwargs) -> Any: ...
    def NUMPAD0(self, *args, **kwargs) -> Any: ...
    def NUMPAD1(self, *args, **kwargs) -> Any: ...
    def NUMPAD2(self, *args, **kwargs) -> Any: ...
    def NUMPAD3(self, *args, **kwargs) -> Any: ...
    def NUMPAD4(self, *args, **kwargs) -> Any: ...
    def NUMPAD5(self, *args, **kwargs) -> Any: ...
    def NUMPAD6(self, *args, **kwargs) -> Any: ...
    def NUMPAD7(self, *args, **kwargs) -> Any: ...
    def NUMPAD8(self, *args, **kwargs) -> Any: ...
    def NUMPAD9(self, *args, **kwargs) -> Any: ...
    def OEM_MINUS(self, *args, **kwargs) -> Any: ...
    def OEM_PLUS(self, *args, **kwargs) -> Any: ...
    def OEM_102(self, *args, **kwargs) -> Any: ...
    def OPENBRACKET(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PAUSE(self, *args, **kwargs) -> Any: ...
    def PERIOD(self, *args, **kwargs) -> Any: ...
    def PIPE(self, *args, **kwargs) -> Any: ...
    def POWER(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def QUOTE(self, *args, **kwargs) -> Any: ...
    def RETURN(self, *args, **kwargs) -> Any: ...
    def RSHIFT(self, *args, **kwargs) -> Any: ...
    def RWIN(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SEMICOLON(self, *args, **kwargs) -> Any: ...
    def SHIFT(self, *args, **kwargs) -> Any: ...
    def SLEEP(self, *args, **kwargs) -> Any: ...
    def SNAPSHOT(self, *args, **kwargs) -> Any: ...
    def SPACE(self, *args, **kwargs) -> Any: ...
    def SUBTRACT(self, *args, **kwargs) -> Any: ...
    def TAB(self, *args, **kwargs) -> Any: ...
    def TILDE(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def WINMENU(self, *args, **kwargs) -> Any: ...
    def ZOOM(self, *args, **kwargs) -> Any: ...


class KeyEventFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def KEYEVENTF_EXTENDEDKEY(self, *args, **kwargs) -> Any: ...
    def KEYEVENTF_KEYDOWN(self, *args, **kwargs) -> Any: ...
    def KEYEVENTF_KEYUP(self, *args, **kwargs) -> Any: ...
    def KEYEVENTF_SCANCODE(self, *args, **kwargs) -> Any: ...
    def KEYEVENTF_UNICODE(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class SendMessageTimeoutFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SMTO_ABORTIFHUNG(self, *args, **kwargs) -> Any: ...
    def SMTO_BLOCK(self, *args, **kwargs) -> Any: ...
    def SMTO_ERRORONEXIT(self, *args, **kwargs) -> Any: ...
    def SMTO_NORMAL(self, *args, **kwargs) -> Any: ...
    def SMTO_NOTIMEOUTIFNOTHUNG(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class AccessibilityState:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def STATE_SYSTEM_ALERT_HIGH(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_ALERT_LOW(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_ALERT_MEDIUM(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_ANIMATED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_BUSY(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_CHECKED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_COLLAPSED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_DEFAULT(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_EXPANDED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_EXTSELECTABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_FLOATING(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_FOCUSABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_FOCUSED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_HOTTRACKED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_INVISIBLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_LINKED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_MARQUEED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_MIXED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_MOVEABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_MULTISELECTABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_OFFSCREEN(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_PRESSED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_READONLY(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_SELECTABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_SELECTED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_SELFVOICING(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_SIZEABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_TRAVERSED(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_UNAVAILABLE(self, *args, **kwargs) -> Any: ...
    def STATE_SYSTEM_VALID(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class AccessibilityRole:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ROLE_SYSTEM_ALERT(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_ANIMATION(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_APPLICATION(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_BORDER(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_BUTTONDROPDOWN(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_BUTTONDROPDOWNGRID(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_BUTTONMENU(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CARET(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CELL(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CHARACTER(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CHART(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CHECKBUTTON(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CLIENT(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CLOCK(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_COLUMN(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_COLUMNHEADER(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_COMBOBOX(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_CURSOR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_DIAGRAM(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_DIAL(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_DIALOG(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_DOCUMENT(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_DROPLIST(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_EQUATION(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_GRAPHIC(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_GRIP(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_GROUPING(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_HELPBALLOON(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_HOTKEYFIELD(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_INDICATOR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_LINK(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_LIST(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_LISTITEM(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_MENUBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_MENUITEM(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_MENUPOPUP(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_OUTLINE(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_OUTLINEITEM(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PAGETAB(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PAGETABLIST(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PANE(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PROGRESSBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PROPERTYPAGE(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_PUSHBUTTON(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_RADIOBUTTON(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_ROW(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_ROWHEADER(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_SCROLLBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_SEPARATOR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_SLIDER(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_SOUND(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_SPINBUTTON(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_STATICTEXT(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_STATUSBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_TABLE(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_TEXT(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_TITLEBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_TOOLBAR(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_TOOLTIP(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_WHITESPACE(self, *args, **kwargs) -> Any: ...
    def ROLE_SYSTEM_WINDOW(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class CursorState:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CURSOR_HIDING(self, *args, **kwargs) -> Any: ...
    def CURSOR_SHOWING(self, *args, **kwargs) -> Any: ...
    def CURSOR_SUPPRESSED(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class StretchMode:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def STRETCH_ANDSCANS(self, *args, **kwargs) -> Any: ...
    def STRETCH_DELETESCANS(self, *args, **kwargs) -> Any: ...
    def STRETCH_HALFTONE(self, *args, **kwargs) -> Any: ...
    def STRETCH_ORSCANS(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class TernaryRasterOperations:

    def __init__(self, *args, **kwargs) -> Any: ...
    def BLACKNESS(self, *args, **kwargs) -> Any: ...
    def CAPTUREBLT(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def DSTINVERT(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MERGECOPY(self, *args, **kwargs) -> Any: ...
    def MERGEPAINT(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def NOTSRCCOPY(self, *args, **kwargs) -> Any: ...
    def NOTSRCERASE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PATCOPY(self, *args, **kwargs) -> Any: ...
    def PATINVERT(self, *args, **kwargs) -> Any: ...
    def PATPAINT(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SRCAND(self, *args, **kwargs) -> Any: ...
    def SRCCOPY(self, *args, **kwargs) -> Any: ...
    def SRCERASE(self, *args, **kwargs) -> Any: ...
    def SRCINVERT(self, *args, **kwargs) -> Any: ...
    def SRCPAINT(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def WHITENESS(self, *args, **kwargs) -> Any: ...


class InjectedInputVisualizationMode:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def DEFAULT(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def INDIREC(self, *args, **kwargs) -> Any: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class PointerInputType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PT_MOUSE(self, *args, **kwargs) -> Any: ...
    def PT_PEN(self, *args, **kwargs) -> Any: ...
    def PT_POINTER(self, *args, **kwargs) -> Any: ...
    def PT_TOUCH(self, *args, **kwargs) -> Any: ...
    def PT_TOUCHPAD(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class PointerFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CANCELLED(self, *args, **kwargs) -> Any: ...
    def CAPTURECHANGED(self, *args, **kwargs) -> Any: ...
    def CONFIDENCE(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def DOWN(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def FIFTHBUTTON(self, *args, **kwargs) -> Any: ...
    def FIRSTBUTTON(self, *args, **kwargs) -> Any: ...
    def FOURTHBUTTON(self, *args, **kwargs) -> Any: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HASTRANSFORM(self, *args, **kwargs) -> Any: ...
    def HWHEEL(self, *args, **kwargs) -> Any: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def INCONTACT(self, *args, **kwargs) -> Any: ...
    def INRANGE(self, *args, **kwargs) -> Any: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NEW(self, *args, **kwargs) -> Any: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PRIMARY(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SECONDBUTTON(self, *args, **kwargs) -> Any: ...
    def THIRDBUTTON(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def UP(self, *args, **kwargs) -> Any: ...
    def UPDATE(self, *args, **kwargs) -> Any: ...
    def WHEEL(self, *args, **kwargs) -> Any: ...


class PointerButtonChangeType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def FIFTHBUTTON_DOWN(self, *args, **kwargs) -> Any: ...
    def FIFTHBUTTON_UP(self, *args, **kwargs) -> Any: ...
    def FIRSTBUTTON_DOWN(self, *args, **kwargs) -> Any: ...
    def FIRSTBUTTON_UP(self, *args, **kwargs) -> Any: ...
    def FOURTHBUTTON_DOWN(self, *args, **kwargs) -> Any: ...
    def FOURTHBUTTON_UP(self, *args, **kwargs) -> Any: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SECONDBUTTON_DOWN(self, *args, **kwargs) -> Any: ...
    def SECONDBUTTON_UP(self, *args, **kwargs) -> Any: ...
    def THIRDBUTTON_DOWN(self, *args, **kwargs) -> Any: ...
    def THIRDBUTTON_UP(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class TouchFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class TouchMask:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CONTACTAREA(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NONE(self, *args, **kwargs) -> Any: ...
    def ORIENTATION(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def PRESSURE(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...


class SYSTEMTIME:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class ProcessAccessFlags:

    def __init__(self, *args, **kwargs) -> Any: ...
    def All(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def CreateProcess(self, *args, **kwargs) -> Any: ...
    def CreateThread(self, *args, **kwargs) -> Any: ...
    def DuplicateHandle(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def QueryInformation(self, *args, **kwargs) -> Any: ...
    def QueryLimitedInformation(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetInformation(self, *args, **kwargs) -> Any: ...
    def SetQuota(self, *args, **kwargs) -> Any: ...
    def Synchronize(self, *args, **kwargs) -> Any: ...
    def Terminate(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def VirtualMemoryOperation(self, *args, **kwargs) -> Any: ...
    def VirtualMemoryRead(self, *args, **kwargs) -> Any: ...
    def VirtualMemoryWrite(self, *args, **kwargs) -> Any: ...


class AllocationType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Commit(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Decommit(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def LargePages(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def Physical(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Release(self, *args, **kwargs) -> Any: ...
    def Reserve(self, *args, **kwargs) -> Any: ...
    def Reset(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TopDown(self, *args, **kwargs) -> Any: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def WriteWatch(self, *args, **kwargs) -> Any: ...


class MemoryProtection:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Execute(self, *args, **kwargs) -> Any: ...
    def ExecuteRead(self, *args, **kwargs) -> Any: ...
    def ExecuteReadWrite(self, *args, **kwargs) -> Any: ...
    def ExecuteWriteCopy(self, *args, **kwargs) -> Any: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def GuardModifierflag(self, *args, **kwargs) -> Any: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def NoAccess(self, *args, **kwargs) -> Any: ...
    def NoCacheModifierflag(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReadOnly(self, *args, **kwargs) -> Any: ...
    def ReadWrite(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def WriteCombineModifierflag(self, *args, **kwargs) -> Any: ...
    def WriteCopy(self, *args, **kwargs) -> Any: ...


class Delegates:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def MonitorEnumDelegate(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class Gdi32:

    def __init__(self, *args, **kwargs) -> Any: ...

    def BitBlt(
            self,
            _: Any,
            __: int,
            ___: int,
            ____: int,
            _____: int,
            ______: Any,
            _______: int,
            ________: int,
            _________: System.Drawing.CopyPixelOperation,
            ) -> bool: ...

    def CreateCompatibleBitmap(self, _: Any, __: int, ___: int) -> Any: ...
    def CreateCompatibleDC(self, _: Any) -> Any: ...
    def DeleteDC(self, _: Any) -> Any: ...
    def DeleteObject(self, _: Any) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SelectObject(self, _: Any, __: Any) -> Any: ...
    def SetStretchBltMode(self, _: Any, __: StretchMode) -> bool: ...

    def StretchBlt(
            self,
            _: Any,
            __: int,
            ___: int,
            ____: int,
            _____: int,
            ______: Any,
            _______: int,
            ________: int,
            _________: int,
            __________: int,
            ___________: TernaryRasterOperations,
            ) -> bool: ...

    def ToString(self) -> str: ...


class Kernel32:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetCurrentThreadId(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetModuleHandle(self, _: str) -> Any: ...
    def GetProcAddress(self, _: Any, __: str) -> Any: ...
    def GetType(self) -> Type: ...
    def IsWow64Process(self, _: Any, __: bool) -> bool: ...
    def KERNEL32(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class Oleacc:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...

    def GetRoleText(
            self,
            _: AccessibilityRole,
            __: System.Text.StringBuilder,
            ___: int,
            ) -> int: ...

    def GetStateText(
            self,
            _: AccessibilityState,
            __: System.Text.StringBuilder,
            ___: int,
            ) -> int: ...

    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class POINT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class COLORREF:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def op_Implicit(self, _: System.Drawing.Color) -> COLORREF: ...


class INPUT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def HardwareInput(self, _: HARDWAREINPUT) -> INPUT: ...
    def KeyboardInput(self, _: KEYBDINPUT) -> INPUT: ...
    def MemberwiseClone(self) -> object: ...
    def MouseInput(self, _: MOUSEINPUT) -> INPUT: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Size(self, *args, **kwargs) -> Any: ...
    def ToString(self) -> str: ...
    def get_Size(self) -> int: ...


class INPUTUNION:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class MOUSEINPUT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class KEYBDINPUT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class HARDWAREINPUT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class CURSORINFO:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class ICONINFO:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class RECT:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class MonitorInfo:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class POINTER_TOUCH_INFO:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class POINTER_INFO:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class User32:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AttachThreadInput(self, _: int, __: int, ___: bool) -> bool: ...
    def CloseHandle(self, _: Any) -> bool: ...
    def CopyIcon(self, _: Any) -> Any: ...
    def DestroyIcon(self, _: Any) -> bool: ...
    def DrawIcon(self, _: Any, __: int, ___: int, ____: Any) -> bool: ...

    def DrawIconEx(
            self,
            _: Any,
            __: int,
            ___: int,
            ____: Any,
            _____: int,
            ______: int,
            _______: int,
            ________: Any,
            _________: int,
            ) -> bool: ...

    def EnumDisplayMonitors(self, _: Any, __: Any, ___: Any, ____: Any) -> bool: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def FindWindowEx(self, _: Any, __: Any, ___: str, ____: str) -> Any: ...
    def GetClassName(self, _: Any, __: System.Text.StringBuilder, ___: int) -> int: ...
    def GetCursorInfo(self, _: CURSORINFO) -> bool: ...
    def GetCursorPos(self, _: POINT) -> bool: ...
    def GetDesktopWindow(self) -> Any: ...
    def GetDoubleClickTime(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetIconInfo(self, _: Any, __: ICONINFO) -> bool: ...
    def GetKeyState(self, _: int) -> int: ...
    def GetMessageExtraInfo(self) -> Any: ...
    def GetMonitorInfo(self, _: Any, __: MonitorInfo) -> bool: ...
    def GetSystemMetrics(self, _: SystemMetric) -> int: ...
    def GetType(self) -> Type: ...
    def GetWindowDC(self, _: Any) -> Any: ...
    def GetWindowLong(self, _: Any, __: int) -> int: ...
    def GetWindowThreadProcessId(self, _: Any, __: int) -> int: ...

    def InitializeTouchInjection(
            self,
            _: int,
            __: InjectedInputVisualizationMode,
            ) -> bool: ...

    def InjectTouchInput(
            self,
            _: int,
            __: List[POINTER_TOUCH_INFO],
            ) -> bool: ...

    def MemberwiseClone(self) -> object: ...
    def OpenProcess(self, _: ProcessAccessFlags, __: bool, ___: int) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReadProcessMemory(
            self,
            _: Any,
            __: Any,
            ___: Any,
            ____: int,
            _____: Any,
            ) -> bool: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ReleaseDC(self, _: Any, __: Any) -> bool: ...
    def SendInput(self, _: int, __: List[INPUT], ___: int) -> int: ...

    def SendMessage(
            self,
            _: Any,
            __: int,
            ___: int,
            ____: System.Text.StringBuilder,
            ) -> bool: ...

    def SendMessageTimeout(
            self,
            _: Any,
            __: int,
            ___: Any,
            ____: Any,
            _____: SendMessageTimeoutFlags,
            ______: int,
            _______: Any,
            ) -> Any: ...

    def SetCursorPos(self, _: int, __: int) -> bool: ...
    def SetFocus(self, _: Any) -> Any: ...
    def SetForegroundWindow(self, _: Any) -> bool: ...

    def SetLayeredWindowAttributes(
            self,
            _: Any,
            __: int,
            ___: bytes,
            ____: int,
            ) -> bool: ...

    def SetWindowLong(self, _: Any, __: int, ___: int) -> int: ...

    def SetWindowPos(
            self,
            _: Any,
            __: Any,
            ___: int,
            ____: int,
            _____: int,
            ______: int,
            _______: int,
            ) -> bool: ...

    def ToString(self) -> str: ...

    def VirtualAllocEx(
            self,
            _: Any,
            __: Any,
            ___: int,
            ____: AllocationType,
            _____: MemoryProtection,
            ) -> Any: ...

    def VirtualFreeEx(self, _: Any, __: Any, ___: int, ____: AllocationType) -> bool: ...
    def VkKeyScan(self, _: str) -> int: ...

    def WriteProcessMemory(
            self,
            _: Any,
            __: Any,
            ___: object,
            ____: int,
            _____: Any,
            ) -> bool: ...


class WindowsApiTools:

    def __init__(self, *args, **kwargs) -> Any: ...
    def DoesWin32MethodExist(self, _: str, __: str) -> bool: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetMainModuleFilepath(self, _: System.Diagnostics.Process) -> str: ...
    def GetType(self) -> Type: ...
    def IsCurrentProcess64Bit(self) -> bool: ...
    def IsProcess64Bit(self, _: System.Diagnostics.Process) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
