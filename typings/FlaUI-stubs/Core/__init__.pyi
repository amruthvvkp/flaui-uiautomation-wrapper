from __future__ import annotations

from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Type

import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent


class AutomationProperty:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...

    @property
    def IsSupported(self): ...

    @IsSupported.setter
    def IsSupported(self, value): ...

    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyId(self): ...

    @PropertyId.setter
    def PropertyId(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def TryGetValue(self, _: Any) -> bool: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    @property
    def ValueOrDefault(self): ...

    @ValueOrDefault.setter
    def ValueOrDefault(self, value): ...

    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSupported(self) -> bool: ...
    def get_PropertyId(self) -> PropertyId: ...
    def get_Value(self) -> Any: ...
    def get_ValueOrDefault(self) -> Any: ...
    def op_Implicit(self, _: AutomationProperty[Any]) -> Any: ...


class ActionDisposable:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Dispose(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class Application:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Attach(self, _: str, __: int) -> Application: ...
    def AttachOrLaunch(self, _: System.Diagnostics.ProcessStartInfo) -> Application: ...
    def Close(self, _: bool) -> bool: ...

    @property
    def CloseTimeout(self): ...

    @CloseTimeout.setter
    def CloseTimeout(self, value): ...

    def Dispose(self, _: bool) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def ExitCode(self): ...

    @ExitCode.setter
    def ExitCode(self, value): ...

    def Finalize(self) -> None: ...

    def GetAllTopLevelWindows(
            self,
            _: AutomationBase,
            ) -> List[AutomationElements.Window]: ...

    def GetHashCode(self) -> int: ...

    def GetMainWindow(
            self,
            _: AutomationBase,
            __: System.Nullable[System.TimeSpan],
            ) -> Window: ...

    def GetType(self) -> Type: ...

    @property
    def HasExited(self): ...

    @HasExited.setter
    def HasExited(self, value): ...

    @property
    def IsStoreApp(self): ...

    @IsStoreApp.setter
    def IsStoreApp(self, value): ...

    def Kill(self) -> None: ...
    def Launch(self, _: str, __: str) -> Application: ...
    def LaunchStoreApp(self, _: str, __: str) -> Application: ...

    @property
    def MainWindowHandle(self): ...

    @MainWindowHandle.setter
    def MainWindowHandle(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def ProcessId(self): ...

    @ProcessId.setter
    def ProcessId(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def WaitWhileBusy(self, _: System.Nullable[System.TimeSpan]) -> bool: ...
    def WaitWhileMainHandleIsMissing(self, _: System.Nullable[System.TimeSpan]) -> bool: ...
    def get_CloseTimeout(self) -> System.TimeSpan: ...
    def get_ExitCode(self) -> int: ...
    def get_HasExited(self) -> bool: ...
    def get_IsStoreApp(self) -> bool: ...
    def get_MainWindowHandle(self) -> Any: ...
    def get_Name(self) -> str: ...
    def get_ProcessId(self) -> int: ...
    def set_CloseTimeout(self, _: System.TimeSpan) -> None: ...


class AutomationBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AutomationType(self): ...

    @AutomationType.setter
    def AutomationType(self, value): ...

    @property
    def CoalesceEvents(self): ...

    @CoalesceEvents.setter
    def CoalesceEvents(self, value): ...

    def Compare(self, _: AutomationElement, __: AutomationElement) -> bool: ...

    @property
    def ConditionFactory(self): ...

    @ConditionFactory.setter
    def ConditionFactory(self, value): ...

    @property
    def ConnectionRecoveryBehavior(self): ...

    @ConnectionRecoveryBehavior.setter
    def ConnectionRecoveryBehavior(self, value): ...

    @property
    def ConnectionTimeout(self): ...

    @ConnectionTimeout.setter
    def ConnectionTimeout(self, value): ...

    def Dispose(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventLibrary(self): ...

    @EventLibrary.setter
    def EventLibrary(self, value): ...

    def Finalize(self) -> None: ...
    def FocusedElement(self) -> AutomationElement: ...
    def FromHandle(self, _: Any) -> AutomationElement: ...
    def FromPoint(self, _: System.Drawing.Point) -> AutomationElement: ...
    def GetDesktop(self) -> AutomationElement: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NotSupportedValue(self): ...

    @NotSupportedValue.setter
    def NotSupportedValue(self, value): ...

    @property
    def OverlayManager(self): ...

    @OverlayManager.setter
    def OverlayManager(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PatternLibrary(self): ...

    @PatternLibrary.setter
    def PatternLibrary(self, value): ...

    @property
    def PropertyLibrary(self): ...

    @PropertyLibrary.setter
    def PropertyLibrary(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def RegisterFocusChangedEvent(
            self,
            _: System.Action[AutomationElement],
            ) -> FocusChangedEventHandlerBase: ...

    @property
    def TextAttributeLibrary(self): ...

    @TextAttributeLibrary.setter
    def TextAttributeLibrary(self, value): ...

    def ToString(self) -> str: ...

    @property
    def TransactionTimeout(self): ...

    @TransactionTimeout.setter
    def TransactionTimeout(self, value): ...

    @property
    def TreeWalkerFactory(self): ...

    @TreeWalkerFactory.setter
    def TreeWalkerFactory(self, value): ...

    def UnregisterAllEvents(self) -> None: ...
    def UnregisterFocusChangedEvent(self, _: FocusChangedEventHandlerBase) -> None: ...
    def get_AutomationType(self) -> AutomationType: ...
    def get_CoalesceEvents(self) -> CoalesceEventsOptions: ...
    def get_ConditionFactory(self) -> ConditionFactory: ...
    def get_ConnectionRecoveryBehavior(self) -> ConnectionRecoveryBehaviorOptions: ...
    def get_ConnectionTimeout(self) -> System.TimeSpan: ...
    def get_EventLibrary(self) -> IEventLibrary: ...
    def get_NotSupportedValue(self) -> object: ...
    def get_OverlayManager(self) -> IOverlayManager: ...
    def get_PatternLibrary(self) -> IPatternLibrary: ...
    def get_PropertyLibrary(self) -> IPropertyLibrary: ...
    def get_TextAttributeLibrary(self) -> ITextAttributeLibrary: ...
    def get_TransactionTimeout(self) -> System.TimeSpan: ...
    def get_TreeWalkerFactory(self) -> ITreeWalkerFactory: ...
    def set_CoalesceEvents(self, _: CoalesceEventsOptions) -> None: ...

    def set_ConnectionRecoveryBehavior(
            self,
            _: ConnectionRecoveryBehaviorOptions,
            ) -> None: ...

    def set_ConnectionTimeout(self, _: System.TimeSpan) -> None: ...
    def set_TransactionTimeout(self, _: System.TimeSpan) -> None: ...


class AutomationElementXPathNavigator:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AppendChild(self, _: str) -> None: ...
    def AppendChildElement(self, _: str, __: str, ___: str, ____: str) -> None: ...

    @property
    def BaseURI(self): ...

    @BaseURI.setter
    def BaseURI(self, value): ...

    @property
    def CanEdit(self): ...

    @CanEdit.setter
    def CanEdit(self, value): ...

    def CheckValidity(
            self,
            _: System.Xml.Schema.XmlSchemaSet,
            __: System.Xml.Schema.ValidationEventHandler,
            ) -> bool: ...

    def Clone(self) -> Any: ...
    def ComparePosition(self, _: Any) -> System.Xml.XmlNodeOrder: ...
    def Compile(self, _: str) -> System.Xml.XPath.XPathExpression: ...
    def CreateAttribute(self, _: str, __: str, ___: str, ____: str) -> None: ...
    def CreateAttributes(self) -> System.Xml.XmlWriter: ...
    def CreateNavigator(self) -> Any: ...
    def DeleteRange(self, _: Any) -> None: ...
    def DeleteSelf(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Evaluate(self, _: str, __: System.Xml.IXmlNamespaceResolver) -> object: ...
    def Finalize(self) -> None: ...
    def GetAttribute(self, _: str, __: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetNamespace(self, _: str) -> str: ...
    def GetNamespacesInScope(self, _: System.Xml.XmlNamespaceScope) -> Dict[str, str]: ...
    def GetType(self) -> Type: ...

    @property
    def HasAttributes(self): ...

    @HasAttributes.setter
    def HasAttributes(self, value): ...

    @property
    def HasChildren(self): ...

    @HasChildren.setter
    def HasChildren(self, value): ...

    @property
    def InnerXml(self): ...

    @InnerXml.setter
    def InnerXml(self, value): ...

    def InsertAfter(self, _: str) -> None: ...
    def InsertBefore(self, _: str) -> None: ...
    def InsertElementAfter(self, _: str, __: str, ___: str, ____: str) -> None: ...
    def InsertElementBefore(self, _: str, __: str, ___: str, ____: str) -> None: ...
    def IsDescendant(self, _: Any) -> bool: ...

    @property
    def IsEmptyElement(self): ...

    @IsEmptyElement.setter
    def IsEmptyElement(self, value): ...

    @property
    def IsNode(self): ...

    @IsNode.setter
    def IsNode(self, value): ...

    def IsSamePosition(self, _: Any) -> bool: ...

    @property
    def LocalName(self): ...

    @LocalName.setter
    def LocalName(self, value): ...

    def LookupNamespace(self, _: str) -> str: ...
    def LookupPrefix(self, _: str) -> str: ...
    def Matches(self, _: str) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def MoveTo(self, _: Any) -> bool: ...
    def MoveToAttribute(self, _: str, __: str) -> bool: ...
    def MoveToChild(self, _: str, __: str) -> bool: ...
    def MoveToFirst(self) -> bool: ...
    def MoveToFirstAttribute(self) -> bool: ...
    def MoveToFirstChild(self) -> bool: ...
    def MoveToFirstNamespace(self) -> bool: ...
    def MoveToFollowing(self, _: str, __: str, ___: Any) -> bool: ...
    def MoveToId(self, _: str) -> bool: ...
    def MoveToNamespace(self, _: str) -> bool: ...
    def MoveToNext(self, _: str, __: str) -> bool: ...
    def MoveToNextAttribute(self) -> bool: ...
    def MoveToNextNamespace(self) -> bool: ...
    def MoveToParent(self) -> bool: ...
    def MoveToPrevious(self) -> bool: ...
    def MoveToRoot(self) -> None: ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def NameTable(self): ...

    @NameTable.setter
    def NameTable(self, value): ...

    @property
    def NamespaceURI(self): ...

    @NamespaceURI.setter
    def NamespaceURI(self, value): ...

    def NavigatorComparer(self, *args, **kwargs) -> Any: ...

    @property
    def NodeType(self): ...

    @NodeType.setter
    def NodeType(self, value): ...

    @property
    def OuterXml(self): ...

    @OuterXml.setter
    def OuterXml(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def Prefix(self): ...

    @Prefix.setter
    def Prefix(self, value): ...

    def PrependChild(self, _: str) -> None: ...
    def PrependChildElement(self, _: str, __: str, ___: str, ____: str) -> None: ...
    def ReadSubtree(self) -> System.Xml.XmlReader: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ReplaceRange(self, _: Any) -> System.Xml.XmlWriter: ...
    def ReplaceSelf(self, _: str) -> None: ...

    @property
    def SchemaInfo(self): ...

    @SchemaInfo.setter
    def SchemaInfo(self, value): ...

    def Select(
            self,
            _: str,
            __: System.Xml.IXmlNamespaceResolver,
            ) -> System.Xml.XPath.XPathNodeIterator: ...

    def SelectAncestors(
            self,
            _: str,
            __: str,
            ___: bool,
            ) -> System.Xml.XPath.XPathNodeIterator: ...

    def SelectChildren(self, _: str, __: str) -> System.Xml.XPath.XPathNodeIterator: ...

    def SelectDescendants(
            self,
            _: str,
            __: str,
            ___: bool,
            ) -> System.Xml.XPath.XPathNodeIterator: ...

    def SelectSingleNode(self, _: str, __: System.Xml.IXmlNamespaceResolver) -> Any: ...
    def SetTypedValue(self, _: object) -> None: ...
    def SetValue(self, _: str) -> None: ...
    def ToString(self) -> str: ...

    @property
    def TypedValue(self): ...

    @TypedValue.setter
    def TypedValue(self, value): ...

    @property
    def UnderlyingObject(self): ...

    @UnderlyingObject.setter
    def UnderlyingObject(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def ValueAs(self, _: Type) -> object: ...

    @property
    def ValueAsBoolean(self): ...

    @ValueAsBoolean.setter
    def ValueAsBoolean(self, value): ...

    @property
    def ValueAsDateTime(self): ...

    @ValueAsDateTime.setter
    def ValueAsDateTime(self, value): ...

    @property
    def ValueAsDouble(self): ...

    @ValueAsDouble.setter
    def ValueAsDouble(self, value): ...

    @property
    def ValueAsInt(self): ...

    @ValueAsInt.setter
    def ValueAsInt(self, value): ...

    @property
    def ValueAsLong(self): ...

    @ValueAsLong.setter
    def ValueAsLong(self, value): ...

    @property
    def ValueType(self): ...

    @ValueType.setter
    def ValueType(self, value): ...

    def WriteSubtree(self, _: System.Xml.XmlWriter) -> None: ...

    @property
    def XmlLang(self): ...

    @XmlLang.setter
    def XmlLang(self, value): ...

    @property
    def XmlType(self): ...

    @XmlType.setter
    def XmlType(self, value): ...

    def get_BaseURI(self) -> str: ...
    def get_CanEdit(self) -> bool: ...
    def get_HasAttributes(self) -> bool: ...
    def get_HasChildren(self) -> bool: ...
    def get_InnerXml(self) -> str: ...
    def get_IsEmptyElement(self) -> bool: ...
    def get_IsNode(self) -> bool: ...
    def get_LocalName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_NameTable(self) -> System.Xml.XmlNameTable: ...
    def get_NamespaceURI(self) -> str: ...
    def get_NavigatorComparer(self) -> System.Collections.IEqualityComparer: ...
    def get_NodeType(self) -> System.Xml.XPath.XPathNodeType: ...
    def get_OuterXml(self) -> str: ...
    def get_Prefix(self) -> str: ...
    def get_SchemaInfo(self) -> System.Xml.Schema.IXmlSchemaInfo: ...
    def get_TypedValue(self) -> object: ...
    def get_UnderlyingObject(self) -> object: ...
    def get_Value(self) -> str: ...
    def get_ValueAsBoolean(self) -> bool: ...
    def get_ValueAsDateTime(self) -> System.DateTime: ...
    def get_ValueAsDouble(self) -> float: ...
    def get_ValueAsInt(self) -> int: ...
    def get_ValueAsLong(self) -> int: ...
    def get_ValueType(self) -> Type: ...
    def get_XmlLang(self) -> str: ...
    def get_XmlType(self) -> System.Xml.Schema.XmlSchemaType: ...
    def set_InnerXml(self, _: str) -> None: ...
    def set_OuterXml(self, _: str) -> None: ...


class AutomationType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def UIA2(self, *args, **kwargs) -> Any: ...
    def UIA3(self, *args, **kwargs) -> Any: ...


class CacheRequest:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Activate(self) -> System.IDisposable: ...
    def Add(self, _: PatternId) -> None: ...

    @property
    def AutomationElementMode(self): ...

    @AutomationElementMode.setter
    def AutomationElementMode(self, value): ...

    def Current(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def ForceNoCache(self) -> System.IDisposable: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsCachingActive(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def Patterns(self): ...

    @Patterns.setter
    def Patterns(self, value): ...

    def Pop(self) -> None: ...

    @property
    def Properties(self): ...

    @Properties.setter
    def Properties(self, value): ...

    def Push(self, _: CacheRequest) -> None: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...

    @property
    def TreeFilter(self): ...

    @TreeFilter.setter
    def TreeFilter(self, value): ...

    @property
    def TreeScope(self): ...

    @TreeScope.setter
    def TreeScope(self, value): ...

    def get_AutomationElementMode(self) -> AutomationElementMode: ...
    def get_Current(self) -> CacheRequest: ...
    def get_IsCachingActive(self) -> bool: ...
    def get_Patterns(self) -> System.Collections.Generic.HashSet[PatternId]: ...
    def get_Properties(self) -> System.Collections.Generic.HashSet[PropertyId]: ...
    def get_TreeFilter(self) -> ConditionBase: ...
    def get_TreeScope(self) -> TreeScope: ...
    def set_AutomationElementMode(self, _: AutomationElementMode) -> None: ...
    def set_TreeFilter(self, _: ConditionBase) -> None: ...
    def set_TreeScope(self, _: TreeScope) -> None: ...


class Debug:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Details(self, _: AutomationElement) -> str: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetXPathToElement(self, _: AutomationElement, __: AutomationElement) -> str: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class FrameworkAutomationElementBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AcceleratorKey(self): ...

    @AcceleratorKey.setter
    def AcceleratorKey(self, value): ...

    @property
    def AccessKey(self): ...

    @AccessKey.setter
    def AccessKey(self, value): ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def AriaProperties(self): ...

    @AriaProperties.setter
    def AriaProperties(self, value): ...

    @property
    def AriaRole(self): ...

    @AriaRole.setter
    def AriaRole(self, value): ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def AutomationId(self): ...

    @AutomationId.setter
    def AutomationId(self, value): ...

    @property
    def BoundingRectangle(self): ...

    @BoundingRectangle.setter
    def BoundingRectangle(self, value): ...

    @property
    def CenterPoint(self): ...

    @CenterPoint.setter
    def CenterPoint(self, value): ...

    @property
    def ClassName(self): ...

    @ClassName.setter
    def ClassName(self, value): ...

    @property
    def ClickablePoint(self): ...

    @ClickablePoint.setter
    def ClickablePoint(self, value): ...

    @property
    def ControlType(self): ...

    @ControlType.setter
    def ControlType(self, value): ...

    @property
    def ControllerFor(self): ...

    @ControllerFor.setter
    def ControllerFor(self, value): ...

    @property
    def Culture(self): ...

    @Culture.setter
    def Culture(self, value): ...

    @property
    def DescribedBy(self): ...

    @DescribedBy.setter
    def DescribedBy(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def FillColor(self): ...

    @FillColor.setter
    def FillColor(self, value): ...

    @property
    def FillType(self): ...

    @FillType.setter
    def FillType(self, value): ...

    def Finalize(self) -> None: ...

    def FindAll(
            self,
            _: TreeScope,
            __: ConditionBase,
            ) -> List[AutomationElements.AutomationElement]: ...

    def FindAllWithOptions(
            self,
            _: TreeScope,
            __: ConditionBase,
            ___: TreeTraversalOptions,
            ____: AutomationElement,
            ) -> List[AutomationElements.AutomationElement]: ...

    def FindAt(self, _: TreeScope, __: int, ___: ConditionBase) -> AutomationElement: ...
    def FindFirst(self, _: TreeScope, __: ConditionBase) -> AutomationElement: ...

    def FindFirstWithOptions(
            self,
            _: TreeScope,
            __: ConditionBase,
            ___: TreeTraversalOptions,
            ____: AutomationElement,
            ) -> AutomationElement: ...

    @property
    def FlowsFrom(self): ...

    @FlowsFrom.setter
    def FlowsFrom(self, value): ...

    @property
    def FlowsTo(self): ...

    @FlowsTo.setter
    def FlowsTo(self, value): ...

    @property
    def FrameworkId(self): ...

    @FrameworkId.setter
    def FrameworkId(self, value): ...

    @property
    def FullDescription(self): ...

    @FullDescription.setter
    def FullDescription(self, value): ...

    def GetCachedChildren(self) -> List[AutomationElements.AutomationElement]: ...
    def GetCachedParent(self) -> AutomationElement: ...
    def GetClickablePoint(self) -> System.Drawing.Point: ...
    def GetCurrentMetadataValue(self, _: PropertyId, __: int) -> object: ...
    def GetHashCode(self) -> int: ...
    def GetNativePattern(self, *args, **kwargs) -> Any: ...
    def GetPropertyValue(self, _: PropertyId) -> object: ...
    def GetSupportedPatterns(self) -> List[Identifiers.PatternId]: ...
    def GetSupportedProperties(self) -> List[Identifiers.PropertyId]: ...
    def GetType(self) -> Type: ...
    def GetUpdatedCache(self) -> AutomationElement: ...

    @property
    def HasKeyboardFocus(self): ...

    @HasKeyboardFocus.setter
    def HasKeyboardFocus(self, value): ...

    @property
    def HeadingLevel(self): ...

    @HeadingLevel.setter
    def HeadingLevel(self, value): ...

    @property
    def HelpText(self): ...

    @HelpText.setter
    def HelpText(self, value): ...

    def IFrameworkPatterns(self, *args, **kwargs) -> Any: ...
    def IProperties(self, *args, **kwargs) -> Any: ...
    def InitializeAnnotationPattern(self) -> IAutomationPattern[IAnnotationPattern]: ...
    def InitializeDockPattern(self) -> IAutomationPattern[IDockPattern]: ...
    def InitializeDragPattern(self) -> IAutomationPattern[IDragPattern]: ...
    def InitializeDropTargetPattern(self) -> IAutomationPattern[IDropTargetPattern]: ...
    def InitializeExpandCollapsePattern(self) -> IAutomationPattern[IExpandCollapsePattern]: ...
    def InitializeGridItemPattern(self) -> IAutomationPattern[IGridItemPattern]: ...
    def InitializeGridPattern(self) -> IAutomationPattern[IGridPattern]: ...
    def InitializeInvokePattern(self) -> IAutomationPattern[IInvokePattern]: ...
    def InitializeItemContainerPattern(self) -> IAutomationPattern[IItemContainerPattern]: ...
    def InitializeLegacyIAccessiblePattern(self) -> IAutomationPattern[ILegacyIAccessiblePattern]: ...
    def InitializeMultipleViewPattern(self) -> IAutomationPattern[IMultipleViewPattern]: ...
    def InitializeObjectModelPattern(self) -> IAutomationPattern[IObjectModelPattern]: ...
    def InitializeRangeValuePattern(self) -> IAutomationPattern[IRangeValuePattern]: ...
    def InitializeScrollItemPattern(self) -> IAutomationPattern[IScrollItemPattern]: ...
    def InitializeScrollPattern(self) -> IAutomationPattern[IScrollPattern]: ...
    def InitializeSelectionItemPattern(self) -> IAutomationPattern[ISelectionItemPattern]: ...
    def InitializeSelectionPattern(self) -> IAutomationPattern[ISelectionPattern]: ...
    def InitializeSelection2Pattern(self) -> ISelection2Pattern]: ...
    def InitializeSpreadsheetItemPattern(self) -> IAutomationPattern[ISpreadsheetItemPattern]: ...
    def InitializeSpreadsheetPattern(self) -> IAutomationPattern[ISpreadsheetPattern]: ...
    def InitializeStylesPattern(self) -> IAutomationPattern[IStylesPattern]: ...
    def InitializeSynchronizedInputPattern(self) -> IAutomationPattern[ISynchronizedInputPattern]: ...
    def InitializeTableItemPattern(self) -> IAutomationPattern[ITableItemPattern]: ...
    def InitializeTablePattern(self) -> IAutomationPattern[ITablePattern]: ...
    def InitializeTextChildPattern(self) -> IAutomationPattern[ITextChildPattern]: ...
    def InitializeTextEditPattern(self) -> IAutomationPattern[ITextEditPattern]: ...
    def InitializeTextPattern(self) -> IAutomationPattern[ITextPattern]: ...
    def InitializeText2Pattern(self) -> IText2Pattern]: ...
    def InitializeTogglePattern(self) -> IAutomationPattern[ITogglePattern]: ...
    def InitializeTransformPattern(self) -> IAutomationPattern[ITransformPattern]: ...
    def InitializeTransform2Pattern(self) -> ITransform2Pattern]: ...
    def InitializeValuePattern(self) -> IAutomationPattern[IValuePattern]: ...
    def InitializeVirtualizedItemPattern(self) -> IAutomationPattern[IVirtualizedItemPattern]: ...
    def InitializeWindowPattern(self) -> IAutomationPattern[IWindowPattern]: ...
    def InternalGetPattern(self, _: int, __: bool) -> object: ...
    def InternalGetPropertyValue(self, _: int, __: bool, ___: bool) -> object: ...

    @property
    def IsContentElement(self): ...

    @IsContentElement.setter
    def IsContentElement(self, value): ...

    @property
    def IsControlElement(self): ...

    @IsControlElement.setter
    def IsControlElement(self, value): ...

    @property
    def IsDataValidForForm(self): ...

    @IsDataValidForForm.setter
    def IsDataValidForForm(self, value): ...

    @property
    def IsDialog(self): ...

    @IsDialog.setter
    def IsDialog(self, value): ...

    @property
    def IsEnabled(self): ...

    @IsEnabled.setter
    def IsEnabled(self, value): ...

    @property
    def IsKeyboardFocusable(self): ...

    @IsKeyboardFocusable.setter
    def IsKeyboardFocusable(self, value): ...

    @property
    def IsOffscreen(self): ...

    @IsOffscreen.setter
    def IsOffscreen(self, value): ...

    @property
    def IsPassword(self): ...

    @IsPassword.setter
    def IsPassword(self, value): ...

    @property
    def IsPeripheral(self): ...

    @IsPeripheral.setter
    def IsPeripheral(self, value): ...

    @property
    def IsRequiredForForm(self): ...

    @IsRequiredForForm.setter
    def IsRequiredForForm(self, value): ...

    @property
    def ItemStatus(self): ...

    @ItemStatus.setter
    def ItemStatus(self, value): ...

    @property
    def ItemType(self): ...

    @ItemType.setter
    def ItemType(self, value): ...

    @property
    def LabeledBy(self): ...

    @LabeledBy.setter
    def LabeledBy(self, value): ...

    @property
    def LandmarkType(self): ...

    @LandmarkType.setter
    def LandmarkType(self, value): ...

    @property
    def Level(self): ...

    @Level.setter
    def Level(self, value): ...

    @property
    def LiveSetting(self): ...

    @LiveSetting.setter
    def LiveSetting(self, value): ...

    @property
    def LocalizedControlType(self): ...

    @LocalizedControlType.setter
    def LocalizedControlType(self, value): ...

    @property
    def LocalizedLandmarkType(self): ...

    @LocalizedLandmarkType.setter
    def LocalizedLandmarkType(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def NativeWindowHandle(self): ...

    @NativeWindowHandle.setter
    def NativeWindowHandle(self, value): ...

    @property
    def OptimizeForVisualContent(self): ...

    @OptimizeForVisualContent.setter
    def OptimizeForVisualContent(self, value): ...

    @property
    def Orientation(self): ...

    @Orientation.setter
    def Orientation(self, value): ...

    @property
    def OutlineColor(self): ...

    @OutlineColor.setter
    def OutlineColor(self, value): ...

    @property
    def OutlineThickness(self): ...

    @OutlineThickness.setter
    def OutlineThickness(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def Patterns(self): ...

    @Patterns.setter
    def Patterns(self, value): ...

    @property
    def PositionInSet(self): ...

    @PositionInSet.setter
    def PositionInSet(self, value): ...

    @property
    def ProcessId(self): ...

    @ProcessId.setter
    def ProcessId(self, value): ...

    @property
    def Properties(self): ...

    @Properties.setter
    def Properties(self, value): ...

    @property
    def PropertyIdLibrary(self): ...

    @PropertyIdLibrary.setter
    def PropertyIdLibrary(self, value): ...

    @property
    def ProviderDescription(self): ...

    @ProviderDescription.setter
    def ProviderDescription(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def RegisterActiveTextPositionChangedEvent(
            self,
            _: TreeScope,
            __: System.Action[AutomationElement, ITextRange],
            ) -> ActiveTextPositionChangedEventHandlerBase: ...

    def RegisterAutomationEvent(
            self,
            _: EventId,
            __: TreeScope,
            ___: System.Action[AutomationElement, EventId],
            ) -> AutomationEventHandlerBase: ...

    def RegisterNotificationEvent(
            self,
            _: TreeScope,
            __: System.Action[AutomationElement, NotificationKind, NotificationProcessing, str, str],
            ) -> NotificationEventHandlerBase: ...

    def RegisterPropertyChangedEvent(
            self,
            _: TreeScope,
            __: System.Action[AutomationElement, PropertyId, object],
            ___: List[Identifiers.PropertyId],
            ) -> PropertyChangedEventHandlerBase: ...

    def RegisterStructureChangedEvent(
            self,
            _: TreeScope,
            __: System.Action`3[AutomationElements.AutomationElement,FlaUI.Core.Definitions.StructureChangeType,System.Int32[]],
            ) -> StructureChangedEventHandlerBase: ...

    def RegisterTextEditTextChangedEventHandler(
            self,
            _: TreeScope,
            __: TextEditChangeType,
            ___: System.Action`3[AutomationElements.AutomationElement,FlaUI.Core.Definitions.TextEditChangeType,System.String[]],
            ) -> TextEditTextChangedEventHandlerBase: ...

    @property
    def Rotation(self): ...

    @Rotation.setter
    def Rotation(self, value): ...

    @property
    def RuntimeId(self): ...

    @RuntimeId.setter
    def RuntimeId(self, value): ...

    def SetFocus(self) -> None: ...

    @property
    def Size(self): ...

    @Size.setter
    def Size(self, value): ...

    @property
    def SizeOfSet(self): ...

    @SizeOfSet.setter
    def SizeOfSet(self, value): ...

    def ToString(self) -> str: ...
    def TryGetClickablePoint(self, _: System.Drawing.Point) -> bool: ...
    def TryGetNativePattern(self, *args, **kwargs) -> Any: ...
    def TryGetPropertyValue(self, _: PropertyId, __: object) -> bool: ...

    def UnregisterActiveTextPositionChangedEventHandler(
            self,
            _: ActiveTextPositionChangedEventHandlerBase,
            ) -> None: ...

    def UnregisterAutomationEventHandler(self, _: AutomationEventHandlerBase) -> None: ...

    def UnregisterNotificationEventHandler(
            self,
            _: NotificationEventHandlerBase,
            ) -> None: ...

    def UnregisterPropertyChangedEventHandler(
            self,
            _: PropertyChangedEventHandlerBase,
            ) -> None: ...

    def UnregisterStructureChangedEventHandler(
            self,
            _: StructureChangedEventHandlerBase,
            ) -> None: ...

    def UnregisterTextEditTextChangedEventHandler(
            self,
            _: TextEditTextChangedEventHandlerBase,
            ) -> None: ...

    @property
    def VisualEffects(self): ...

    @VisualEffects.setter
    def VisualEffects(self, value): ...

    def get_AcceleratorKey(self) -> AutomationProperty[str]: ...
    def get_AccessKey(self) -> AutomationProperty[str]: ...
    def get_AnnotationObjects(self) -> Int32[]]: ...
    def get_AnnotationTypes(self) -> Int32[]]: ...
    def get_AriaProperties(self) -> AutomationProperty[str]: ...
    def get_AriaRole(self) -> AutomationProperty[str]: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_AutomationId(self) -> AutomationProperty[str]: ...
    def get_BoundingRectangle(self) -> AutomationProperty[System.Drawing.Rectangle]: ...
    def get_CenterPoint(self) -> AutomationProperty[System.Drawing.Point]: ...
    def get_ClassName(self) -> AutomationProperty[str]: ...
    def get_ClickablePoint(self) -> AutomationProperty[System.Drawing.Point]: ...
    def get_ControlType(self) -> AutomationProperty[ControlType]: ...
    def get_ControllerFor(self) -> AutomationElement[]]: ...
    def get_Culture(self) -> AutomationProperty[System.Globalization.CultureInfo]: ...
    def get_DescribedBy(self) -> AutomationElement[]]: ...
    def get_FillColor(self) -> Int32]: ...
    def get_FillType(self) -> Int32]: ...
    def get_FlowsFrom(self) -> AutomationElement[]]: ...
    def get_FlowsTo(self) -> AutomationElement[]]: ...
    def get_FrameworkId(self) -> AutomationProperty[str]: ...
    def get_FullDescription(self) -> AutomationProperty[str]: ...
    def get_HasKeyboardFocus(self) -> AutomationProperty[bool]: ...
    def get_HeadingLevel(self) -> AutomationProperty[HeadingLevel]: ...
    def get_HelpText(self) -> AutomationProperty[str]: ...
    def get_IsContentElement(self) -> AutomationProperty[bool]: ...
    def get_IsControlElement(self) -> AutomationProperty[bool]: ...
    def get_IsDataValidForForm(self) -> AutomationProperty[bool]: ...
    def get_IsDialog(self) -> AutomationProperty[bool]: ...
    def get_IsEnabled(self) -> AutomationProperty[bool]: ...
    def get_IsKeyboardFocusable(self) -> AutomationProperty[bool]: ...
    def get_IsOffscreen(self) -> AutomationProperty[bool]: ...
    def get_IsPassword(self) -> AutomationProperty[bool]: ...
    def get_IsPeripheral(self) -> AutomationProperty[bool]: ...
    def get_IsRequiredForForm(self) -> AutomationProperty[bool]: ...
    def get_ItemStatus(self) -> AutomationProperty[str]: ...
    def get_ItemType(self) -> AutomationProperty[str]: ...
    def get_LabeledBy(self) -> AutomationProperty[AutomationElement]: ...
    def get_LandmarkType(self) -> AutomationProperty[LandmarkType]: ...
    def get_Level(self) -> Int32]: ...
    def get_LiveSetting(self) -> AutomationProperty[LiveSetting]: ...
    def get_LocalizedControlType(self) -> AutomationProperty[str]: ...
    def get_LocalizedLandmarkType(self) -> AutomationProperty[str]: ...
    def get_Name(self) -> AutomationProperty[str]: ...
    def get_NativeWindowHandle(self) -> AutomationProperty[System.IntPtr]: ...
    def get_OptimizeForVisualContent(self) -> AutomationProperty[bool]: ...
    def get_Orientation(self) -> AutomationProperty[OrientationType]: ...
    def get_OutlineColor(self) -> Int32[]]: ...
    def get_OutlineThickness(self) -> Int32[]]: ...
    def get_Patterns(self) -> Any: ...
    def get_PositionInSet(self) -> Int32]: ...
    def get_ProcessId(self) -> Int32]: ...
    def get_Properties(self) -> Any: ...
    def get_PropertyIdLibrary(self) -> IAutomationElementPropertyIds: ...
    def get_ProviderDescription(self) -> AutomationProperty[str]: ...
    def get_Rotation(self) -> Int32]: ...
    def get_RuntimeId(self) -> Int32[]]: ...
    def get_Size(self) -> Int32[]]: ...
    def get_SizeOfSet(self) -> Int32]: ...
    def get_VisualEffects(self) -> AutomationProperty[VisualEffects]: ...


class FrameworkType:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def Qt(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def Unknown(self, *args, **kwargs) -> Any: ...
    def WinForms(self, *args, **kwargs) -> Any: ...
    def Win32(self, *args, **kwargs) -> Any: ...
    def Wpf(self, *args, **kwargs) -> Any: ...
    def Xaml(self, *args, **kwargs) -> Any: ...


class IEventLibrary:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Drag(self): ...

    @Drag.setter
    def Drag(self, value): ...

    @property
    def DropTarget(self): ...

    @DropTarget.setter
    def DropTarget(self, value): ...

    @property
    def Element(self): ...

    @Element.setter
    def Element(self, value): ...

    @property
    def Invoke(self): ...

    @Invoke.setter
    def Invoke(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    @property
    def SelectionItem(self): ...

    @SelectionItem.setter
    def SelectionItem(self, value): ...

    @property
    def SynchronizedInput(self): ...

    @SynchronizedInput.setter
    def SynchronizedInput(self, value): ...

    @property
    def Text(self): ...

    @Text.setter
    def Text(self, value): ...

    @property
    def TextEdit(self): ...

    @TextEdit.setter
    def TextEdit(self, value): ...

    @property
    def Window(self): ...

    @Window.setter
    def Window(self, value): ...

    def get_Drag(self) -> IDragPatternEventIds: ...
    def get_DropTarget(self) -> IDropTargetPatternEventIds: ...
    def get_Element(self) -> IAutomationElementEventIds: ...
    def get_Invoke(self) -> IInvokePatternEventIds: ...
    def get_Selection(self) -> ISelectionPatternEventIds: ...
    def get_SelectionItem(self) -> ISelectionItemPatternEventIds: ...
    def get_SynchronizedInput(self) -> ISynchronizedInputPatternEventIds: ...
    def get_Text(self) -> ITextPatternEventIds: ...
    def get_TextEdit(self) -> ITextEditPatternEventIds: ...
    def get_Window(self) -> IWindowPatternEventIds: ...


class IPatternLibrary:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AllForCurrentFramework(self): ...

    @AllForCurrentFramework.setter
    def AllForCurrentFramework(self, value): ...

    @property
    def AnnotationPattern(self): ...

    @AnnotationPattern.setter
    def AnnotationPattern(self, value): ...

    @property
    def DockPattern(self): ...

    @DockPattern.setter
    def DockPattern(self, value): ...

    @property
    def DragPattern(self): ...

    @DragPattern.setter
    def DragPattern(self, value): ...

    @property
    def DropTargetPattern(self): ...

    @DropTargetPattern.setter
    def DropTargetPattern(self, value): ...

    @property
    def ExpandCollapsePattern(self): ...

    @ExpandCollapsePattern.setter
    def ExpandCollapsePattern(self, value): ...

    @property
    def GridItemPattern(self): ...

    @GridItemPattern.setter
    def GridItemPattern(self, value): ...

    @property
    def GridPattern(self): ...

    @GridPattern.setter
    def GridPattern(self, value): ...

    @property
    def InvokePattern(self): ...

    @InvokePattern.setter
    def InvokePattern(self, value): ...

    @property
    def ItemContainerPattern(self): ...

    @ItemContainerPattern.setter
    def ItemContainerPattern(self, value): ...

    @property
    def LegacyIAccessiblePattern(self): ...

    @LegacyIAccessiblePattern.setter
    def LegacyIAccessiblePattern(self, value): ...

    @property
    def MultipleViewPattern(self): ...

    @MultipleViewPattern.setter
    def MultipleViewPattern(self, value): ...

    @property
    def ObjectModelPattern(self): ...

    @ObjectModelPattern.setter
    def ObjectModelPattern(self, value): ...

    @property
    def RangeValuePattern(self): ...

    @RangeValuePattern.setter
    def RangeValuePattern(self, value): ...

    @property
    def ScrollItemPattern(self): ...

    @ScrollItemPattern.setter
    def ScrollItemPattern(self, value): ...

    @property
    def ScrollPattern(self): ...

    @ScrollPattern.setter
    def ScrollPattern(self, value): ...

    @property
    def SelectionItemPattern(self): ...

    @SelectionItemPattern.setter
    def SelectionItemPattern(self, value): ...

    @property
    def SelectionPattern(self): ...

    @SelectionPattern.setter
    def SelectionPattern(self, value): ...

    @property
    def SpreadsheetItemPattern(self): ...

    @SpreadsheetItemPattern.setter
    def SpreadsheetItemPattern(self, value): ...

    @property
    def SpreadsheetPattern(self): ...

    @SpreadsheetPattern.setter
    def SpreadsheetPattern(self, value): ...

    @property
    def StylesPattern(self): ...

    @StylesPattern.setter
    def StylesPattern(self, value): ...

    @property
    def SynchronizedInputPattern(self): ...

    @SynchronizedInputPattern.setter
    def SynchronizedInputPattern(self, value): ...

    @property
    def TableItemPattern(self): ...

    @TableItemPattern.setter
    def TableItemPattern(self, value): ...

    @property
    def TablePattern(self): ...

    @TablePattern.setter
    def TablePattern(self, value): ...

    @property
    def TextChildPattern(self): ...

    @TextChildPattern.setter
    def TextChildPattern(self, value): ...

    @property
    def TextEditPattern(self): ...

    @TextEditPattern.setter
    def TextEditPattern(self, value): ...

    @property
    def TextPattern(self): ...

    @TextPattern.setter
    def TextPattern(self, value): ...

    @property
    def Text2Pattern(self): ...

    @Text2Pattern.setter
    def Text2Pattern(self, value): ...

    @property
    def TogglePattern(self): ...

    @TogglePattern.setter
    def TogglePattern(self, value): ...

    @property
    def TransformPattern(self): ...

    @TransformPattern.setter
    def TransformPattern(self, value): ...

    @property
    def Transform2Pattern(self): ...

    @Transform2Pattern.setter
    def Transform2Pattern(self, value): ...

    @property
    def ValuePattern(self): ...

    @ValuePattern.setter
    def ValuePattern(self, value): ...

    @property
    def VirtualizedItemPattern(self): ...

    @VirtualizedItemPattern.setter
    def VirtualizedItemPattern(self, value): ...

    @property
    def WindowPattern(self): ...

    @WindowPattern.setter
    def WindowPattern(self, value): ...

    def get_AllForCurrentFramework(self) -> List[Identifiers.PatternId]: ...
    def get_AnnotationPattern(self) -> PatternId: ...
    def get_DockPattern(self) -> PatternId: ...
    def get_DragPattern(self) -> PatternId: ...
    def get_DropTargetPattern(self) -> PatternId: ...
    def get_ExpandCollapsePattern(self) -> PatternId: ...
    def get_GridItemPattern(self) -> PatternId: ...
    def get_GridPattern(self) -> PatternId: ...
    def get_InvokePattern(self) -> PatternId: ...
    def get_ItemContainerPattern(self) -> PatternId: ...
    def get_LegacyIAccessiblePattern(self) -> PatternId: ...
    def get_MultipleViewPattern(self) -> PatternId: ...
    def get_ObjectModelPattern(self) -> PatternId: ...
    def get_RangeValuePattern(self) -> PatternId: ...
    def get_ScrollItemPattern(self) -> PatternId: ...
    def get_ScrollPattern(self) -> PatternId: ...
    def get_SelectionItemPattern(self) -> PatternId: ...
    def get_SelectionPattern(self) -> PatternId: ...
    def get_SpreadsheetItemPattern(self) -> PatternId: ...
    def get_SpreadsheetPattern(self) -> PatternId: ...
    def get_StylesPattern(self) -> PatternId: ...
    def get_SynchronizedInputPattern(self) -> PatternId: ...
    def get_TableItemPattern(self) -> PatternId: ...
    def get_TablePattern(self) -> PatternId: ...
    def get_TextChildPattern(self) -> PatternId: ...
    def get_TextEditPattern(self) -> PatternId: ...
    def get_TextPattern(self) -> PatternId: ...
    def get_Text2Pattern(self) -> PatternId: ...
    def get_TogglePattern(self) -> PatternId: ...
    def get_TransformPattern(self) -> PatternId: ...
    def get_Transform2Pattern(self) -> PatternId: ...
    def get_ValuePattern(self) -> PatternId: ...
    def get_VirtualizedItemPattern(self) -> PatternId: ...
    def get_WindowPattern(self) -> PatternId: ...


class IPropertyLibrary:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Annotation(self): ...

    @Annotation.setter
    def Annotation(self, value): ...

    @property
    def Dock(self): ...

    @Dock.setter
    def Dock(self, value): ...

    @property
    def Drag(self): ...

    @Drag.setter
    def Drag(self, value): ...

    @property
    def DropTarget(self): ...

    @DropTarget.setter
    def DropTarget(self, value): ...

    @property
    def Element(self): ...

    @Element.setter
    def Element(self, value): ...

    @property
    def ExpandCollapse(self): ...

    @ExpandCollapse.setter
    def ExpandCollapse(self, value): ...

    @property
    def Grid(self): ...

    @Grid.setter
    def Grid(self, value): ...

    @property
    def GridItem(self): ...

    @GridItem.setter
    def GridItem(self, value): ...

    @property
    def LegacyIAccessible(self): ...

    @LegacyIAccessible.setter
    def LegacyIAccessible(self, value): ...

    @property
    def MultipleView(self): ...

    @MultipleView.setter
    def MultipleView(self, value): ...

    @property
    def PatternAvailability(self): ...

    @PatternAvailability.setter
    def PatternAvailability(self, value): ...

    @property
    def RangeValue(self): ...

    @RangeValue.setter
    def RangeValue(self, value): ...

    @property
    def Scroll(self): ...

    @Scroll.setter
    def Scroll(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    @property
    def SelectionItem(self): ...

    @SelectionItem.setter
    def SelectionItem(self, value): ...

    @property
    def Selection2(self): ...

    @Selection2.setter
    def Selection2(self, value): ...

    @property
    def SpreadsheetItem(self): ...

    @SpreadsheetItem.setter
    def SpreadsheetItem(self, value): ...

    @property
    def Styles(self): ...

    @Styles.setter
    def Styles(self, value): ...

    @property
    def Table(self): ...

    @Table.setter
    def Table(self, value): ...

    @property
    def TableItem(self): ...

    @TableItem.setter
    def TableItem(self, value): ...

    @property
    def Toggle(self): ...

    @Toggle.setter
    def Toggle(self, value): ...

    @property
    def Transform(self): ...

    @Transform.setter
    def Transform(self, value): ...

    @property
    def Transform2(self): ...

    @Transform2.setter
    def Transform2(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    @property
    def Window(self): ...

    @Window.setter
    def Window(self, value): ...

    def get_Annotation(self) -> IAnnotationPatternPropertyIds: ...
    def get_Dock(self) -> IDockPatternPropertyIds: ...
    def get_Drag(self) -> IDragPatternPropertyIds: ...
    def get_DropTarget(self) -> IDropTargetPatternPropertyIds: ...
    def get_Element(self) -> IAutomationElementPropertyIds: ...
    def get_ExpandCollapse(self) -> IExpandCollapsePatternPropertyIds: ...
    def get_Grid(self) -> IGridPatternPropertyIds: ...
    def get_GridItem(self) -> IGridItemPatternPropertyIds: ...
    def get_LegacyIAccessible(self) -> ILegacyIAccessiblePatternPropertyIds: ...
    def get_MultipleView(self) -> IMultipleViewPatternPropertyIds: ...
    def get_PatternAvailability(self) -> IAutomationElementPatternAvailabilityPropertyIds: ...
    def get_RangeValue(self) -> IRangeValuePatternPropertyIds: ...
    def get_Scroll(self) -> IScrollPatternPropertyIds: ...
    def get_Selection(self) -> ISelectionPatternPropertyIds: ...
    def get_SelectionItem(self) -> ISelectionItemPatternPropertyIds: ...
    def get_Selection2(self) -> ISelection2PatternPropertyIds: ...
    def get_SpreadsheetItem(self) -> ISpreadsheetItemPatternPropertyIds: ...
    def get_Styles(self) -> IStylesPatternPropertyIds: ...
    def get_Table(self) -> ITablePatternPropertyIds: ...
    def get_TableItem(self) -> ITableItemPatternPropertyIds: ...
    def get_Toggle(self) -> ITogglePatternPropertyIds: ...
    def get_Transform(self) -> ITransformPatternPropertyIds: ...
    def get_Transform2(self) -> ITransform2PatternPropertyIds: ...
    def get_Value(self) -> IValuePatternPropertyIds: ...
    def get_Window(self) -> IWindowPatternPropertyIds: ...


class ITextAttributeLibrary:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AfterParagraphSpacing(self): ...

    @AfterParagraphSpacing.setter
    def AfterParagraphSpacing(self, value): ...

    @property
    def AnimationStyle(self): ...

    @AnimationStyle.setter
    def AnimationStyle(self, value): ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def BackgroundColor(self): ...

    @BackgroundColor.setter
    def BackgroundColor(self, value): ...

    @property
    def BeforeParagraphSpacing(self): ...

    @BeforeParagraphSpacing.setter
    def BeforeParagraphSpacing(self, value): ...

    @property
    def BulletStyle(self): ...

    @BulletStyle.setter
    def BulletStyle(self, value): ...

    @property
    def CapStyle(self): ...

    @CapStyle.setter
    def CapStyle(self, value): ...

    @property
    def CaretBidiMode(self): ...

    @CaretBidiMode.setter
    def CaretBidiMode(self, value): ...

    @property
    def CaretPosition(self): ...

    @CaretPosition.setter
    def CaretPosition(self, value): ...

    @property
    def Culture(self): ...

    @Culture.setter
    def Culture(self, value): ...

    @property
    def FontName(self): ...

    @FontName.setter
    def FontName(self, value): ...

    @property
    def FontSize(self): ...

    @FontSize.setter
    def FontSize(self, value): ...

    @property
    def FontWeight(self): ...

    @FontWeight.setter
    def FontWeight(self, value): ...

    @property
    def ForegroundColor(self): ...

    @ForegroundColor.setter
    def ForegroundColor(self, value): ...

    @property
    def HorizontalTextAlignment(self): ...

    @HorizontalTextAlignment.setter
    def HorizontalTextAlignment(self, value): ...

    @property
    def IndentationFirstLine(self): ...

    @IndentationFirstLine.setter
    def IndentationFirstLine(self, value): ...

    @property
    def IndentationLeading(self): ...

    @IndentationLeading.setter
    def IndentationLeading(self, value): ...

    @property
    def IndentationTrailing(self): ...

    @IndentationTrailing.setter
    def IndentationTrailing(self, value): ...

    @property
    def IsActive(self): ...

    @IsActive.setter
    def IsActive(self, value): ...

    @property
    def IsHidden(self): ...

    @IsHidden.setter
    def IsHidden(self, value): ...

    @property
    def IsItalic(self): ...

    @IsItalic.setter
    def IsItalic(self, value): ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def IsSubscript(self): ...

    @IsSubscript.setter
    def IsSubscript(self, value): ...

    @property
    def IsSuperscript(self): ...

    @IsSuperscript.setter
    def IsSuperscript(self, value): ...

    @property
    def LineSpacing(self): ...

    @LineSpacing.setter
    def LineSpacing(self, value): ...

    @property
    def Link(self): ...

    @Link.setter
    def Link(self, value): ...

    @property
    def MarginBottom(self): ...

    @MarginBottom.setter
    def MarginBottom(self, value): ...

    @property
    def MarginLeading(self): ...

    @MarginLeading.setter
    def MarginLeading(self, value): ...

    @property
    def MarginTop(self): ...

    @MarginTop.setter
    def MarginTop(self, value): ...

    @property
    def MarginTrailing(self): ...

    @MarginTrailing.setter
    def MarginTrailing(self, value): ...

    @property
    def OutlineStyles(self): ...

    @OutlineStyles.setter
    def OutlineStyles(self, value): ...

    @property
    def OverlineColor(self): ...

    @OverlineColor.setter
    def OverlineColor(self, value): ...

    @property
    def OverlineStyle(self): ...

    @OverlineStyle.setter
    def OverlineStyle(self, value): ...

    @property
    def SayAsInterpretAs(self): ...

    @SayAsInterpretAs.setter
    def SayAsInterpretAs(self, value): ...

    @property
    def SelectionActiveEnd(self): ...

    @SelectionActiveEnd.setter
    def SelectionActiveEnd(self, value): ...

    @property
    def StrikethroughColor(self): ...

    @StrikethroughColor.setter
    def StrikethroughColor(self, value): ...

    @property
    def StrikethroughStyle(self): ...

    @StrikethroughStyle.setter
    def StrikethroughStyle(self, value): ...

    @property
    def StyleId(self): ...

    @StyleId.setter
    def StyleId(self, value): ...

    @property
    def StyleName(self): ...

    @StyleName.setter
    def StyleName(self, value): ...

    @property
    def Tabs(self): ...

    @Tabs.setter
    def Tabs(self, value): ...

    @property
    def TextFlowDirections(self): ...

    @TextFlowDirections.setter
    def TextFlowDirections(self, value): ...

    @property
    def UnderlineColor(self): ...

    @UnderlineColor.setter
    def UnderlineColor(self, value): ...

    @property
    def UnderlineStyle(self): ...

    @UnderlineStyle.setter
    def UnderlineStyle(self, value): ...

    def get_AfterParagraphSpacing(self) -> TextAttributeId: ...
    def get_AnimationStyle(self) -> TextAttributeId: ...
    def get_AnnotationObjects(self) -> TextAttributeId: ...
    def get_AnnotationTypes(self) -> TextAttributeId: ...
    def get_BackgroundColor(self) -> TextAttributeId: ...
    def get_BeforeParagraphSpacing(self) -> TextAttributeId: ...
    def get_BulletStyle(self) -> TextAttributeId: ...
    def get_CapStyle(self) -> TextAttributeId: ...
    def get_CaretBidiMode(self) -> TextAttributeId: ...
    def get_CaretPosition(self) -> TextAttributeId: ...
    def get_Culture(self) -> TextAttributeId: ...
    def get_FontName(self) -> TextAttributeId: ...
    def get_FontSize(self) -> TextAttributeId: ...
    def get_FontWeight(self) -> TextAttributeId: ...
    def get_ForegroundColor(self) -> TextAttributeId: ...
    def get_HorizontalTextAlignment(self) -> TextAttributeId: ...
    def get_IndentationFirstLine(self) -> TextAttributeId: ...
    def get_IndentationLeading(self) -> TextAttributeId: ...
    def get_IndentationTrailing(self) -> TextAttributeId: ...
    def get_IsActive(self) -> TextAttributeId: ...
    def get_IsHidden(self) -> TextAttributeId: ...
    def get_IsItalic(self) -> TextAttributeId: ...
    def get_IsReadOnly(self) -> TextAttributeId: ...
    def get_IsSubscript(self) -> TextAttributeId: ...
    def get_IsSuperscript(self) -> TextAttributeId: ...
    def get_LineSpacing(self) -> TextAttributeId: ...
    def get_Link(self) -> TextAttributeId: ...
    def get_MarginBottom(self) -> TextAttributeId: ...
    def get_MarginLeading(self) -> TextAttributeId: ...
    def get_MarginTop(self) -> TextAttributeId: ...
    def get_MarginTrailing(self) -> TextAttributeId: ...
    def get_OutlineStyles(self) -> TextAttributeId: ...
    def get_OverlineColor(self) -> TextAttributeId: ...
    def get_OverlineStyle(self) -> TextAttributeId: ...
    def get_SayAsInterpretAs(self) -> TextAttributeId: ...
    def get_SelectionActiveEnd(self) -> TextAttributeId: ...
    def get_StrikethroughColor(self) -> TextAttributeId: ...
    def get_StrikethroughStyle(self) -> TextAttributeId: ...
    def get_StyleId(self) -> TextAttributeId: ...
    def get_StyleName(self) -> TextAttributeId: ...
    def get_Tabs(self) -> TextAttributeId: ...
    def get_TextFlowDirections(self) -> TextAttributeId: ...
    def get_UnderlineColor(self) -> TextAttributeId: ...
    def get_UnderlineStyle(self) -> TextAttributeId: ...


class ITextRange:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...
    def Clone(self) -> ITextRange: ...
    def Compare(self, _: ITextRange) -> bool: ...

    def CompareEndpoints(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> int: ...

    def ExpandToEnclosingUnit(self, _: TextUnit) -> None: ...
    def FindAttribute(self, _: TextAttributeId, __: object, ___: bool) -> ITextRange: ...
    def FindText(self, _: str, __: bool, ___: bool) -> ITextRange: ...
    def GetAttributeValue(self, _: TextAttributeId) -> object: ...
    def GetBoundingRectangles(self) -> List[System.Drawing.Rectangle]: ...
    def GetChildren(self) -> List[AutomationElements.AutomationElement]: ...
    def GetEnclosingElement(self) -> AutomationElement: ...
    def GetText(self, _: int) -> str: ...
    def Move(self, _: TextUnit, __: int) -> int: ...

    def MoveEndpointByRange(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> None: ...

    def MoveEndpointByUnit(
            self,
            _: TextPatternRangeEndpoint,
            __: TextUnit,
            ___: int,
            ) -> int: ...

    def RemoveFromSelection(self) -> None: ...
    def ScrollIntoView(self, _: bool) -> None: ...
    def Select(self) -> None: ...


class ITextRange2:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...
    def Clone(self) -> ITextRange: ...
    def Compare(self, _: ITextRange) -> bool: ...

    def CompareEndpoints(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> int: ...

    def ExpandToEnclosingUnit(self, _: TextUnit) -> None: ...
    def FindAttribute(self, _: TextAttributeId, __: object, ___: bool) -> ITextRange: ...
    def FindText(self, _: str, __: bool, ___: bool) -> ITextRange: ...
    def GetAttributeValue(self, _: TextAttributeId) -> object: ...
    def GetBoundingRectangles(self) -> List[System.Drawing.Rectangle]: ...
    def GetChildren(self) -> List[AutomationElements.AutomationElement]: ...
    def GetEnclosingElement(self) -> AutomationElement: ...
    def GetText(self, _: int) -> str: ...
    def Move(self, _: TextUnit, __: int) -> int: ...

    def MoveEndpointByRange(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> None: ...

    def MoveEndpointByUnit(
            self,
            _: TextPatternRangeEndpoint,
            __: TextUnit,
            ___: int,
            ) -> int: ...

    def RemoveFromSelection(self) -> None: ...
    def ScrollIntoView(self, _: bool) -> None: ...
    def Select(self) -> None: ...
    def ShowContextMenu(self) -> None: ...


class ITextRange3:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...
    def Clone(self) -> ITextRange: ...
    def Compare(self, _: ITextRange) -> bool: ...

    def CompareEndpoints(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> int: ...

    def ExpandToEnclosingUnit(self, _: TextUnit) -> None: ...
    def FindAttribute(self, _: TextAttributeId, __: object, ___: bool) -> ITextRange: ...
    def FindText(self, _: str, __: bool, ___: bool) -> ITextRange: ...
    def GetAttributeValue(self, _: TextAttributeId) -> object: ...

    def GetAttributeValues(
            self,
            _: List[Identifiers.TextAttributeId],
            ) -> List[object]: ...

    def GetBoundingRectangles(self) -> List[System.Drawing.Rectangle]: ...
    def GetChildren(self) -> List[AutomationElements.AutomationElement]: ...

    def GetChildrenBuildCache(
            self,
            _: CacheRequest,
            ) -> List[AutomationElements.AutomationElement]: ...

    def GetEnclosingElement(self) -> AutomationElement: ...
    def GetEnclosingElementBuildCache(self, _: CacheRequest) -> AutomationElement: ...
    def GetText(self, _: int) -> str: ...
    def Move(self, _: TextUnit, __: int) -> int: ...

    def MoveEndpointByRange(
            self,
            _: TextPatternRangeEndpoint,
            __: ITextRange,
            ___: TextPatternRangeEndpoint,
            ) -> None: ...

    def MoveEndpointByUnit(
            self,
            _: TextPatternRangeEndpoint,
            __: TextUnit,
            ___: int,
            ) -> int: ...

    def RemoveFromSelection(self) -> None: ...
    def ScrollIntoView(self, _: bool) -> None: ...
    def Select(self) -> None: ...
    def ShowContextMenu(self) -> None: ...


class ITreeWalker:

    def __init__(self, *args, **kwargs) -> Any: ...
    def GetFirstChild(self, _: AutomationElement) -> AutomationElement: ...
    def GetLastChild(self, _: AutomationElement) -> AutomationElement: ...
    def GetNextSibling(self, _: AutomationElement) -> AutomationElement: ...
    def GetParent(self, _: AutomationElement) -> AutomationElement: ...
    def GetPreviousSibling(self, _: AutomationElement) -> AutomationElement: ...


class ITreeWalkerFactory:

    def __init__(self, *args, **kwargs) -> Any: ...
    def GetContentViewWalker(self) -> ITreeWalker: ...
    def GetControlViewWalker(self) -> ITreeWalker: ...
    def GetCustomTreeWalker(self, _: ConditionBase) -> ITreeWalker: ...
    def GetRawViewWalker(self) -> ITreeWalker: ...
