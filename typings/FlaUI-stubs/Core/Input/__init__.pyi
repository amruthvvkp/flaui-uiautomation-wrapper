from __future__ import annotations

from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Type

import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent


class Interpolation:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...

    def Execute(
            self,
            _: System.Action`1[System.Drawing.Point[]],
            __: List[System.Tuple`2[System.Drawing.Point,System.Drawing.Point]],
            ___: System.TimeSpan,
            ____: System.TimeSpan,
            _____: bool,
            ) -> None: ...

    def ExecuteRotation(
            self,
            _: System.Action[System.Drawing.Point],
            __: System.Drawing.Point,
            ___: float,
            ____: float,
            _____: float,
            ______: System.TimeSpan,
            _______: System.TimeSpan,
            ________: bool,
            ) -> None: ...

    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class Keyboard:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Press(self, _: VirtualKeyShort) -> None: ...
    def PressScanCode(self, _: int, __: bool) -> None: ...
    def PressVirtualKeyCode(self, _: int) -> None: ...

    def Pressing(
            self,
            _: List[FlaUI.Core.WindowsAPI.VirtualKeyShort],
            ) -> System.IDisposable: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Release(self, _: VirtualKeyShort) -> None: ...
    def ReleaseScanCode(self, _: int, __: bool) -> None: ...
    def ReleaseVirtualKeyCode(self, _: int) -> None: ...
    def ToString(self) -> str: ...
    def Type(self, _: List[FlaUI.Core.WindowsAPI.VirtualKeyShort]) -> None: ...
    def TypeScanCode(self, _: int, __: bool) -> None: ...

    def TypeSimultaneously(
            self,
            _: List[FlaUI.Core.WindowsAPI.VirtualKeyShort],
            ) -> None: ...

    def TypeVirtualKeyCode(self, _: int) -> None: ...


class Mouse:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AreButtonsSwapped(self, *args, **kwargs) -> Any: ...
    def Click(self, _: System.Drawing.Point, __: MouseButton) -> None: ...
    def DoubleClick(self, _: System.Drawing.Point, __: MouseButton) -> None: ...
    def Down(self, _: MouseButton) -> None: ...

    def Drag(
            self,
            _: System.Drawing.Point,
            __: int,
            ___: int,
            ____: MouseButton,
            ) -> None: ...

    def DragHorizontally(
            self,
            _: System.Drawing.Point,
            __: int,
            ___: MouseButton,
            ) -> None: ...

    def DragVertically(
            self,
            _: System.Drawing.Point,
            __: int,
            ___: MouseButton,
            ) -> None: ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def HorizontalScroll(self, _: float) -> None: ...
    def LeftClick(self, _: System.Drawing.Point) -> None: ...
    def LeftDoubleClick(self, _: System.Drawing.Point) -> None: ...
    def MemberwiseClone(self) -> object: ...
    def MoveBy(self, _: int, __: int) -> None: ...
    def MovePixelsPerMillisecond(self, *args, **kwargs) -> Any: ...
    def MovePixelsPerStep(self, *args, **kwargs) -> Any: ...
    def MoveTo(self, _: int, __: int) -> None: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Position(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def RightClick(self, _: System.Drawing.Point) -> None: ...
    def RightDoubleClick(self, _: System.Drawing.Point) -> None: ...
    def Scroll(self, _: float) -> None: ...
    def ToString(self) -> str: ...
    def Up(self, _: MouseButton) -> None: ...
    def get_AreButtonsSwapped(self) -> bool: ...
    def get_MovePixelsPerMillisecond(self) -> float: ...
    def get_MovePixelsPerStep(self) -> float: ...
    def get_Position(self) -> System.Drawing.Point: ...
    def set_MovePixelsPerMillisecond(self, _: float) -> None: ...
    def set_MovePixelsPerStep(self, _: float) -> None: ...
    def set_Position(self, _: System.Drawing.Point) -> None: ...


class MouseButton:

    def __init__(self, *args, **kwargs) -> Any: ...
    def CompareTo(self, _: object) -> int: ...
    def Equals(self, _: object) -> bool: ...
    def Finalize(self) -> None: ...
    def Format(self, _: Type, __: object, ___: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetName(self, _: Type, __: object) -> str: ...
    def GetNames(self, _: Type) -> List[str]: ...
    def GetType(self) -> Type: ...
    def GetTypeCode(self) -> Any: ...
    def GetUnderlyingType(self, _: Type) -> Type: ...
    def GetValues(self, _: Type) -> List: ...
    def HasFlag(self, _: Enum) -> bool: ...
    def IsDefined(self, _: Type, __: object) -> bool: ...
    def Left(self, *args, **kwargs) -> Any: ...
    def MemberwiseClone(self) -> object: ...
    def Middle(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def Parse(self, _: Type, __: str, ___: bool) -> object: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Right(self, *args, **kwargs) -> Any: ...
    def ToObject(self, _: Type, __: object) -> object: ...
    def ToString(self, _: str, __: Any) -> str: ...
    def TryParse(self, *args, **kwargs) -> Any: ...
    def XButton1(self, *args, **kwargs) -> Any: ...
    def XButton2(self, *args, **kwargs) -> Any: ...


class Touch:

    def __init__(self, *args, **kwargs) -> Any: ...
    def DefaultInterval(self, *args, **kwargs) -> Any: ...

    def Drag(
            self,
            _: System.TimeSpan,
            __: System.Drawing.Point,
            ___: System.Drawing.Point,
            ) -> None: ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Hold(self, _: System.TimeSpan, __: List[System.Drawing.Point]) -> None: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...

    def Pinch(
            self,
            _: System.Drawing.Point,
            __: float,
            ___: float,
            ____: System.TimeSpan,
            _____: float,
            ) -> None: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Rotate(
            self,
            _: System.Drawing.Point,
            __: float,
            ___: float,
            ____: float,
            _____: System.TimeSpan,
            ) -> None: ...

    def Tap(self, _: List[System.Drawing.Point]) -> None: ...
    def ToString(self) -> str: ...

    def Transition(
            self,
            _: System.TimeSpan,
            __: List[System.Tuple`2[System.Drawing.Point,System.Drawing.Point]],
            ) -> None: ...


class Wait:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def UntilInputIsProcessed(self, _: System.Nullable[System.TimeSpan]) -> None: ...
    def UntilResponsive(self, _: AutomationElement, __: System.TimeSpan) -> bool: ...
