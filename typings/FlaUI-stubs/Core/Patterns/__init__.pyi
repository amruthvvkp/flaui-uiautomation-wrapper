from __future__ import annotations

from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Type

import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Security.Principal
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from System.ComponentModel import MarshalByValueComponent


class AnnotationPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationType(self): ...

    @AnnotationType.setter
    def AnnotationType(self, value): ...

    @property
    def AnnotationTypeName(self): ...

    @AnnotationTypeName.setter
    def AnnotationTypeName(self, value): ...

    @property
    def Author(self): ...

    @Author.setter
    def Author(self, value): ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DateTime(self): ...

    @DateTime.setter
    def DateTime(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...
    def get_AnnotationType(self) -> AutomationProperty[AnnotationType]: ...
    def get_AnnotationTypeName(self) -> AutomationProperty[str]: ...
    def get_Author(self) -> AutomationProperty[str]: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DateTime(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IAnnotationPatternPropertyIds: ...
    def get_Target(self) -> AutomationProperty[AutomationElement]: ...


class AnnotationPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationType(self): ...

    @AnnotationType.setter
    def AnnotationType(self, value): ...

    @property
    def AnnotationTypeName(self): ...

    @AnnotationTypeName.setter
    def AnnotationTypeName(self, value): ...

    @property
    def Author(self): ...

    @Author.setter
    def Author(self, value): ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DateTime(self): ...

    @DateTime.setter
    def DateTime(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...
    def get_AnnotationType(self) -> AutomationProperty[AnnotationType]: ...
    def get_AnnotationTypeName(self) -> AutomationProperty[str]: ...
    def get_Author(self) -> AutomationProperty[str]: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DateTime(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IAnnotationPatternPropertyIds: ...
    def get_Target(self) -> AutomationProperty[AutomationElement]: ...


class DockPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DockPosition(self): ...

    @DockPosition.setter
    def DockPosition(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetDockPosition(self, _: DockPosition) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DockPosition(self) -> AutomationProperty[DockPosition]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDockPatternPropertyIds: ...


class DockPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DockPosition(self): ...

    @DockPosition.setter
    def DockPosition(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetDockPosition(self, _: DockPosition) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DockPosition(self) -> AutomationProperty[DockPosition]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDockPatternPropertyIds: ...


class DragPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DropEffect(self): ...

    @DropEffect.setter
    def DropEffect(self, value): ...

    @property
    def DropEffects(self): ...

    @DropEffects.setter
    def DropEffects(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def GrabbedItems(self): ...

    @GrabbedItems.setter
    def GrabbedItems(self, value): ...

    @property
    def IsGrabbed(self): ...

    @IsGrabbed.setter
    def IsGrabbed(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DropEffect(self) -> AutomationProperty[str]: ...
    def get_DropEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDragPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_GrabbedItems(self) -> AutomationElement[]]: ...
    def get_IsGrabbed(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDragPatternPropertyIds: ...


class DragPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DropEffect(self): ...

    @DropEffect.setter
    def DropEffect(self, value): ...

    @property
    def DropEffects(self): ...

    @DropEffects.setter
    def DropEffects(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def GrabbedItems(self): ...

    @GrabbedItems.setter
    def GrabbedItems(self, value): ...

    @property
    def IsGrabbed(self): ...

    @IsGrabbed.setter
    def IsGrabbed(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DropEffect(self) -> AutomationProperty[str]: ...
    def get_DropEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDragPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_GrabbedItems(self) -> AutomationElement[]]: ...
    def get_IsGrabbed(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDragPatternPropertyIds: ...


class DropTargetPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DropTargetEffect(self): ...

    @DropTargetEffect.setter
    def DropTargetEffect(self, value): ...

    @property
    def DropTargetEffects(self): ...

    @DropTargetEffects.setter
    def DropTargetEffects(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DropTargetEffect(self) -> AutomationProperty[str]: ...
    def get_DropTargetEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDropTargetPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDropTargetPatternPropertyIds: ...


class DropTargetPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DropTargetEffect(self): ...

    @DropTargetEffect.setter
    def DropTargetEffect(self, value): ...

    @property
    def DropTargetEffects(self): ...

    @DropTargetEffects.setter
    def DropTargetEffects(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DropTargetEffect(self) -> AutomationProperty[str]: ...
    def get_DropTargetEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDropTargetPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IDropTargetPatternPropertyIds: ...


class ExpandCollapsePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Collapse(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Expand(self) -> None: ...

    @property
    def ExpandCollapseState(self): ...

    @ExpandCollapseState.setter
    def ExpandCollapseState(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ExpandCollapseState(self) -> AutomationProperty[ExpandCollapseState]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IExpandCollapsePatternPropertyIds: ...


class ExpandCollapsePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Collapse(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Expand(self) -> None: ...

    @property
    def ExpandCollapseState(self): ...

    @ExpandCollapseState.setter
    def ExpandCollapseState(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ExpandCollapseState(self) -> AutomationProperty[ExpandCollapseState]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IExpandCollapsePatternPropertyIds: ...


class GridItemPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def Column(self): ...

    @Column.setter
    def Column(self, value): ...

    @property
    def ColumnSpan(self): ...

    @ColumnSpan.setter
    def ColumnSpan(self, value): ...

    @property
    def ContainingGrid(self): ...

    @ContainingGrid.setter
    def ContainingGrid(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Row(self): ...

    @Row.setter
    def Row(self, value): ...

    @property
    def RowSpan(self): ...

    @RowSpan.setter
    def RowSpan(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_Column(self) -> Int32]: ...
    def get_ColumnSpan(self) -> Int32]: ...
    def get_ContainingGrid(self) -> AutomationProperty[AutomationElement]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IGridItemPatternPropertyIds: ...
    def get_Row(self) -> Int32]: ...
    def get_RowSpan(self) -> Int32]: ...


class GridItemPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def Column(self): ...

    @Column.setter
    def Column(self, value): ...

    @property
    def ColumnSpan(self): ...

    @ColumnSpan.setter
    def ColumnSpan(self, value): ...

    @property
    def ContainingGrid(self): ...

    @ContainingGrid.setter
    def ContainingGrid(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Row(self): ...

    @Row.setter
    def Row(self, value): ...

    @property
    def RowSpan(self): ...

    @RowSpan.setter
    def RowSpan(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_Column(self) -> Int32]: ...
    def get_ColumnSpan(self) -> Int32]: ...
    def get_ContainingGrid(self) -> AutomationProperty[AutomationElement]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IGridItemPatternPropertyIds: ...
    def get_Row(self) -> Int32]: ...
    def get_RowSpan(self) -> Int32]: ...


class GridPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnCount(self): ...

    @ColumnCount.setter
    def ColumnCount(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetItem(self, _: int, __: int) -> AutomationElement: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowCount(self): ...

    @RowCount.setter
    def RowCount(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnCount(self) -> Int32]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IGridPatternPropertyIds: ...
    def get_RowCount(self) -> Int32]: ...


class GridPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnCount(self): ...

    @ColumnCount.setter
    def ColumnCount(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetItem(self, _: int, __: int) -> AutomationElement: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowCount(self): ...

    @RowCount.setter
    def RowCount(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnCount(self) -> Int32]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IGridPatternPropertyIds: ...
    def get_RowCount(self) -> Int32]: ...


class InvokePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> IInvokePatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...


class InvokePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> IInvokePatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...


class LegacyIAccessiblePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ChildId(self): ...

    @ChildId.setter
    def ChildId(self, value): ...

    @property
    def DefaultAction(self): ...

    @DefaultAction.setter
    def DefaultAction(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    def DoDefaultAction(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetIAccessible(self) -> Any: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def Help(self): ...

    @Help.setter
    def Help(self, value): ...

    @property
    def KeyboardShortcut(self): ...

    @KeyboardShortcut.setter
    def KeyboardShortcut(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Role(self): ...

    @Role.setter
    def Role(self, value): ...

    def Select(self, _: int) -> None: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def SetValue(self, _: str) -> None: ...

    @property
    def State(self): ...

    @State.setter
    def State(self, value): ...

    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_ChildId(self) -> Int32]: ...
    def get_DefaultAction(self) -> AutomationProperty[str]: ...
    def get_Description(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_Help(self) -> AutomationProperty[str]: ...
    def get_KeyboardShortcut(self) -> AutomationProperty[str]: ...
    def get_Name(self) -> AutomationProperty[str]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ILegacyIAccessiblePatternPropertyIds: ...
    def get_Role(self) -> AutomationProperty[AccessibilityRole]: ...
    def get_Selection(self) -> AutomationElement[]]: ...
    def get_State(self) -> AutomationProperty[AccessibilityState]: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class LegacyIAccessiblePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ChildId(self): ...

    @ChildId.setter
    def ChildId(self, value): ...

    @property
    def DefaultAction(self): ...

    @DefaultAction.setter
    def DefaultAction(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    def DoDefaultAction(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetIAccessible(self) -> Any: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def Help(self): ...

    @Help.setter
    def Help(self, value): ...

    @property
    def KeyboardShortcut(self): ...

    @KeyboardShortcut.setter
    def KeyboardShortcut(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Role(self): ...

    @Role.setter
    def Role(self, value): ...

    def Select(self, _: int) -> None: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def SetValue(self, _: str) -> None: ...

    @property
    def State(self): ...

    @State.setter
    def State(self, value): ...

    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_ChildId(self) -> Int32]: ...
    def get_DefaultAction(self) -> AutomationProperty[str]: ...
    def get_Description(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_Help(self) -> AutomationProperty[str]: ...
    def get_KeyboardShortcut(self) -> AutomationProperty[str]: ...
    def get_Name(self) -> AutomationProperty[str]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ILegacyIAccessiblePatternPropertyIds: ...
    def get_Role(self) -> AutomationProperty[AccessibilityRole]: ...
    def get_Selection(self) -> AutomationElement[]]: ...
    def get_State(self) -> AutomationProperty[AccessibilityState]: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class MultipleViewPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CurrentView(self): ...

    @CurrentView.setter
    def CurrentView(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def GetViewName(self, _: int) -> str: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetCurrentView(self, _: int) -> None: ...

    @property
    def SupportedViews(self): ...

    @SupportedViews.setter
    def SupportedViews(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CurrentView(self) -> Int32]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IMultipleViewPatternPropertyIds: ...
    def get_SupportedViews(self) -> Int32[]]: ...


class MultipleViewPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CurrentView(self): ...

    @CurrentView.setter
    def CurrentView(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def GetViewName(self, _: int) -> str: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetCurrentView(self, _: int) -> None: ...

    @property
    def SupportedViews(self): ...

    @SupportedViews.setter
    def SupportedViews(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CurrentView(self) -> Int32]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IMultipleViewPatternPropertyIds: ...
    def get_SupportedViews(self) -> Int32[]]: ...


class RangeValuePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def LargeChange(self): ...

    @LargeChange.setter
    def LargeChange(self, value): ...

    @property
    def Maximum(self): ...

    @Maximum.setter
    def Maximum(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Minimum(self): ...

    @Minimum.setter
    def Minimum(self, value): ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetValue(self, _: float) -> None: ...

    @property
    def SmallChange(self): ...

    @SmallChange.setter
    def SmallChange(self, value): ...

    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_LargeChange(self) -> AutomationProperty[float]: ...
    def get_Maximum(self) -> AutomationProperty[float]: ...
    def get_Minimum(self) -> AutomationProperty[float]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IRangeValuePatternPropertyIds: ...
    def get_SmallChange(self) -> AutomationProperty[float]: ...
    def get_Value(self) -> AutomationProperty[float]: ...


class RangeValuePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def LargeChange(self): ...

    @LargeChange.setter
    def LargeChange(self, value): ...

    @property
    def Maximum(self): ...

    @Maximum.setter
    def Maximum(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Minimum(self): ...

    @Minimum.setter
    def Minimum(self, value): ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetValue(self, _: float) -> None: ...

    @property
    def SmallChange(self): ...

    @SmallChange.setter
    def SmallChange(self, value): ...

    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_LargeChange(self) -> AutomationProperty[float]: ...
    def get_Maximum(self) -> AutomationProperty[float]: ...
    def get_Minimum(self) -> AutomationProperty[float]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IRangeValuePatternPropertyIds: ...
    def get_SmallChange(self) -> AutomationProperty[float]: ...
    def get_Value(self) -> AutomationProperty[float]: ...


class ScrollPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def HorizontalScrollPercent(self): ...

    @HorizontalScrollPercent.setter
    def HorizontalScrollPercent(self, value): ...

    @property
    def HorizontalViewSize(self): ...

    @HorizontalViewSize.setter
    def HorizontalViewSize(self, value): ...

    @property
    def HorizontallyScrollable(self): ...

    @HorizontallyScrollable.setter
    def HorizontallyScrollable(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Scroll(self, _: ScrollAmount, __: ScrollAmount) -> None: ...
    def SetScrollPercent(self, _: float, __: float) -> None: ...
    def ToString(self) -> str: ...

    @property
    def VerticalScrollPercent(self): ...

    @VerticalScrollPercent.setter
    def VerticalScrollPercent(self, value): ...

    @property
    def VerticalViewSize(self): ...

    @VerticalViewSize.setter
    def VerticalViewSize(self, value): ...

    @property
    def VerticallyScrollable(self): ...

    @VerticallyScrollable.setter
    def VerticallyScrollable(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_HorizontalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_HorizontalViewSize(self) -> AutomationProperty[float]: ...
    def get_HorizontallyScrollable(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IScrollPatternPropertyIds: ...
    def get_VerticalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_VerticalViewSize(self) -> AutomationProperty[float]: ...
    def get_VerticallyScrollable(self) -> AutomationProperty[bool]: ...


class ScrollPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def HorizontalScrollPercent(self): ...

    @HorizontalScrollPercent.setter
    def HorizontalScrollPercent(self, value): ...

    @property
    def HorizontalViewSize(self): ...

    @HorizontalViewSize.setter
    def HorizontalViewSize(self, value): ...

    @property
    def HorizontallyScrollable(self): ...

    @HorizontallyScrollable.setter
    def HorizontallyScrollable(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Scroll(self, _: ScrollAmount, __: ScrollAmount) -> None: ...
    def SetScrollPercent(self, _: float, __: float) -> None: ...
    def ToString(self) -> str: ...

    @property
    def VerticalScrollPercent(self): ...

    @VerticalScrollPercent.setter
    def VerticalScrollPercent(self, value): ...

    @property
    def VerticalViewSize(self): ...

    @VerticalViewSize.setter
    def VerticalViewSize(self, value): ...

    @property
    def VerticallyScrollable(self): ...

    @VerticallyScrollable.setter
    def VerticallyScrollable(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_HorizontalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_HorizontalViewSize(self) -> AutomationProperty[float]: ...
    def get_HorizontallyScrollable(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IScrollPatternPropertyIds: ...
    def get_VerticalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_VerticalViewSize(self) -> AutomationProperty[float]: ...
    def get_VerticallyScrollable(self) -> AutomationProperty[bool]: ...


class Selection2PatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def CurrentSelectedItem(self): ...

    @CurrentSelectedItem.setter
    def CurrentSelectedItem(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FirstSelectedItem(self): ...

    @FirstSelectedItem.setter
    def FirstSelectedItem(self, value): ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def ItemCount(self): ...

    @ItemCount.setter
    def ItemCount(self, value): ...

    @property
    def LastSelectedItem(self): ...

    @LastSelectedItem.setter
    def LastSelectedItem(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_CurrentSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_FirstSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_ItemCount(self) -> Int32]: ...
    def get_LastSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionPatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class Selection2PatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def CurrentSelectedItem(self): ...

    @CurrentSelectedItem.setter
    def CurrentSelectedItem(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FirstSelectedItem(self): ...

    @FirstSelectedItem.setter
    def FirstSelectedItem(self, value): ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def ItemCount(self): ...

    @ItemCount.setter
    def ItemCount(self, value): ...

    @property
    def LastSelectedItem(self): ...

    @LastSelectedItem.setter
    def LastSelectedItem(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_CurrentSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_FirstSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_ItemCount(self) -> Int32]: ...
    def get_LastSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionPatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class SelectionItemPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelected(self): ...

    @IsSelected.setter
    def IsSelected(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def RemoveFromSelection(self) -> None: ...
    def Select(self) -> None: ...

    @property
    def SelectionContainer(self): ...

    @SelectionContainer.setter
    def SelectionContainer(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> ISelectionItemPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelected(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionItemPatternPropertyIds: ...
    def get_SelectionContainer(self) -> AutomationProperty[AutomationElement]: ...


class SelectionItemPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelected(self): ...

    @IsSelected.setter
    def IsSelected(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def RemoveFromSelection(self) -> None: ...
    def Select(self) -> None: ...

    @property
    def SelectionContainer(self): ...

    @SelectionContainer.setter
    def SelectionContainer(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> ISelectionItemPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelected(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionItemPatternPropertyIds: ...
    def get_SelectionContainer(self) -> AutomationProperty[AutomationElement]: ...


class SelectionPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionPatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class SelectionPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISelectionPatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class SpreadsheetItemPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def Formula(self): ...

    @Formula.setter
    def Formula(self, value): ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_AnnotationObjects(self) -> AutomationElement[]]: ...
    def get_AnnotationTypes(self) -> AnnotationType[]]: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_Formula(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISpreadsheetItemPatternPropertyIds: ...


class SpreadsheetItemPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def Formula(self): ...

    @Formula.setter
    def Formula(self, value): ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def get_AnnotationObjects(self) -> AutomationElement[]]: ...
    def get_AnnotationTypes(self) -> AnnotationType[]]: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_Formula(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ISpreadsheetItemPatternPropertyIds: ...


class StylesPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def ExtendedProperties(self): ...

    @ExtendedProperties.setter
    def ExtendedProperties(self, value): ...

    @property
    def FillColor(self): ...

    @FillColor.setter
    def FillColor(self, value): ...

    @property
    def FillPatternColor(self): ...

    @FillPatternColor.setter
    def FillPatternColor(self, value): ...

    @property
    def FillPatternStyle(self): ...

    @FillPatternStyle.setter
    def FillPatternStyle(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Shape(self): ...

    @Shape.setter
    def Shape(self, value): ...

    @property
    def Style(self): ...

    @Style.setter
    def Style(self, value): ...

    @property
    def StyleName(self): ...

    @StyleName.setter
    def StyleName(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ExtendedProperties(self) -> AutomationProperty[str]: ...
    def get_FillColor(self) -> Int32]: ...
    def get_FillPatternColor(self) -> Int32]: ...
    def get_FillPatternStyle(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IStylesPatternPropertyIds: ...
    def get_Shape(self) -> AutomationProperty[str]: ...
    def get_Style(self) -> AutomationProperty[StyleType]: ...
    def get_StyleName(self) -> AutomationProperty[str]: ...


class StylesPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def ExtendedProperties(self): ...

    @ExtendedProperties.setter
    def ExtendedProperties(self, value): ...

    @property
    def FillColor(self): ...

    @FillColor.setter
    def FillColor(self, value): ...

    @property
    def FillPatternColor(self): ...

    @FillPatternColor.setter
    def FillPatternColor(self, value): ...

    @property
    def FillPatternStyle(self): ...

    @FillPatternStyle.setter
    def FillPatternStyle(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def Shape(self): ...

    @Shape.setter
    def Shape(self, value): ...

    @property
    def Style(self): ...

    @Style.setter
    def Style(self, value): ...

    @property
    def StyleName(self): ...

    @StyleName.setter
    def StyleName(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ExtendedProperties(self) -> AutomationProperty[str]: ...
    def get_FillColor(self) -> Int32]: ...
    def get_FillPatternColor(self) -> Int32]: ...
    def get_FillPatternStyle(self) -> AutomationProperty[str]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IStylesPatternPropertyIds: ...
    def get_Shape(self) -> AutomationProperty[str]: ...
    def get_Style(self) -> AutomationProperty[StyleType]: ...
    def get_StyleName(self) -> AutomationProperty[str]: ...


class SynchronizedInputPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Cancel(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def StartListening(self, _: SynchronizedInputType) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> ISynchronizedInputPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...


class SynchronizedInputPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Cancel(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def StartListening(self, _: SynchronizedInputType) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_EventIds(self) -> ISynchronizedInputPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...


class TableItemPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnHeaderItems(self): ...

    @ColumnHeaderItems.setter
    def ColumnHeaderItems(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowHeaderItems(self): ...

    @RowHeaderItems.setter
    def RowHeaderItems(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnHeaderItems(self) -> AutomationElement[]]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITableItemPatternPropertyIds: ...
    def get_RowHeaderItems(self) -> AutomationElement[]]: ...


class TableItemPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnHeaderItems(self): ...

    @ColumnHeaderItems.setter
    def ColumnHeaderItems(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowHeaderItems(self): ...

    @RowHeaderItems.setter
    def RowHeaderItems(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnHeaderItems(self) -> AutomationElement[]]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITableItemPatternPropertyIds: ...
    def get_RowHeaderItems(self) -> AutomationElement[]]: ...


class TablePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnHeaders(self): ...

    @ColumnHeaders.setter
    def ColumnHeaders(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowHeaders(self): ...

    @RowHeaders.setter
    def RowHeaders(self, value): ...

    @property
    def RowOrColumnMajor(self): ...

    @RowOrColumnMajor.setter
    def RowOrColumnMajor(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnHeaders(self) -> AutomationElement[]]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITablePatternPropertyIds: ...
    def get_RowHeaders(self) -> AutomationElement[]]: ...
    def get_RowOrColumnMajor(self) -> AutomationProperty[RowOrColumnMajor]: ...


class TablePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def ColumnHeaders(self): ...

    @ColumnHeaders.setter
    def ColumnHeaders(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def RowHeaders(self): ...

    @RowHeaders.setter
    def RowHeaders(self, value): ...

    @property
    def RowOrColumnMajor(self): ...

    @RowOrColumnMajor.setter
    def RowOrColumnMajor(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_ColumnHeaders(self) -> AutomationElement[]]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITablePatternPropertyIds: ...
    def get_RowHeaders(self) -> AutomationElement[]]: ...
    def get_RowOrColumnMajor(self) -> AutomationProperty[RowOrColumnMajor]: ...


class TextPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DocumentRange(self): ...

    @DocumentRange.setter
    def DocumentRange(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetSelection(self) -> List[FlaUI.Core.ITextRange]: ...
    def GetType(self) -> Type: ...
    def GetVisibleRanges(self) -> List[FlaUI.Core.ITextRange]: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def RangeFromChild(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromPoint(self, _: System.Drawing.Point) -> ITextRange: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SupportedTextSelection(self): ...

    @SupportedTextSelection.setter
    def SupportedTextSelection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DocumentRange(self) -> ITextRange: ...
    def get_EventIds(self) -> ITextPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_SupportedTextSelection(self) -> SupportedTextSelection: ...


class TextPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def DocumentRange(self): ...

    @DocumentRange.setter
    def DocumentRange(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetSelection(self) -> List[FlaUI.Core.ITextRange]: ...
    def GetType(self) -> Type: ...
    def GetVisibleRanges(self) -> List[FlaUI.Core.ITextRange]: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...
    def RangeFromChild(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromPoint(self, _: System.Drawing.Point) -> ITextRange: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SupportedTextSelection(self): ...

    @SupportedTextSelection.setter
    def SupportedTextSelection(self, value): ...

    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_DocumentRange(self) -> ITextRange: ...
    def get_EventIds(self) -> ITextPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_SupportedTextSelection(self) -> SupportedTextSelection: ...


class TogglePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def Toggle(self) -> None: ...

    @property
    def ToggleState(self): ...

    @ToggleState.setter
    def ToggleState(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITogglePatternPropertyIds: ...
    def get_ToggleState(self) -> AutomationProperty[ToggleState]: ...


class TogglePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...
    def Toggle(self) -> None: ...

    @property
    def ToggleState(self): ...

    @ToggleState.setter
    def ToggleState(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITogglePatternPropertyIds: ...
    def get_ToggleState(self) -> AutomationProperty[ToggleState]: ...


class Transform2PatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    @property
    def CanZoom(self): ...

    @CanZoom.setter
    def CanZoom(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Move(self, _: float, __: float) -> None: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def ToString(self) -> str: ...
    def Zoom(self, _: float) -> None: ...
    def ZoomByUnit(self, _: ZoomUnit) -> None: ...

    @property
    def ZoomLevel(self): ...

    @ZoomLevel.setter
    def ZoomLevel(self, value): ...

    @property
    def ZoomMaximum(self): ...

    @ZoomMaximum.setter
    def ZoomMaximum(self, value): ...

    @property
    def ZoomMinimum(self): ...

    @ZoomMinimum.setter
    def ZoomMinimum(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_CanZoom(self) -> AutomationProperty[bool]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITransformPatternPropertyIds: ...
    def get_ZoomLevel(self) -> AutomationProperty[float]: ...
    def get_ZoomMaximum(self) -> AutomationProperty[float]: ...
    def get_ZoomMinimum(self) -> AutomationProperty[float]: ...


class Transform2PatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    @property
    def CanZoom(self): ...

    @CanZoom.setter
    def CanZoom(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Move(self, _: float, __: float) -> None: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def ToString(self) -> str: ...
    def Zoom(self, _: float) -> None: ...
    def ZoomByUnit(self, _: ZoomUnit) -> None: ...

    @property
    def ZoomLevel(self): ...

    @ZoomLevel.setter
    def ZoomLevel(self, value): ...

    @property
    def ZoomMaximum(self): ...

    @ZoomMaximum.setter
    def ZoomMaximum(self, value): ...

    @property
    def ZoomMinimum(self): ...

    @ZoomMinimum.setter
    def ZoomMinimum(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_CanZoom(self) -> AutomationProperty[bool]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITransformPatternPropertyIds: ...
    def get_ZoomLevel(self) -> AutomationProperty[float]: ...
    def get_ZoomMaximum(self) -> AutomationProperty[float]: ...
    def get_ZoomMinimum(self) -> AutomationProperty[float]: ...


class TransformPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Move(self, _: float, __: float) -> None: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITransformPatternPropertyIds: ...


class TransformPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def Move(self, _: float, __: float) -> None: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def ToString(self) -> str: ...
    def get_Automation(self) -> AutomationBase: ...
    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> ITransformPatternPropertyIds: ...


class ValuePatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetValue(self, _: str) -> None: ...
    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IValuePatternPropertyIds: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class ValuePatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetValue(self, _: str) -> None: ...
    def ToString(self) -> str: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IValuePatternPropertyIds: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class WindowPatternBase`1:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMaximize(self): ...

    @CanMaximize.setter
    def CanMaximize(self, value): ...

    @property
    def CanMinimize(self): ...

    @CanMinimize.setter
    def CanMinimize(self, value): ...

    def Close(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsModal(self): ...

    @IsModal.setter
    def IsModal(self, value): ...

    @property
    def IsTopmost(self): ...

    @IsTopmost.setter
    def IsTopmost(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetWindowVisualState(self, _: WindowVisualState) -> None: ...
    def ToString(self) -> str: ...
    def WaitForInputIdle(self, _: int) -> bool: ...

    @property
    def WindowInteractionState(self): ...

    @WindowInteractionState.setter
    def WindowInteractionState(self, value): ...

    @property
    def WindowVisualState(self): ...

    @WindowVisualState.setter
    def WindowVisualState(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_CanMaximize(self) -> AutomationProperty[bool]: ...
    def get_CanMinimize(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> IWindowPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsModal(self) -> AutomationProperty[bool]: ...
    def get_IsTopmost(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IWindowPatternPropertyIds: ...
    def get_WindowInteractionState(self) -> AutomationProperty[WindowInteractionState]: ...
    def get_WindowVisualState(self) -> AutomationProperty[WindowVisualState]: ...


class WindowPatternBase:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Automation(self): ...

    @Automation.setter
    def Automation(self, value): ...

    @property
    def CanMaximize(self): ...

    @CanMaximize.setter
    def CanMaximize(self, value): ...

    @property
    def CanMinimize(self): ...

    @CanMinimize.setter
    def CanMinimize(self, value): ...

    def Close(self) -> None: ...
    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Finalize(self) -> None: ...

    @property
    def FrameworkAutomationElement(self): ...

    @FrameworkAutomationElement.setter
    def FrameworkAutomationElement(self, value): ...

    def GetHashCode(self) -> int: ...
    def GetOrCreate(self, *args, **kwargs) -> Any: ...
    def GetType(self) -> Type: ...

    @property
    def IsModal(self): ...

    @IsModal.setter
    def IsModal(self, value): ...

    @property
    def IsTopmost(self): ...

    @IsTopmost.setter
    def IsTopmost(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def NativePattern(self): ...

    @NativePattern.setter
    def NativePattern(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def SetWindowVisualState(self, _: WindowVisualState) -> None: ...
    def ToString(self) -> str: ...
    def WaitForInputIdle(self, _: int) -> bool: ...

    @property
    def WindowInteractionState(self): ...

    @WindowInteractionState.setter
    def WindowInteractionState(self, value): ...

    @property
    def WindowVisualState(self): ...

    @WindowVisualState.setter
    def WindowVisualState(self, value): ...

    def get_Automation(self) -> AutomationBase: ...
    def get_CanMaximize(self) -> AutomationProperty[bool]: ...
    def get_CanMinimize(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> IWindowPatternEventIds: ...
    def get_FrameworkAutomationElement(self) -> FrameworkAutomationElementBase: ...
    def get_IsModal(self) -> AutomationProperty[bool]: ...
    def get_IsTopmost(self) -> AutomationProperty[bool]: ...
    def get_NativePattern(self) -> Any: ...
    def get_PropertyIds(self) -> IWindowPatternPropertyIds: ...
    def get_WindowInteractionState(self) -> AutomationProperty[WindowInteractionState]: ...
    def get_WindowVisualState(self) -> AutomationProperty[WindowVisualState]: ...


class IAnnotationPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationType(self): ...

    @AnnotationType.setter
    def AnnotationType(self, value): ...

    @property
    def AnnotationTypeName(self): ...

    @AnnotationTypeName.setter
    def AnnotationTypeName(self, value): ...

    @property
    def Author(self): ...

    @Author.setter
    def Author(self, value): ...

    @property
    def DateTime(self): ...

    @DateTime.setter
    def DateTime(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def get_AnnotationType(self) -> AutomationProperty[AnnotationType]: ...
    def get_AnnotationTypeName(self) -> AutomationProperty[str]: ...
    def get_Author(self) -> AutomationProperty[str]: ...
    def get_DateTime(self) -> AutomationProperty[str]: ...
    def get_PropertyIds(self) -> IAnnotationPatternPropertyIds: ...
    def get_Target(self) -> AutomationProperty[AutomationElement]: ...


class IAnnotationPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationTypeId(self): ...

    @AnnotationTypeId.setter
    def AnnotationTypeId(self, value): ...

    @property
    def AnnotationTypeName(self): ...

    @AnnotationTypeName.setter
    def AnnotationTypeName(self, value): ...

    @property
    def Author(self): ...

    @Author.setter
    def Author(self, value): ...

    @property
    def DateTime(self): ...

    @DateTime.setter
    def DateTime(self, value): ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def get_AnnotationTypeId(self) -> PropertyId: ...
    def get_AnnotationTypeName(self) -> PropertyId: ...
    def get_Author(self) -> PropertyId: ...
    def get_DateTime(self) -> PropertyId: ...
    def get_Target(self) -> PropertyId: ...


class IDockPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DockPosition(self): ...

    @DockPosition.setter
    def DockPosition(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def SetDockPosition(self, _: DockPosition) -> None: ...
    def get_DockPosition(self) -> AutomationProperty[DockPosition]: ...
    def get_PropertyIds(self) -> IDockPatternPropertyIds: ...


class IDockPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DockPosition(self): ...

    @DockPosition.setter
    def DockPosition(self, value): ...

    def get_DockPosition(self) -> PropertyId: ...


class IDragPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DropEffect(self): ...

    @DropEffect.setter
    def DropEffect(self, value): ...

    @property
    def DropEffects(self): ...

    @DropEffects.setter
    def DropEffects(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def GrabbedItems(self): ...

    @GrabbedItems.setter
    def GrabbedItems(self, value): ...

    @property
    def IsGrabbed(self): ...

    @IsGrabbed.setter
    def IsGrabbed(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def get_DropEffect(self) -> AutomationProperty[str]: ...
    def get_DropEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDragPatternEventIds: ...
    def get_GrabbedItems(self) -> AutomationElement[]]: ...
    def get_IsGrabbed(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> IDragPatternPropertyIds: ...


class IDragPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DropEffect(self): ...

    @DropEffect.setter
    def DropEffect(self, value): ...

    @property
    def DropEffects(self): ...

    @DropEffects.setter
    def DropEffects(self, value): ...

    @property
    def GrabbedItems(self): ...

    @GrabbedItems.setter
    def GrabbedItems(self, value): ...

    @property
    def IsGrabbed(self): ...

    @IsGrabbed.setter
    def IsGrabbed(self, value): ...

    def get_DropEffect(self) -> PropertyId: ...
    def get_DropEffects(self) -> PropertyId: ...
    def get_GrabbedItems(self) -> PropertyId: ...
    def get_IsGrabbed(self) -> PropertyId: ...


class IDragPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DragCancelEvent(self): ...

    @DragCancelEvent.setter
    def DragCancelEvent(self, value): ...

    @property
    def DragCompleteEvent(self): ...

    @DragCompleteEvent.setter
    def DragCompleteEvent(self, value): ...

    @property
    def DragStartEvent(self): ...

    @DragStartEvent.setter
    def DragStartEvent(self, value): ...

    def get_DragCancelEvent(self) -> EventId: ...
    def get_DragCompleteEvent(self) -> EventId: ...
    def get_DragStartEvent(self) -> EventId: ...


class IDropTargetPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DropTargetEffect(self): ...

    @DropTargetEffect.setter
    def DropTargetEffect(self, value): ...

    @property
    def DropTargetEffects(self): ...

    @DropTargetEffects.setter
    def DropTargetEffects(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def get_DropTargetEffect(self) -> AutomationProperty[str]: ...
    def get_DropTargetEffects(self) -> String[]]: ...
    def get_EventIds(self) -> IDropTargetPatternEventIds: ...
    def get_PropertyIds(self) -> IDropTargetPatternPropertyIds: ...


class IDropTargetPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DropTargetEffect(self): ...

    @DropTargetEffect.setter
    def DropTargetEffect(self, value): ...

    @property
    def DropTargetEffects(self): ...

    @DropTargetEffects.setter
    def DropTargetEffects(self, value): ...

    def get_DropTargetEffect(self) -> PropertyId: ...
    def get_DropTargetEffects(self) -> PropertyId: ...


class IDropTargetPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DragCompleteEvent(self): ...

    @DragCompleteEvent.setter
    def DragCompleteEvent(self, value): ...

    @property
    def DragEnterEvent(self): ...

    @DragEnterEvent.setter
    def DragEnterEvent(self, value): ...

    @property
    def DragLeaveEvent(self): ...

    @DragLeaveEvent.setter
    def DragLeaveEvent(self, value): ...

    def get_DragCompleteEvent(self) -> EventId: ...
    def get_DragEnterEvent(self) -> EventId: ...
    def get_DragLeaveEvent(self) -> EventId: ...


class IExpandCollapsePattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Collapse(self) -> None: ...
    def Expand(self) -> None: ...

    @property
    def ExpandCollapseState(self): ...

    @ExpandCollapseState.setter
    def ExpandCollapseState(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def get_ExpandCollapseState(self) -> AutomationProperty[ExpandCollapseState]: ...
    def get_PropertyIds(self) -> IExpandCollapsePatternPropertyIds: ...


class IExpandCollapsePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ExpandCollapseState(self): ...

    @ExpandCollapseState.setter
    def ExpandCollapseState(self, value): ...

    def get_ExpandCollapseState(self) -> PropertyId: ...


class IGridItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Column(self): ...

    @Column.setter
    def Column(self, value): ...

    @property
    def ColumnSpan(self): ...

    @ColumnSpan.setter
    def ColumnSpan(self, value): ...

    @property
    def ContainingGrid(self): ...

    @ContainingGrid.setter
    def ContainingGrid(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Row(self): ...

    @Row.setter
    def Row(self, value): ...

    @property
    def RowSpan(self): ...

    @RowSpan.setter
    def RowSpan(self, value): ...

    def get_Column(self) -> Int32]: ...
    def get_ColumnSpan(self) -> Int32]: ...
    def get_ContainingGrid(self) -> AutomationProperty[AutomationElement]: ...
    def get_PropertyIds(self) -> IGridItemPatternPropertyIds: ...
    def get_Row(self) -> Int32]: ...
    def get_RowSpan(self) -> Int32]: ...


class IGridItemPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def Column(self): ...

    @Column.setter
    def Column(self, value): ...

    @property
    def ColumnSpan(self): ...

    @ColumnSpan.setter
    def ColumnSpan(self, value): ...

    @property
    def ContainingGrid(self): ...

    @ContainingGrid.setter
    def ContainingGrid(self, value): ...

    @property
    def Row(self): ...

    @Row.setter
    def Row(self, value): ...

    @property
    def RowSpan(self): ...

    @RowSpan.setter
    def RowSpan(self, value): ...

    def get_Column(self) -> PropertyId: ...
    def get_ColumnSpan(self) -> PropertyId: ...
    def get_ContainingGrid(self) -> PropertyId: ...
    def get_Row(self) -> PropertyId: ...
    def get_RowSpan(self) -> PropertyId: ...


class IGridPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnCount(self): ...

    @ColumnCount.setter
    def ColumnCount(self, value): ...

    def GetItem(self, _: int, __: int) -> AutomationElement: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def RowCount(self): ...

    @RowCount.setter
    def RowCount(self, value): ...

    def get_ColumnCount(self) -> Int32]: ...
    def get_PropertyIds(self) -> IGridPatternPropertyIds: ...
    def get_RowCount(self) -> Int32]: ...


class IGridPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnCount(self): ...

    @ColumnCount.setter
    def ColumnCount(self, value): ...

    @property
    def RowCount(self): ...

    @RowCount.setter
    def RowCount(self, value): ...

    def get_ColumnCount(self) -> PropertyId: ...
    def get_RowCount(self) -> PropertyId: ...


class IInvokePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def Invoke(self) -> None: ...
    def get_EventIds(self) -> IInvokePatternEventIds: ...


class IInvokePatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def InvokedEvent(self): ...

    @InvokedEvent.setter
    def InvokedEvent(self, value): ...

    def get_InvokedEvent(self) -> EventId: ...


class IItemContainerPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    def FindItemByProperty(
            self,
            _: AutomationElement,
            __: PropertyId,
            ___: object,
            ) -> AutomationElement: ...


class ILegacyIAccessiblePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ChildId(self): ...

    @ChildId.setter
    def ChildId(self, value): ...

    @property
    def DefaultAction(self): ...

    @DefaultAction.setter
    def DefaultAction(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    def DoDefaultAction(self) -> None: ...
    def GetIAccessible(self) -> Any: ...

    @property
    def Help(self): ...

    @Help.setter
    def Help(self, value): ...

    @property
    def KeyboardShortcut(self): ...

    @KeyboardShortcut.setter
    def KeyboardShortcut(self, value): ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Role(self): ...

    @Role.setter
    def Role(self, value): ...

    def Select(self, _: int) -> None: ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def SetValue(self, _: str) -> None: ...

    @property
    def State(self): ...

    @State.setter
    def State(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_ChildId(self) -> Int32]: ...
    def get_DefaultAction(self) -> AutomationProperty[str]: ...
    def get_Description(self) -> AutomationProperty[str]: ...
    def get_Help(self) -> AutomationProperty[str]: ...
    def get_KeyboardShortcut(self) -> AutomationProperty[str]: ...
    def get_Name(self) -> AutomationProperty[str]: ...
    def get_PropertyIds(self) -> ILegacyIAccessiblePatternPropertyIds: ...
    def get_Role(self) -> AutomationProperty[AccessibilityRole]: ...
    def get_Selection(self) -> AutomationElement[]]: ...
    def get_State(self) -> AutomationProperty[AccessibilityState]: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class ILegacyIAccessiblePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ChildId(self): ...

    @ChildId.setter
    def ChildId(self, value): ...

    @property
    def DefaultAction(self): ...

    @DefaultAction.setter
    def DefaultAction(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    @property
    def Help(self): ...

    @Help.setter
    def Help(self, value): ...

    @property
    def KeyboardShortcut(self): ...

    @KeyboardShortcut.setter
    def KeyboardShortcut(self, value): ...

    @property
    def Name(self): ...

    @Name.setter
    def Name(self, value): ...

    @property
    def Role(self): ...

    @Role.setter
    def Role(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    @property
    def State(self): ...

    @State.setter
    def State(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_ChildId(self) -> PropertyId: ...
    def get_DefaultAction(self) -> PropertyId: ...
    def get_Description(self) -> PropertyId: ...
    def get_Help(self) -> PropertyId: ...
    def get_KeyboardShortcut(self) -> PropertyId: ...
    def get_Name(self) -> PropertyId: ...
    def get_Role(self) -> PropertyId: ...
    def get_Selection(self) -> PropertyId: ...
    def get_State(self) -> PropertyId: ...
    def get_Value(self) -> PropertyId: ...


class IMultipleViewPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CurrentView(self): ...

    @CurrentView.setter
    def CurrentView(self, value): ...

    def GetViewName(self, _: int) -> str: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def SetCurrentView(self, _: int) -> None: ...

    @property
    def SupportedViews(self): ...

    @SupportedViews.setter
    def SupportedViews(self, value): ...

    def get_CurrentView(self) -> Int32]: ...
    def get_PropertyIds(self) -> IMultipleViewPatternPropertyIds: ...
    def get_SupportedViews(self) -> Int32[]]: ...


class IMultipleViewPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CurrentView(self): ...

    @CurrentView.setter
    def CurrentView(self, value): ...

    @property
    def SupportedViews(self): ...

    @SupportedViews.setter
    def SupportedViews(self, value): ...

    def get_CurrentView(self) -> PropertyId: ...
    def get_SupportedViews(self) -> PropertyId: ...


class IObjectModelPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def GetUnderlyingObjectModel(self) -> object: ...


class IRangeValuePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def LargeChange(self): ...

    @LargeChange.setter
    def LargeChange(self, value): ...

    @property
    def Maximum(self): ...

    @Maximum.setter
    def Maximum(self, value): ...

    @property
    def Minimum(self): ...

    @Minimum.setter
    def Minimum(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def SetValue(self, _: float) -> None: ...

    @property
    def SmallChange(self): ...

    @SmallChange.setter
    def SmallChange(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_LargeChange(self) -> AutomationProperty[float]: ...
    def get_Maximum(self) -> AutomationProperty[float]: ...
    def get_Minimum(self) -> AutomationProperty[float]: ...
    def get_PropertyIds(self) -> IRangeValuePatternPropertyIds: ...
    def get_SmallChange(self) -> AutomationProperty[float]: ...
    def get_Value(self) -> AutomationProperty[float]: ...


class IRangeValuePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def LargeChange(self): ...

    @LargeChange.setter
    def LargeChange(self, value): ...

    @property
    def Maximum(self): ...

    @Maximum.setter
    def Maximum(self, value): ...

    @property
    def Minimum(self): ...

    @Minimum.setter
    def Minimum(self, value): ...

    @property
    def SmallChange(self): ...

    @SmallChange.setter
    def SmallChange(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_IsReadOnly(self) -> PropertyId: ...
    def get_LargeChange(self) -> PropertyId: ...
    def get_Maximum(self) -> PropertyId: ...
    def get_Minimum(self) -> PropertyId: ...
    def get_SmallChange(self) -> PropertyId: ...
    def get_Value(self) -> PropertyId: ...


class IScrollItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def ScrollIntoView(self) -> None: ...


class ScrollPatternConstants:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Equals(self, _: object, __: object) -> bool: ...
    def Finalize(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MemberwiseClone(self) -> object: ...
    def NoScroll(self, *args, **kwargs) -> Any: ...
    def Overloads(self, *args, **kwargs) -> Any: ...
    def ReferenceEquals(self, _: object, __: object) -> bool: ...
    def ToString(self) -> str: ...


class IScrollPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def HorizontalScrollPercent(self): ...

    @HorizontalScrollPercent.setter
    def HorizontalScrollPercent(self, value): ...

    @property
    def HorizontalViewSize(self): ...

    @HorizontalViewSize.setter
    def HorizontalViewSize(self, value): ...

    @property
    def HorizontallyScrollable(self): ...

    @HorizontallyScrollable.setter
    def HorizontallyScrollable(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def Scroll(self, _: ScrollAmount, __: ScrollAmount) -> None: ...
    def SetScrollPercent(self, _: float, __: float) -> None: ...

    @property
    def VerticalScrollPercent(self): ...

    @VerticalScrollPercent.setter
    def VerticalScrollPercent(self, value): ...

    @property
    def VerticalViewSize(self): ...

    @VerticalViewSize.setter
    def VerticalViewSize(self, value): ...

    @property
    def VerticallyScrollable(self): ...

    @VerticallyScrollable.setter
    def VerticallyScrollable(self, value): ...

    def get_HorizontalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_HorizontalViewSize(self) -> AutomationProperty[float]: ...
    def get_HorizontallyScrollable(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> IScrollPatternPropertyIds: ...
    def get_VerticalScrollPercent(self) -> AutomationProperty[float]: ...
    def get_VerticalViewSize(self) -> AutomationProperty[float]: ...
    def get_VerticallyScrollable(self) -> AutomationProperty[bool]: ...


class IScrollPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def HorizontalScrollPercent(self): ...

    @HorizontalScrollPercent.setter
    def HorizontalScrollPercent(self, value): ...

    @property
    def HorizontalViewSize(self): ...

    @HorizontalViewSize.setter
    def HorizontalViewSize(self, value): ...

    @property
    def HorizontallyScrollable(self): ...

    @HorizontallyScrollable.setter
    def HorizontallyScrollable(self, value): ...

    @property
    def VerticalScrollPercent(self): ...

    @VerticalScrollPercent.setter
    def VerticalScrollPercent(self, value): ...

    @property
    def VerticalViewSize(self): ...

    @VerticalViewSize.setter
    def VerticalViewSize(self, value): ...

    @property
    def VerticallyScrollable(self): ...

    @VerticallyScrollable.setter
    def VerticallyScrollable(self, value): ...

    def get_HorizontalScrollPercent(self) -> PropertyId: ...
    def get_HorizontalViewSize(self) -> PropertyId: ...
    def get_HorizontallyScrollable(self) -> PropertyId: ...
    def get_VerticalScrollPercent(self) -> PropertyId: ...
    def get_VerticalViewSize(self) -> PropertyId: ...
    def get_VerticallyScrollable(self) -> PropertyId: ...


class ISelection2Pattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def CurrentSelectedItem(self): ...

    @CurrentSelectedItem.setter
    def CurrentSelectedItem(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def FirstSelectedItem(self): ...

    @FirstSelectedItem.setter
    def FirstSelectedItem(self, value): ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def ItemCount(self): ...

    @ItemCount.setter
    def ItemCount(self, value): ...

    @property
    def LastSelectedItem(self): ...

    @LastSelectedItem.setter
    def LastSelectedItem(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_CurrentSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_FirstSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_ItemCount(self) -> Int32]: ...
    def get_LastSelectedItem(self) -> AutomationProperty[AutomationElement]: ...
    def get_PropertyIds(self) -> ISelection2PatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class ISelection2PatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def CurrentSelectedItem(self): ...

    @CurrentSelectedItem.setter
    def CurrentSelectedItem(self, value): ...

    @property
    def FirstSelectedItem(self): ...

    @FirstSelectedItem.setter
    def FirstSelectedItem(self, value): ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def ItemCount(self): ...

    @ItemCount.setter
    def ItemCount(self, value): ...

    @property
    def LastSelectedItem(self): ...

    @LastSelectedItem.setter
    def LastSelectedItem(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def get_CanSelectMultiple(self) -> PropertyId: ...
    def get_CurrentSelectedItem(self) -> PropertyId: ...
    def get_FirstSelectedItem(self) -> PropertyId: ...
    def get_IsSelectionRequired(self) -> PropertyId: ...
    def get_ItemCount(self) -> PropertyId: ...
    def get_LastSelectedItem(self) -> PropertyId: ...
    def get_Selection(self) -> PropertyId: ...


class ISelectionItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def AddToSelection(self) -> None: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def IsSelected(self): ...

    @IsSelected.setter
    def IsSelected(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def RemoveFromSelection(self) -> None: ...
    def Select(self) -> None: ...

    @property
    def SelectionContainer(self): ...

    @SelectionContainer.setter
    def SelectionContainer(self, value): ...

    def get_EventIds(self) -> ISelectionItemPatternEventIds: ...
    def get_IsSelected(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> ISelectionItemPatternPropertyIds: ...
    def get_SelectionContainer(self) -> AutomationProperty[AutomationElement]: ...


class ISelectionItemPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def IsSelected(self): ...

    @IsSelected.setter
    def IsSelected(self, value): ...

    @property
    def SelectionContainer(self): ...

    @SelectionContainer.setter
    def SelectionContainer(self, value): ...

    def get_IsSelected(self) -> PropertyId: ...
    def get_SelectionContainer(self) -> PropertyId: ...


class ISelectionItemPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ElementAddedToSelectionEvent(self): ...

    @ElementAddedToSelectionEvent.setter
    def ElementAddedToSelectionEvent(self, value): ...

    @property
    def ElementRemovedFromSelectionEvent(self): ...

    @ElementRemovedFromSelectionEvent.setter
    def ElementRemovedFromSelectionEvent(self, value): ...

    @property
    def ElementSelectedEvent(self): ...

    @ElementSelectedEvent.setter
    def ElementSelectedEvent(self, value): ...

    def get_ElementAddedToSelectionEvent(self) -> EventId: ...
    def get_ElementRemovedFromSelectionEvent(self) -> EventId: ...
    def get_ElementSelectedEvent(self) -> EventId: ...


class ISelectionPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def get_CanSelectMultiple(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> ISelectionPatternEventIds: ...
    def get_IsSelectionRequired(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> ISelectionPatternPropertyIds: ...
    def get_Selection(self) -> AutomationElement[]]: ...


class ISelectionPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanSelectMultiple(self): ...

    @CanSelectMultiple.setter
    def CanSelectMultiple(self, value): ...

    @property
    def IsSelectionRequired(self): ...

    @IsSelectionRequired.setter
    def IsSelectionRequired(self, value): ...

    @property
    def Selection(self): ...

    @Selection.setter
    def Selection(self, value): ...

    def get_CanSelectMultiple(self) -> PropertyId: ...
    def get_IsSelectionRequired(self) -> PropertyId: ...
    def get_Selection(self) -> PropertyId: ...


class ISelectionPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def InvalidatedEvent(self): ...

    @InvalidatedEvent.setter
    def InvalidatedEvent(self, value): ...

    def get_InvalidatedEvent(self) -> EventId: ...


class ISpreadsheetItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def Formula(self): ...

    @Formula.setter
    def Formula(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def get_AnnotationObjects(self) -> AutomationElement[]]: ...
    def get_AnnotationTypes(self) -> AnnotationType[]]: ...
    def get_Formula(self) -> AutomationProperty[str]: ...
    def get_PropertyIds(self) -> ISpreadsheetItemPatternPropertyIds: ...


class ISpreadsheetItemPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def AnnotationObjects(self): ...

    @AnnotationObjects.setter
    def AnnotationObjects(self, value): ...

    @property
    def AnnotationTypes(self): ...

    @AnnotationTypes.setter
    def AnnotationTypes(self, value): ...

    @property
    def Formula(self): ...

    @Formula.setter
    def Formula(self, value): ...

    def get_AnnotationObjects(self) -> PropertyId: ...
    def get_AnnotationTypes(self) -> PropertyId: ...
    def get_Formula(self) -> PropertyId: ...


class ISpreadsheetPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def GetItemByName(self, _: str) -> AutomationElement: ...


class IStylesPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ExtendedProperties(self): ...

    @ExtendedProperties.setter
    def ExtendedProperties(self, value): ...

    @property
    def FillColor(self): ...

    @FillColor.setter
    def FillColor(self, value): ...

    @property
    def FillPatternColor(self): ...

    @FillPatternColor.setter
    def FillPatternColor(self, value): ...

    @property
    def FillPatternStyle(self): ...

    @FillPatternStyle.setter
    def FillPatternStyle(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def Shape(self): ...

    @Shape.setter
    def Shape(self, value): ...

    @property
    def Style(self): ...

    @Style.setter
    def Style(self, value): ...

    @property
    def StyleName(self): ...

    @StyleName.setter
    def StyleName(self, value): ...

    def get_ExtendedProperties(self) -> AutomationProperty[str]: ...
    def get_FillColor(self) -> Int32]: ...
    def get_FillPatternColor(self) -> Int32]: ...
    def get_FillPatternStyle(self) -> AutomationProperty[str]: ...
    def get_PropertyIds(self) -> IStylesPatternPropertyIds: ...
    def get_Shape(self) -> AutomationProperty[str]: ...
    def get_Style(self) -> AutomationProperty[StyleType]: ...
    def get_StyleName(self) -> AutomationProperty[str]: ...


class IStylesPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ExtendedProperties(self): ...

    @ExtendedProperties.setter
    def ExtendedProperties(self, value): ...

    @property
    def FillColor(self): ...

    @FillColor.setter
    def FillColor(self, value): ...

    @property
    def FillPatternColor(self): ...

    @FillPatternColor.setter
    def FillPatternColor(self, value): ...

    @property
    def FillPatternStyle(self): ...

    @FillPatternStyle.setter
    def FillPatternStyle(self, value): ...

    @property
    def Shape(self): ...

    @Shape.setter
    def Shape(self, value): ...

    @property
    def StyleId(self): ...

    @StyleId.setter
    def StyleId(self, value): ...

    @property
    def StyleName(self): ...

    @StyleName.setter
    def StyleName(self, value): ...

    def get_ExtendedProperties(self) -> PropertyId: ...
    def get_FillColor(self) -> PropertyId: ...
    def get_FillPatternColor(self) -> PropertyId: ...
    def get_FillPatternStyle(self) -> PropertyId: ...
    def get_Shape(self) -> PropertyId: ...
    def get_StyleId(self) -> PropertyId: ...
    def get_StyleName(self) -> PropertyId: ...


class ISynchronizedInputPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Cancel(self) -> None: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def StartListening(self, _: SynchronizedInputType) -> None: ...
    def get_EventIds(self) -> ISynchronizedInputPatternEventIds: ...


class ISynchronizedInputPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DiscardedEvent(self): ...

    @DiscardedEvent.setter
    def DiscardedEvent(self, value): ...

    @property
    def ReachedOtherElementEvent(self): ...

    @ReachedOtherElementEvent.setter
    def ReachedOtherElementEvent(self, value): ...

    @property
    def ReachedTargetEvent(self): ...

    @ReachedTargetEvent.setter
    def ReachedTargetEvent(self, value): ...

    def get_DiscardedEvent(self) -> EventId: ...
    def get_ReachedOtherElementEvent(self) -> EventId: ...
    def get_ReachedTargetEvent(self) -> EventId: ...


class ITableItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnHeaderItems(self): ...

    @ColumnHeaderItems.setter
    def ColumnHeaderItems(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def RowHeaderItems(self): ...

    @RowHeaderItems.setter
    def RowHeaderItems(self, value): ...

    def get_ColumnHeaderItems(self) -> AutomationElement[]]: ...
    def get_PropertyIds(self) -> ITableItemPatternPropertyIds: ...
    def get_RowHeaderItems(self) -> AutomationElement[]]: ...


class ITableItemPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnHeaderItems(self): ...

    @ColumnHeaderItems.setter
    def ColumnHeaderItems(self, value): ...

    @property
    def RowHeaderItems(self): ...

    @RowHeaderItems.setter
    def RowHeaderItems(self, value): ...

    def get_ColumnHeaderItems(self) -> PropertyId: ...
    def get_RowHeaderItems(self) -> PropertyId: ...


class ITablePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnHeaders(self): ...

    @ColumnHeaders.setter
    def ColumnHeaders(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    @property
    def RowHeaders(self): ...

    @RowHeaders.setter
    def RowHeaders(self, value): ...

    @property
    def RowOrColumnMajor(self): ...

    @RowOrColumnMajor.setter
    def RowOrColumnMajor(self, value): ...

    def get_ColumnHeaders(self) -> AutomationElement[]]: ...
    def get_PropertyIds(self) -> ITablePatternPropertyIds: ...
    def get_RowHeaders(self) -> AutomationElement[]]: ...
    def get_RowOrColumnMajor(self) -> AutomationProperty[RowOrColumnMajor]: ...


class ITablePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ColumnHeaders(self): ...

    @ColumnHeaders.setter
    def ColumnHeaders(self, value): ...

    @property
    def RowHeaders(self): ...

    @RowHeaders.setter
    def RowHeaders(self, value): ...

    @property
    def RowOrColumnMajor(self): ...

    @RowOrColumnMajor.setter
    def RowOrColumnMajor(self, value): ...

    def get_ColumnHeaders(self) -> PropertyId: ...
    def get_RowHeaders(self) -> PropertyId: ...
    def get_RowOrColumnMajor(self) -> PropertyId: ...


class IText2Pattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DocumentRange(self): ...

    @DocumentRange.setter
    def DocumentRange(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def GetCaretRange(self, _: bool) -> ITextRange: ...
    def GetSelection(self) -> List[FlaUI.Core.ITextRange]: ...
    def GetVisibleRanges(self) -> List[FlaUI.Core.ITextRange]: ...
    def RangeFromAnnotation(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromChild(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromPoint(self, _: System.Drawing.Point) -> ITextRange: ...

    @property
    def SupportedTextSelection(self): ...

    @SupportedTextSelection.setter
    def SupportedTextSelection(self, value): ...

    def get_DocumentRange(self) -> ITextRange: ...
    def get_EventIds(self) -> ITextPatternEventIds: ...
    def get_SupportedTextSelection(self) -> SupportedTextSelection: ...


class ITextChildPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def TextContainer(self): ...

    @TextContainer.setter
    def TextContainer(self, value): ...

    @property
    def TextRange(self): ...

    @TextRange.setter
    def TextRange(self, value): ...

    def get_TextContainer(self) -> AutomationElement: ...
    def get_TextRange(self) -> ITextRange: ...


class ITextEditPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DocumentRange(self): ...

    @DocumentRange.setter
    def DocumentRange(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def GetActiveComposition(self) -> ITextRange: ...
    def GetConversionTarget(self) -> ITextRange: ...
    def GetSelection(self) -> List[FlaUI.Core.ITextRange]: ...
    def GetVisibleRanges(self) -> List[FlaUI.Core.ITextRange]: ...
    def RangeFromChild(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromPoint(self, _: System.Drawing.Point) -> ITextRange: ...

    @property
    def SupportedTextSelection(self): ...

    @SupportedTextSelection.setter
    def SupportedTextSelection(self, value): ...

    def get_DocumentRange(self) -> ITextRange: ...
    def get_EventIds(self) -> ITextEditPatternEventIds: ...
    def get_SupportedTextSelection(self) -> SupportedTextSelection: ...


class ITextEditPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ConversionTargetChangedEvent(self): ...

    @ConversionTargetChangedEvent.setter
    def ConversionTargetChangedEvent(self, value): ...

    @property
    def TextChangedEvent(self): ...

    @TextChangedEvent.setter
    def TextChangedEvent(self, value): ...

    @property
    def TextChangedEvent2(self): ...

    @TextChangedEvent2.setter
    def TextChangedEvent2(self, value): ...

    @property
    def TextSelectionChangedEvent(self): ...

    @TextSelectionChangedEvent.setter
    def TextSelectionChangedEvent(self, value): ...

    def get_ConversionTargetChangedEvent(self) -> EventId: ...
    def get_TextChangedEvent(self) -> EventId: ...
    def get_TextChangedEvent2(self) -> EventId: ...
    def get_TextSelectionChangedEvent(self) -> EventId: ...


class ITextPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def DocumentRange(self): ...

    @DocumentRange.setter
    def DocumentRange(self, value): ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    def GetSelection(self) -> List[FlaUI.Core.ITextRange]: ...
    def GetVisibleRanges(self) -> List[FlaUI.Core.ITextRange]: ...
    def RangeFromChild(self, _: AutomationElement) -> ITextRange: ...
    def RangeFromPoint(self, _: System.Drawing.Point) -> ITextRange: ...

    @property
    def SupportedTextSelection(self): ...

    @SupportedTextSelection.setter
    def SupportedTextSelection(self, value): ...

    def get_DocumentRange(self) -> ITextRange: ...
    def get_EventIds(self) -> ITextPatternEventIds: ...
    def get_SupportedTextSelection(self) -> SupportedTextSelection: ...


class ITextPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def TextChangedEvent(self): ...

    @TextChangedEvent.setter
    def TextChangedEvent(self, value): ...

    @property
    def TextSelectionChangedEvent(self): ...

    @TextSelectionChangedEvent.setter
    def TextSelectionChangedEvent(self, value): ...

    def get_TextChangedEvent(self) -> EventId: ...
    def get_TextSelectionChangedEvent(self) -> EventId: ...


class ITogglePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def Toggle(self) -> None: ...

    @property
    def ToggleState(self): ...

    @ToggleState.setter
    def ToggleState(self, value): ...

    def get_PropertyIds(self) -> ITogglePatternPropertyIds: ...
    def get_ToggleState(self) -> AutomationProperty[ToggleState]: ...


class ITogglePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def ToggleState(self): ...

    @ToggleState.setter
    def ToggleState(self, value): ...

    def get_ToggleState(self) -> PropertyId: ...


class ITransform2Pattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    @property
    def CanZoom(self): ...

    @CanZoom.setter
    def CanZoom(self, value): ...

    def Move(self, _: float, __: float) -> None: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def Zoom(self, _: float) -> None: ...
    def ZoomByUnit(self, _: ZoomUnit) -> None: ...

    @property
    def ZoomLevel(self): ...

    @ZoomLevel.setter
    def ZoomLevel(self, value): ...

    @property
    def ZoomMaximum(self): ...

    @ZoomMaximum.setter
    def ZoomMaximum(self, value): ...

    @property
    def ZoomMinimum(self): ...

    @ZoomMinimum.setter
    def ZoomMinimum(self, value): ...

    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_CanZoom(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> ITransform2PatternPropertyIds: ...
    def get_ZoomLevel(self) -> AutomationProperty[float]: ...
    def get_ZoomMaximum(self) -> AutomationProperty[float]: ...
    def get_ZoomMinimum(self) -> AutomationProperty[float]: ...


class ITransform2PatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    @property
    def CanZoom(self): ...

    @CanZoom.setter
    def CanZoom(self, value): ...

    @property
    def ZoomLevel(self): ...

    @ZoomLevel.setter
    def ZoomLevel(self, value): ...

    @property
    def ZoomMaximum(self): ...

    @ZoomMaximum.setter
    def ZoomMaximum(self, value): ...

    @property
    def ZoomMinimum(self): ...

    @ZoomMinimum.setter
    def ZoomMinimum(self, value): ...

    def get_CanMove(self) -> PropertyId: ...
    def get_CanResize(self) -> PropertyId: ...
    def get_CanRotate(self) -> PropertyId: ...
    def get_CanZoom(self) -> PropertyId: ...
    def get_ZoomLevel(self) -> PropertyId: ...
    def get_ZoomMaximum(self) -> PropertyId: ...
    def get_ZoomMinimum(self) -> PropertyId: ...


class ITransformPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    def Move(self, _: float, __: float) -> None: ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def Resize(self, _: float, __: float) -> None: ...
    def Rotate(self, _: float) -> None: ...
    def get_CanMove(self) -> AutomationProperty[bool]: ...
    def get_CanResize(self) -> AutomationProperty[bool]: ...
    def get_CanRotate(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> ITransformPatternPropertyIds: ...


class ITransformPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMove(self): ...

    @CanMove.setter
    def CanMove(self, value): ...

    @property
    def CanResize(self): ...

    @CanResize.setter
    def CanResize(self, value): ...

    @property
    def CanRotate(self): ...

    @CanRotate.setter
    def CanRotate(self, value): ...

    def get_CanMove(self) -> PropertyId: ...
    def get_CanResize(self) -> PropertyId: ...
    def get_CanRotate(self) -> PropertyId: ...


class IValuePattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def SetValue(self, _: str) -> None: ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_IsReadOnly(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> IValuePatternPropertyIds: ...
    def get_Value(self) -> AutomationProperty[str]: ...


class IValuePatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    @property
    def Value(self): ...

    @Value.setter
    def Value(self, value): ...

    def get_IsReadOnly(self) -> PropertyId: ...
    def get_Value(self) -> PropertyId: ...


class IVirtualizedItemPattern:

    def __init__(self, *args, **kwargs) -> Any: ...
    def Realize(self) -> None: ...


class IWindowPattern:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMaximize(self): ...

    @CanMaximize.setter
    def CanMaximize(self, value): ...

    @property
    def CanMinimize(self): ...

    @CanMinimize.setter
    def CanMinimize(self, value): ...

    def Close(self) -> None: ...

    @property
    def EventIds(self): ...

    @EventIds.setter
    def EventIds(self, value): ...

    @property
    def IsModal(self): ...

    @IsModal.setter
    def IsModal(self, value): ...

    @property
    def IsTopmost(self): ...

    @IsTopmost.setter
    def IsTopmost(self, value): ...

    @property
    def PropertyIds(self): ...

    @PropertyIds.setter
    def PropertyIds(self, value): ...

    def SetWindowVisualState(self, _: WindowVisualState) -> None: ...
    def WaitForInputIdle(self, _: int) -> bool: ...

    @property
    def WindowInteractionState(self): ...

    @WindowInteractionState.setter
    def WindowInteractionState(self, value): ...

    @property
    def WindowVisualState(self): ...

    @WindowVisualState.setter
    def WindowVisualState(self, value): ...

    def get_CanMaximize(self) -> AutomationProperty[bool]: ...
    def get_CanMinimize(self) -> AutomationProperty[bool]: ...
    def get_EventIds(self) -> IWindowPatternEventIds: ...
    def get_IsModal(self) -> AutomationProperty[bool]: ...
    def get_IsTopmost(self) -> AutomationProperty[bool]: ...
    def get_PropertyIds(self) -> IWindowPatternPropertyIds: ...
    def get_WindowInteractionState(self) -> AutomationProperty[WindowInteractionState]: ...
    def get_WindowVisualState(self) -> AutomationProperty[WindowVisualState]: ...


class IWindowPatternPropertyIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def CanMaximize(self): ...

    @CanMaximize.setter
    def CanMaximize(self, value): ...

    @property
    def CanMinimize(self): ...

    @CanMinimize.setter
    def CanMinimize(self, value): ...

    @property
    def IsModal(self): ...

    @IsModal.setter
    def IsModal(self, value): ...

    @property
    def IsTopmost(self): ...

    @IsTopmost.setter
    def IsTopmost(self, value): ...

    @property
    def WindowInteractionState(self): ...

    @WindowInteractionState.setter
    def WindowInteractionState(self, value): ...

    @property
    def WindowVisualState(self): ...

    @WindowVisualState.setter
    def WindowVisualState(self, value): ...

    def get_CanMaximize(self) -> PropertyId: ...
    def get_CanMinimize(self) -> PropertyId: ...
    def get_IsModal(self) -> PropertyId: ...
    def get_IsTopmost(self) -> PropertyId: ...
    def get_WindowInteractionState(self) -> PropertyId: ...
    def get_WindowVisualState(self) -> PropertyId: ...


class IWindowPatternEventIds:

    def __init__(self, *args, **kwargs) -> Any: ...

    @property
    def WindowClosedEvent(self): ...

    @WindowClosedEvent.setter
    def WindowClosedEvent(self, value): ...

    @property
    def WindowOpenedEvent(self): ...

    @WindowOpenedEvent.setter
    def WindowOpenedEvent(self, value): ...

    def get_WindowClosedEvent(self) -> EventId: ...
    def get_WindowOpenedEvent(self) -> EventId: ...
