[tool.poetry]
name = "flaui-uiautomation-wrapper"
version = "0.0.8a24"
description = "Tool to perform UI Automation on Windows desktop applications using an underlying FlaUI wrapper."
authors = [
  "Amruth VVKP <amruthvvkp@gmail.com>",
  "Varshith VVS <svvarsham@gmail.com>",
  "Tejaswani Sathish Kumar <tejaswani12.92@gmail.com",
]
license = "LGPL-3.0-or-later"
readme = "README.md"
keywords = [
  "testing",
  "ui",
  "ui-automation",
  "automation",
  "windows",
  "windows automation",
  "windows testing",
  "desktop automation",
  "flaui",
  "qa",
]
packages = [{ include = "flaui" }]
include = [{ path = "flaui/bin/*.dll" }]
exclude = ["tests", "docs"]
repository = "https://github.com/amruthvvkp/flaui-uiautomation-wrapper"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Typing :: Typed",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Topic :: Software Development :: Testing",
  "Intended Audience :: Developers",
]
[tool.poetry-git-version-plugin]
make_alpha_version = true
alpha_version_format = '{version}a{distance}+{commit_hash}'
version_format = '{version}'

[tool.poetry.dependencies]
python = ">=3.7,<3.13"
loguru = "^0.7.2"
pillow = [
  { version = "^10.3.0", python = ">=3.8" },
  { version = "^9.3.0", python = "<3.8" },
]
arrow = [
  { version = "^1.3.0", python = ">=3.8" },
  { version = "^1.2.3", python = "<3.8" },
]
pythonnet = "^3.0.3"
pydantic = [
  { version = "^2.7.3", python = ">=3.8" },
  { version = "^2.0.0", python = "<3.8" },
]
pydantic-settings = [
  { version = "^2.3.1", python = ">=3.8" },
  { version = "^2.0.0", python = "<3.8" },
]
pydantic-extra-types = [
  { version = "^2.8.0", python = ">=3.8" },
  { version = "^2.0.0", python = "<3.8" },
]

[tool.poetry.group.dev.dependencies]
mypy = [
  { version = "^1.10.0", python = ">=3.8" },
  { version = "^0.991", python = "<3.8" },
]
jupyter = "^1.0.0"
pre-commit = { version = "^3.3.3", python = ">=3.8" }
interrogate = [
  { version = "^1.7.0", python = ">=3.8" },
  { version = "^1.5.0", python = "<3.8" },
]
ruff = "^0.4.8"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.unit_test.dependencies]
pytest = [
  { version = "^8.2.2", python = ">=3.8" },
  { version = "^7.2.0", python = "<3.8" },
]
pytest-cov = "^4.0.0"

[tool.poetry.group.unit_test]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.1.17"
mkdocs-markdownextradata-plugin = "^0.2.5"
mkdocs-jupyter = "^0.24.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.unit_tests.dependencies]
pytest-sugar = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q -p no:warnings --junitxml=test-results.xml"
testpaths = ["tests/unit_tests/"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false


[tool.isort]
profile = "black"
known_third_party = ["pydantic"]
skip = [".gitignore", ".dockerignore"]
extend_skip = [".md", ".json"]
line_length = 120
skip_gitignore = true
length_sort_straight = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
ensure_newline_before_comments = true
use_parentheses = true
py_version = 310

[tool.black]
# https://github.com/psf/black
line-length = 120
exclude = '''
(
  /(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | htmlcov
    | venv
    | .venv
  )/
)
'''

[tool.mypy]
strict = false
plugins = ["pydantic.mypy"]

follow_imports = "skip"
warn_redundant_casts = true
no_implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true
warn_untyped_fields = false

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203"]
max-complexity = 10


[tool.ruff]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  # "I",  # isort
  "B", # flake8-bugbear
]
ignore = [
  "E501", # line too long, handled by black
  "B904", # Within an except clause, raise exceptions with raise ... from err or raise ... from None to distinguish them from errors in exception handling
  "B008", # Do not perform function call {name} in argument defaults
  "B006", # Do not use mutable data structures for argument defaults
  "C901", # too complex
  "E402", # Module level import not at top of file
]

# Group violations by containing file.
respect-gitignore = true
src = ["flaui"]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"
fix = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
order-by-type = true
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 1
force-single-line = false
split-on-trailing-comma = false
known-third-party = ["pydantic"]

[tool.coverage.run]
disable_warnings = ["no-data-collected"]
branch = true
source = ["flaui"]
command_line = "-m pytest . -v"
relative_files = true

[tool.coverage.html]
directory = "htmlcov"
skip_empty = true
title = "FlaUI Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.lcov]
output = "coverage.lcov"

[tool.coverage.report]
exclude_also = [
  "raise RuntimeError",
  "if waiter_config is None:",
  "except AssertionError",
  "except ClientError",
  "except WaiterError",
]
