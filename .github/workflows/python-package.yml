name: Python package

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, edited]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for Python 3.7
        if: matrix.python-version == '3.7'
        run: pip install -r requirements.txt

      - name: Install dependencies for Python 3.8 and above
        if: matrix.python-version != '3.7'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true
          poetry install --with unit_test,dev,docs

      - name: Test with pytest
        id: pytest
        run: |
          if [ "${{ matrix.python-version }}" == "3.7" ]; then
            pytest --junitxml=junit/test-results.xml .
          else
            poetry run pytest --junitxml=junit/test-results.xml .
          fi
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: junit/test-results.xml

  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Setup Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Install pre-commit
        run: |
          poetry install --only dev
          poetry run pre-commit install

      - name: Summarize Pre-Commit results
        id: summarize_pre_commit
        run: |
          echo "Pre-Commit results summary:"
          echo ""
          poetry run pre-commit run --all-files --show-diff-on-failure
        continue-on-error: true

      - name: Comment Pre-Commit summary on pull request
        uses: actions/github-script@v6
        env:
          PRE_COMMIT_OUTCOME: ${{ steps.summarize_pre_commit.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pre-Commit results summary')
            })

            // 2. Prepare format of the comment
            const output = `#### Pre-Commit results summary ðŸ¤–\`${process.env.PRE_COMMIT_OUTCOME}\`

            <details><summary>Show Details</summary>

            \`\`\`\n
            $(cat ${{ github.workspace }}/pre-commit.log)
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Fetch latest release version from Test PyPI
        run: |
          curl -s https://test.pypi.org/pypi/flaui-uiautomation-wrapper/json | jq -r '.info.version' > latest_version.txt
          echo "::set-output name=latest_version::$(cat latest_version.txt)"

      - name: Update package version
        id: update_version
        run: |
          poetry version $(cat latest_version.txt)
          poetry version prerelease
          echo "::set-output name=version::$(poetry version | cut -d' ' -f2)"
          git add pyproject.toml
          git commit -m "Bump version to $(poetry version | cut -d' ' -f2)"
          git push

      - name: Build and publish distribution ðŸ“¦ to Test PyPI
        run: |
          $POETRY_TEST_PYPI_TOKEN = ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.pypi $POETRY_TEST_PYPI_TOKEN
          poetry publish --build

      - name: Comment on pull request
        if: startsWith(github.ref, 'refs/tags')
        uses: actions/github-script@v6
        env:
          UPGRADED_POETRY_VERSION: ${{ steps.update_version.outputs.version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deployed to Test PyPI')
            })

            // 2. Prepare format of the comment
            const output = `#### Deployed to Test PyPI ðŸš€

            The package version \`${process.env.UPGRADED_POETRY_VERSION}\` has been published to Test PyPI. Please test and verify the package before publishing to PyPI.`;
            URL = `https://test.pypi.org/project/flaui-uiautomation-wrapper/${process.env.UPGRADED_POETRY_VERSION}/`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  summarize:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summarize Pytest results
        id: pytest_summary
        run: |
          echo "Pytest results summary:"
          echo ""
          for version in 3.7 3.8 3.9 3.10 3.11; do
            echo "Python $version:"
            echo ""
            cat ${{ steps.test.pytest.outputs.test-results }} | grep -oP 'failures="\K[^"]+' | sed 's/^/  /'
            cat ${{ steps.test.pytest.outputs.test-results }} | grep -oP 'errors="\K[^"]+' | sed 's/^/  /'
            cat ${{ steps.test.pytest.outputs.test-results }} | grep -oP 'skips="\K[^"]+' | sed 's/^/  /'
            echo ""
          done
      - name: Comment on pull request
        uses: actions/github-script@v6
        env:
          PYTEST_OUTCOME: ${{ steps.pytest_summary.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pytest results summary')
            })

            // 2. Prepare format of the comment
            const output = `#### Pytest results summary ðŸ§ª\`${process.env.PYTEST_OUTCOME}\`

            <details><summary>Show Details</summary>

            \`\`\`\n
            ${fs.readFileSync("${{ github.workspace }}/junit/test-results.xml", "utf8")}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
