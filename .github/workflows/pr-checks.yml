name: PR Checks

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  build_artifacts:
    name: Build Test WPF Applications and publish to Artifacts
    runs-on: windows-latest
    steps:
      - name: Download artifact 1
        id: download-wpf-application
        uses: actions/download-artifact@v3
        with:
          name: wpf-application
        continue-on-error: true

      - name: Download artifact 2
        id: download-winforms-application
        uses: actions/download-artifact@v3
        with:
          name: winforms-application
        continue-on-error: true

      - name: Set environment flag to proceed
        id: set_proceed_flag
        run: |
          if [ -z "${{ steps.download-wpf-application.outputs.artifact_path }}" ] && [ -z "${{ steps.download-winforms-application.outputs.artifact_path }}" ]; then
            echo "Artifacts do not exist"
            echo "proceed_flag=false" >> "$GITHUB_OUTPUT"
          else
            echo "Artifacts exist"
            echo "proceed_flag=true" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@v4
        if: steps.set_proceed_flag.outputs.proceed_flag == 'true'
        with:
          repository: "FlaUI/FlaUI"
          ref: "master"

      - name: Install .NET 6.0 SDK
        if: steps.set_proceed_flag.outputs.proceed_flag == 'true'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build Test WPF Applications
        if: steps.set_proceed_flag.outputs.proceed_flag == 'true'
        run: |
          pwsh -File build.ps1

      - name: Upload WPF application
        if: steps.set_proceed_flag.outputs.proceed_flag == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: wpf-application
          path: src\TestApplications\WpfApplication\bin\*
          if-no-files-found: error
          retention-days: 90

      - name: Upload WinForms applications
        if: steps.set_proceed_flag.outputs.proceed_flag == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: winforms-application
          path: src\TestApplications\WinFormsApplication\bin\*
          if-no-files-found: error
          retention-days: 90

  test:
    name: Test with pytest
    needs: build_artifacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for Python ${{ matrix.python-version }}
        run: |
          if [ "${{ matrix.python-version }}" == "3.7" ]; then
            pip install -r requirements.txt
            pip install pytest-github-actions-annotate-failures
          else
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            poetry config virtualenvs.in-project true
            poetry install --with unit_test,dev
            poetry run pip install pytest-github-actions-annotate-failures
          fi

      - name: Download WPF application
        uses: actions/download-artifact@v3
        with:
          name: wpf-application
          path: test_applications/WPFApplication

      - name: Download WinForms application
        uses: actions/download-artifact@v3
        with:
          name: winforms-application
          path: test_applications/WinFormsApplication

      - name: List all files
        run: |
          ls -R

      - name: Test with pytest
        id: pytest
        run: |
          if [ "${{ matrix.python-version }}" == "3.7" ]; then
            pytest . --junitxml=junit/test-results.xml
          else
            poetry run pytest . --junitxml=junit/test-results.xml
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: junit/test-results.xml

      - name: Update PR with PyTest result summary
        uses: actions/github-script@v6
        env:
          PYTEST_OUTCOME: ${{ steps.pytest.outcome }}
          PYTEST_RESULTS: ${{ steps.pytest.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pytest results summary - Python ${{ matrix.python-version }}')
            })

            // 2. Prepare format of the comment
            const output = `#### Pytest results summary - Python ${{ matrix.python-version }} ðŸ§ª\`${process.env.PYTEST_OUTCOME}\`

            <details><summary>Show Details</summary>

            \`\`\`\n
            ${process.env.PYTEST_RESULTS}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  linting_checks:
    name: Validations with Ruff, Interrogate
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Run Ruff checks
        run: |
          echo "Ruff checks results summary:"
          echo ""
          ruff check . --all --no-color --format=github --output=stdout | sed 's/^/  /'

      - name: Python Interrogate Check
        uses: JackMcKew/python-interrogate-check@v0.1.1
        with:
          path: flaui
          badge-location: "badges/interrogate_badge.svg"

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add badges/interrogate_badge.svg
          git diff --exit-code || git commit -m "Update interrogate_badge.svg" -a

      - name: Push changes
        if: success()
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  publish:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Setup Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Get latest version from Test PyPI
        id: get_latest_version
        run: |
          current_version=$(curl -s https://test.pypi.org/pypi/flaui-uiautomation-wrapper/json | jq -r '.releases | keys | sort_by(.) | .[-1]')
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

      - name: Update package version
        id: update_version
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          poetry version "${{ steps.get_latest_version.outputs.current_version }}"
          poetry version prerelease
          echo "updated_version=$(poetry version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          git add pyproject.toml
          git commit -m "Bump version to $(poetry version | cut -d' ' -f2)"

      - name: Build and publish distribution ðŸ“¦ to Test PyPI
        uses: JRubics/poetry-publish@v1.17
        with:
          pypi_token: ${{ secrets.TEST_PYPI_API_TOKEN }}
          allow_poetry_pre_release: "yes"
          ignore_dev_requirements: "yes"
          repository_url: https://test.pypi.org/legacy/
          repository_name: flaui-uiautomation-wrapper

      - name: Push changes
        if: success()
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Comment on pull request
        uses: actions/github-script@v6
        env:
          UPGRADED_POETRY_VERSION: ${{ steps.update_version.outputs.updated_version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deployed to Test PyPI')
            })

            // 2. Prepare format of the comment
            const output = `#### Deployed to Test PyPI ðŸš€

            The package version \`${process.env.UPGRADED_POETRY_VERSION}\` has been published to Test PyPI. Please test and verify the package before publishing to PyPI.`;
            URL = `https://test.pypi.org/project/flaui-uiautomation-wrapper/${process.env.UPGRADED_POETRY_VERSION}/`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
